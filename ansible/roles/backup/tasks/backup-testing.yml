---
# Backup Testing Automation Tasks

- name: Create backup testing directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0755'
  loop:
    - "{{ backup_home_dir }}/testing"
    - "{{ backup_home_dir }}/testing/scripts"
    - "{{ backup_home_dir }}/testing/results"
    - "{{ backup_home_dir }}/testing/temp"
    - "{{ backup_home_dir }}/testing/logs"
    - "{{ backup_home_dir }}/testing/reports"
  become: yes
  tags: ['backup-testing', 'directories']

- name: Generate backup integrity test script
  template:
    src: backup-integrity-test.sh.j2
    dest: "{{ backup_home_dir }}/testing/scripts/backup-integrity-test.sh"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0755'
  tags: ['backup-testing', 'scripts']

- name: Generate backup restoration test script
  template:
    src: backup-restoration-test.sh.j2
    dest: "{{ backup_home_dir }}/testing/scripts/backup-restoration-test.sh"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0755'
  tags: ['backup-testing', 'scripts']

- name: Generate backup performance test script
  template:
    src: backup-performance-test.sh.j2
    dest: "{{ backup_home_dir }}/testing/scripts/backup-performance-test.sh"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0755'
  tags: ['backup-testing', 'scripts']

- name: Generate backup automation test suite
  template:
    src: backup-test-suite.sh.j2
    dest: "{{ backup_home_dir }}/testing/scripts/backup-test-suite.sh"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0755'
  tags: ['backup-testing', 'scripts']

- name: Generate backup compliance test script
  template:
    src: backup-compliance-test.sh.j2
    dest: "{{ backup_home_dir }}/testing/scripts/backup-compliance-test.sh"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0755'
  tags: ['backup-testing', 'scripts']

- name: Generate backup encryption test script
  template:
    src: backup-encryption-test.sh.j2
    dest: "{{ backup_home_dir }}/testing/scripts/backup-encryption-test.sh"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0755'
  tags: ['backup-testing', 'scripts']

- name: Generate backup network test script
  template:
    src: backup-network-test.sh.j2
    dest: "{{ backup_home_dir }}/testing/scripts/backup-network-test.sh"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0755'
  tags: ['backup-testing', 'scripts']

- name: Generate backup metadata validation script
  template:
    src: backup-metadata-validation.sh.j2
    dest: "{{ backup_home_dir }}/testing/scripts/backup-metadata-validation.sh"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0755'
  tags: ['backup-testing', 'scripts']

- name: Create backup testing configuration
  template:
    src: backup-test-config.yml.j2
    dest: "{{ backup_home_dir }}/testing/backup-test-config.yml"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0644'
  tags: ['backup-testing', 'config']

- name: Create backup test scenarios configuration
  template:
    src: backup-test-scenarios.json.j2
    dest: "{{ backup_home_dir }}/testing/backup-test-scenarios.json"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0644'
  tags: ['backup-testing', 'config']

- name: Create backup testing systemd service
  template:
    src: backup-test.service.j2
    dest: /etc/systemd/system/jenkins-backup-test.service
    owner: root
    group: root
    mode: '0644'
  become: yes
  tags: ['backup-testing', 'systemd']

- name: Create backup testing timer
  template:
    src: backup-test.timer.j2
    dest: /etc/systemd/system/jenkins-backup-test.timer
    owner: root
    group: root
    mode: '0644'
  become: yes
  tags: ['backup-testing', 'systemd']

- name: Reload systemd for backup testing services
  systemd:
    daemon_reload: yes
  become: yes
  tags: ['backup-testing', 'systemd']

- name: Enable backup testing timer
  systemd:
    name: jenkins-backup-test.timer
    enabled: yes
    state: started
  become: yes
  when: backup_automated_testing_enabled | default(true)
  tags: ['backup-testing', 'systemd']

- name: Create backup test metrics collection script
  template:
    src: backup-test-metrics.sh.j2
    dest: "{{ backup_home_dir }}/testing/scripts/backup-test-metrics.sh"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0755'
  tags: ['backup-testing', 'metrics']

- name: Create backup test result analyzer
  template:
    src: backup-test-analyzer.py.j2
    dest: "{{ backup_home_dir }}/testing/scripts/backup-test-analyzer.py"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0755'
  tags: ['backup-testing', 'analysis']

- name: Install Python dependencies for test analyzer
  pip:
    name:
      - jinja2
      - pyyaml
      - requests
      - matplotlib
      - pandas
    state: present
  become: yes
  when: backup_test_analysis_enabled | default(true)
  tags: ['backup-testing', 'dependencies']

- name: Create backup test notification script
  template:
    src: backup-test-notification.sh.j2
    dest: "{{ backup_home_dir }}/testing/scripts/backup-test-notification.sh"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0755'
  tags: ['backup-testing', 'notification']

- name: Generate backup test dashboard
  template:
    src: backup-test-dashboard.html.j2
    dest: "{{ backup_home_dir }}/testing/backup-test-dashboard.html"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0644'
  tags: ['backup-testing', 'dashboard']

- name: Create backup test log aggregation configuration
  template:
    src: backup-test-logging.conf.j2
    dest: "{{ backup_home_dir }}/testing/backup-test-logging.conf"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0644'
  tags: ['backup-testing', 'logging']

- name: Setup backup test log rotation
  template:
    src: backup-test-logrotate.j2
    dest: /etc/logrotate.d/jenkins-backup-test
    owner: root
    group: root
    mode: '0644'
  become: yes
  tags: ['backup-testing', 'logging']

- name: Run initial backup integrity test
  command: "{{ backup_home_dir }}/testing/scripts/backup-integrity-test.sh --quick-check"
  register: backup_integrity_test_result
  when: backup_run_initial_test | default(true)
  failed_when: false
  tags: ['backup-testing', 'initial-test']

- name: Run backup encryption validation
  command: "{{ backup_home_dir }}/testing/scripts/backup-encryption-test.sh --validate"
  register: backup_encryption_test_result
  when: 
    - backup_run_initial_test | default(true)
    - backup_encryption_enabled | default(true)
  failed_when: false
  tags: ['backup-testing', 'initial-test']

- name: Generate initial backup test report
  template:
    src: backup-test-report.html.j2
    dest: "{{ backup_home_dir }}/testing/reports/backup-test-report-{{ ansible_date_time.date }}.html"
    owner: "{{ backup_user }}"
    group: "{{ backup_group }}"
    mode: '0644'
  tags: ['backup-testing', 'reporting']

- name: Create backup test alerting rules for Prometheus
  template:
    src: backup-test-alerts.yml.j2
    dest: /etc/prometheus/rules/backup-test-alerts.yml
    owner: prometheus
    group: prometheus
    mode: '0644'
  become: yes
  when: prometheus_enabled | default(true)
  notify: reload prometheus
  tags: ['backup-testing', 'monitoring']

- name: Display backup testing configuration
  debug:
    msg: |
      Backup Testing Configuration:
      
      Automated Testing: {{ 'Enabled' if backup_automated_testing_enabled | default(true) else 'Disabled' }}
      Test Schedule: {{ backup_test_schedule | default('0 4 * * 1') }} (Weekly)
      
      Test Components:
      - Integrity Tests: Enabled
      - Restoration Tests: Enabled
      - Performance Tests: {{ 'Enabled' if backup_performance_testing_enabled | default(true) else 'Disabled' }}
      - Encryption Tests: {{ 'Enabled' if backup_encryption_enabled | default(true) else 'Disabled' }}
      - Compliance Tests: {{ 'Enabled' if backup_compliance_testing_enabled | default(true) else 'Disabled' }}
      - Network Tests: {{ 'Enabled' if backup_network_testing_enabled | default(true) else 'Disabled' }}
      
      Initial Test Results:
      - Integrity Test: {{ 'PASSED' if backup_integrity_test_result.rc == 0 else 'FAILED' if backup_integrity_test_result is defined else 'Not Run' }}
      - Encryption Test: {{ 'PASSED' if backup_encryption_test_result.rc == 0 else 'FAILED' if backup_encryption_test_result is defined else 'Not Run' }}
      
      Test Analysis: {{ 'Enabled' if backup_test_analysis_enabled | default(true) else 'Disabled' }}
      Test Notifications: {{ 'Enabled' if backup_test_notifications_enabled | default(true) else 'Disabled' }}
      
      Management Commands:
      - Run Full Test Suite: {{ backup_home_dir }}/testing/scripts/backup-test-suite.sh
      - Check Test Status: {{ backup_home_dir }}/testing/scripts/backup-test-metrics.sh --status
      - Generate Report: {{ backup_home_dir }}/testing/scripts/backup-test-analyzer.py --generate-report
  tags: ['backup-testing', 'info']