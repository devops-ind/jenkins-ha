#!/bin/bash
# Jenkins Backup Report Generator
# Generated by Ansible

BACKUP_DIR="{{ backup_destination | default('/backup/jenkins') }}"
LOG_FILE="{{ backup_log_dir | default('/var/log/jenkins-backup') }}/backup-report.log"
REPORT_FILE="{{ backup_report_dir | default('/var/log/jenkins-backup') }}/backup-report-$(date +%Y%m%d).html"
EMAIL_RECIPIENTS="{{ backup_report_email | default('') }}"

# Create report directory if it doesn't exist
mkdir -p "$(dirname "$REPORT_FILE")"

# Function to log messages
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Function to calculate size in human readable format
human_readable_size() {
    local size=$1
    if [ "$size" -ge 1073741824 ]; then
        echo "$(echo "scale=2; $size / 1073741824" | bc)GB"
    elif [ "$size" -ge 1048576 ]; then
        echo "$(echo "scale=2; $size / 1048576" | bc)MB"
    elif [ "$size" -ge 1024 ]; then
        echo "$(echo "scale=2; $size / 1024" | bc)KB"
    else
        echo "${size}B"
    fi
}

# Generate HTML report
generate_html_report() {
    cat > "$REPORT_FILE" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>Jenkins Backup Report - $(date +%Y-%m-%d)</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: #f4f4f4; padding: 10px; border-radius: 5px; }
        .success { color: green; }
        .error { color: red; }
        .warning { color: orange; }
        table { border-collapse: collapse; width: 100%; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .footer { margin-top: 30px; font-size: 12px; color: #666; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Jenkins Backup Report</h1>
        <p><strong>Generated:</strong> $(date)</p>
        <p><strong>Host:</strong> $(hostname)</p>
    </div>

    <h2>Backup Summary</h2>
    <table>
        <tr><th>Metric</th><th>Value</th></tr>
EOF

    # Add backup statistics
    local total_backups=$(find "$BACKUP_DIR" -name "jenkins-backup-*.tar.gz" -type f 2>/dev/null | wc -l)
    local latest_backup=$(find "$BACKUP_DIR" -name "jenkins-backup-*.tar.gz" -type f -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -d' ' -f2-)
    
    if [ -n "$latest_backup" ]; then
        local backup_size=$(stat -c%s "$latest_backup" 2>/dev/null || echo "0")
        local backup_date=$(stat -c%y "$latest_backup" 2>/dev/null | cut -d' ' -f1)
        local backup_age_hours=$(echo "($(date +%s) - $(stat -c%Y "$latest_backup" 2>/dev/null || echo "0")) / 3600" | bc 2>/dev/null || echo "unknown")
        
        cat >> "$REPORT_FILE" << EOF
        <tr><td>Total Backups</td><td>$total_backups</td></tr>
        <tr><td>Latest Backup</td><td>$(basename "$latest_backup")</td></tr>
        <tr><td>Backup Size</td><td>$(human_readable_size $backup_size)</td></tr>
        <tr><td>Backup Date</td><td>$backup_date</td></tr>
        <tr><td>Age (hours)</td><td>$backup_age_hours</td></tr>
EOF
    else
        cat >> "$REPORT_FILE" << EOF
        <tr><td colspan="2" class="error">No backups found!</td></tr>
EOF
    fi

    cat >> "$REPORT_FILE" << EOF
    </table>

    <h2>Backup Files</h2>
    <table>
        <tr><th>Filename</th><th>Size</th><th>Date</th><th>Age</th></tr>
EOF

    # List recent backups (last 10)
    find "$BACKUP_DIR" -name "jenkins-backup-*.tar.gz" -type f -printf '%T@ %p %s %TY-%Tm-%Td\n' 2>/dev/null | \
    sort -nr | head -10 | while read timestamp filepath size date; do
        local age_days=$(echo "($(date +%s) - ${timestamp%.*}) / 86400" | bc 2>/dev/null || echo "0")
        echo "        <tr><td>$(basename "$filepath")</td><td>$(human_readable_size $size)</td><td>$date</td><td>${age_days} days</td></tr>" >> "$REPORT_FILE"
    done

    cat >> "$REPORT_FILE" << EOF
    </table>

    <h2>Storage Usage</h2>
    <table>
        <tr><th>Directory</th><th>Used Space</th><th>Available Space</th><th>Usage %</th></tr>
EOF

    # Add disk usage information
    df -h "$BACKUP_DIR" 2>/dev/null | tail -1 | while read filesystem size used avail percent mountpoint; do
        cat >> "$REPORT_FILE" << EOF
        <tr><td>$mountpoint</td><td>$used</td><td>$avail</td><td>$percent</td></tr>
EOF
    done

    cat >> "$REPORT_FILE" << EOF
    </table>

    <h2>Recent Log Entries</h2>
    <pre>
$(tail -20 "$LOG_FILE" 2>/dev/null | html_escape)
    </pre>

    <div class="footer">
        <p>Report generated by Jenkins Backup System on {{ ansible_hostname }}</p>
        <p>Backup retention: {{ backup_retention_days | default('30') }} days</p>
    </div>
</body>
</html>
EOF
}

# Function to escape HTML characters
html_escape() {
    sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g'
}

# Function to send email report
send_email_report() {
    if [ -n "$EMAIL_RECIPIENTS" ] && command -v mail >/dev/null 2>&1; then
        log_message "Sending backup report to: $EMAIL_RECIPIENTS"
        {
            echo "Subject: Jenkins Backup Report - $(hostname) - $(date +%Y-%m-%d)"
            echo "Content-Type: text/html"
            echo ""
            cat "$REPORT_FILE"
        } | mail "$EMAIL_RECIPIENTS"
    fi
}

# Main execution
log_message "Starting backup report generation"

# Generate the HTML report
generate_html_report

# Send email if configured
send_email_report

log_message "Backup report generated: $REPORT_FILE"

# Clean up old reports (keep last 30 days)
find "$(dirname "$REPORT_FILE")" -name "backup-report-*.html" -type f -mtime +30 -delete 2>/dev/null

exit 0