---
# HAProxy High Availability Role - Event Handlers

- name: restart haproxy container
  community.docker.docker_container:
    name: "jenkins-haproxy"
    state: started
    restart: yes
  become: yes
  when: haproxy_container_runtime == 'docker'
  listen: "restart haproxy container"

- name: restart haproxy container (podman)
  containers.podman.podman_container:
    name: "jenkins-haproxy"
    state: started
    restart: yes
  become: yes
  when: haproxy_container_runtime == 'podman'
  listen: "restart haproxy container"

- name: restart haproxy
  community.docker.docker_container:
    name: "jenkins-haproxy"
    state: started
    restart: yes
  become: yes
  when: haproxy_container_runtime == 'docker'
  listen: "restart haproxy"

- name: restart haproxy (podman)
  containers.podman.podman_container:
    name: "jenkins-haproxy"
    state: started
    restart: yes
  become: yes
  when: haproxy_container_runtime == 'podman'
  listen: "restart haproxy"

- name: reload haproxy
  shell: |
    if [ "{{ haproxy_container_runtime }}" = "docker" ]; then
        docker exec jenkins-haproxy kill -HUP 1
    else
        podman exec jenkins-haproxy kill -HUP 1
    fi
  become: yes
  listen: "reload haproxy"

- name: restart keepalived
  systemd:
    name: keepalived
    state: restarted
    enabled: yes
    daemon_reload: yes
  become: yes
  listen: "restart keepalived"

- name: validate haproxy config
  shell: |
    if [ "{{ haproxy_container_runtime }}" = "docker" ]; then
        docker exec jenkins-haproxy haproxy -f /usr/local/etc/haproxy/haproxy.cfg -c
    else
        podman exec jenkins-haproxy haproxy -f /usr/local/etc/haproxy/haproxy.cfg -c
    fi
  become: yes
  listen: "validate haproxy config"

- name: reload ssl certificates
  community.docker.docker_container:
    name: "jenkins-haproxy"
    state: started
    restart: yes
  become: yes
  when: haproxy_container_runtime == 'docker'
  listen: "reload ssl certificates"

- name: reload ssl certificates (podman)
  containers.podman.podman_container:
    name: "jenkins-haproxy"
    state: started
    restart: yes
  become: yes
  when: haproxy_container_runtime == 'podman'
  listen: "reload ssl certificates"

- name: update haproxy stats
  uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ haproxy_stats_port | default(8404) }}/stats"
    method: GET
    status_code: 200
  ignore_errors: yes
  listen: "update haproxy stats"