#!/bin/bash
# Jenkins Multi-Team HA Failover Script
# Generated by Ansible high-availability role

set -euo pipefail

# Configuration
HAPROXY_SOCKET="/run/haproxy/admin.sock"
LOG_FILE="{{ monitoring_log_file | default('/var/log/jenkins-ha-monitor.log') }}"
FAILOVER_TIMEOUT={{ failover_timeout | default(60) }}
MAX_FAILOVER_ATTEMPTS={{ failover_max_attempts | default(3) }}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [FAILOVER] $1" | tee -a "$LOG_FILE"
}

# HAProxy socket command function
haproxy_command() {
    local command="$1"
    
    if [ -S "$HAPROXY_SOCKET" ]; then
        echo "$command" | socat stdio "$HAPROXY_SOCKET" 2>/dev/null || return 1
    else
        log "ERROR: HAProxy socket not available at $HAPROXY_SOCKET"
        return 1
    fi
}

# Get server status
get_server_status() {
    local backend="$1"
    local server="$2"
    
    haproxy_command "show stat" | grep "^$backend,$server," | cut -d',' -f18
}

# Enable/disable server in backend
toggle_server() {
    local action="$1"  # enable or disable
    local backend="$2"
    local server="$3"
    
    local command
    case "$action" in
        "enable")
            command="enable server $backend/$server"
            ;;
        "disable")
            command="disable server $backend/$server"
            ;;
        *)
            log "ERROR: Invalid action: $action"
            return 1
            ;;
    esac
    
    if haproxy_command "$command"; then
        log "SUCCESS: $action server $backend/$server"
        return 0
    else
        log "ERROR: Failed to $action server $backend/$server"
        return 1
    fi
}

# Perform blue-green failover for a team
perform_team_failover() {
    local team="$1"
    local backend="jenkins_backend_$team"
    
    log "Starting failover for team: $team"
    
    # Get current active/backup servers
    local blue_servers green_servers
    blue_servers=$(haproxy_command "show stat" | grep "^$backend," | grep "blue" | grep -v "backup" || true)
    green_servers=$(haproxy_command "show stat" | grep "^$backend," | grep "green" | grep -v "backup" || true)
    
    if [ -n "$blue_servers" ]; then
        log "Current active environment: BLUE, switching to GREEN"
        
        # Enable green servers
        haproxy_command "show stat" | grep "^$backend," | grep "green" | while IFS=',' read -r be srv rest; do
            toggle_server "enable" "$be" "$srv"
        done
        
        # Wait for green servers to be ready
        sleep 5
        
        # Disable blue servers (mark as backup)
        haproxy_command "show stat" | grep "^$backend," | grep "blue" | while IFS=',' read -r be srv rest; do
            haproxy_command "set server $be/$srv state maint"
        done
        
        log "Failover completed: $team now running on GREEN environment"
        
    elif [ -n "$green_servers" ]; then
        log "Current active environment: GREEN, switching to BLUE"
        
        # Enable blue servers
        haproxy_command "show stat" | grep "^$backend," | grep "blue" | while IFS=',' read -r be srv rest; do
            toggle_server "enable" "$be" "$srv"
        done
        
        # Wait for blue servers to be ready
        sleep 5
        
        # Disable green servers
        haproxy_command "show stat" | grep "^$backend," | grep "green" | while IFS=',' read -r be srv rest; do
            haproxy_command "set server $be/$srv state maint"
        done
        
        log "Failover completed: $team now running on BLUE environment"
        
    else
        log "ERROR: No active servers found for team $team"
        return 1
    fi
}

# Health check after failover
verify_failover() {
    local team="$1"
    local backend="jenkins_backend_$team"
    local url="{{ 'https' if ssl_enabled | default(false) else 'http' }}://$team.{{ jenkins_domain | default('devops.example.com') }}"
    
    log "Verifying failover for team $team..."
    
    local attempt=1
    while [ $attempt -le 10 ]; do
        if curl -sf --connect-timeout 10 "$url/login" >/dev/null 2>&1; then
            log "SUCCESS: Team $team is responding after failover"
            return 0
        fi
        
        log "Verification attempt $attempt/10 failed, waiting..."
        sleep 6
        ((attempt++))
    done
    
    log "ERROR: Team $team not responding after failover"
    return 1
}

# Emergency failover - disable problematic servers
emergency_failover() {
    local backend="$1"
    
    log "Performing emergency failover for backend: $backend"
    
    # Get all servers in the backend
    local servers
    servers=$(haproxy_command "show stat" | grep "^$backend," | grep -v "BACKEND" | cut -d',' -f2)
    
    for server in $servers; do
        local status
        status=$(get_server_status "$backend" "$server")
        
        if [ "$status" != "UP" ]; then
            log "Server $backend/$server is $status, disabling..."
            toggle_server "disable" "$backend" "$server"
        fi
    done
    
    # Try to enable any backup servers
    haproxy_command "show stat" | grep "^$backend," | grep "backup" | while IFS=',' read -r be srv rest; do
        log "Enabling backup server: $be/$srv"
        toggle_server "enable" "$be" "$srv"
    done
}

# Main failover logic
main() {
    local team="${1:-}"
    local action="${2:-auto}"
    
    log "=== Jenkins HA Failover Started ==="
    log "Team: ${team:-ALL}"
    log "Action: $action"
    
    case "$action" in
        "auto")
            log "Performing automatic failover based on health status"
            
            {% if jenkins_teams is defined and jenkins_teams | length > 0 %}
            {% for team in jenkins_teams %}
            if [ -z "$team" ] || [ "$team" = "{{ team.team_name }}" ]; then
                perform_team_failover "{{ team.team_name }}"
                verify_failover "{{ team.team_name }}" || emergency_failover "jenkins_backend_{{ team.team_name }}"
            fi
            {% endfor %}
            {% else %}
            # Default teams
            for default_team in dev staging prod; do
                if [ -z "$team" ] || [ "$team" = "$default_team" ]; then
                    perform_team_failover "$default_team"
                    verify_failover "$default_team" || emergency_failover "jenkins_backend_$default_team"
                fi
            done
            {% endif %}
            ;;
            
        "emergency")
            log "Performing emergency failover - disabling unhealthy servers"
            
            if [ -n "$team" ]; then
                emergency_failover "jenkins_backend_$team"
            else
                {% if jenkins_teams is defined and jenkins_teams | length > 0 %}
                {% for team in jenkins_teams %}
                emergency_failover "jenkins_backend_{{ team.team_name }}"
                {% endfor %}
                {% else %}
                emergency_failover "jenkins_backend_default"
                for default_team in dev staging prod; do
                    emergency_failover "jenkins_backend_$default_team"
                done
                {% endif %}
            fi
            ;;
            
        "status")
            log "Current HAProxy status:"
            haproxy_command "show stat" | grep -E "^jenkins_backend_"
            ;;
            
        *)
            echo "Usage: $0 [team] [auto|emergency|status]"
            echo "  team: Optional team name to failover (or 'all' for all teams)"
            echo "  action: auto (default), emergency, or status"
            exit 1
            ;;
    esac
    
    log "=== Jenkins HA Failover Completed ==="
}

# Handle script termination
trap 'log "Failover script interrupted"; exit 1' INT TERM

# Execute main function
main "$@"