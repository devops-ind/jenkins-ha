#!/bin/bash
# HAProxy Container Management Script
# Generated by Ansible high-availability role

set -euo pipefail

HAPROXY_CONTAINER="jenkins-haproxy"
COMPOSE_FILE="/etc/haproxy/docker-compose.yml"
LOG_FILE="/var/log/haproxy-container.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Check if Docker is running
check_docker() {
    if ! systemctl is-active docker >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker service is not running${NC}"
        log "ERROR: Docker service is not running"
        return 1
    fi
    return 0
}

# Start HAProxy container
start_haproxy() {
    log "Starting HAProxy container..."
    
    if ! check_docker; then
        return 1
    fi
    
    cd /etc/haproxy
    if docker-compose up -d; then
        echo -e "${GREEN}‚úÖ HAProxy container started successfully${NC}"
        log "SUCCESS: HAProxy container started"
        return 0
    else
        echo -e "${RED}‚ùå Failed to start HAProxy container${NC}"
        log "ERROR: Failed to start HAProxy container"
        return 1
    fi
}

# Stop HAProxy container
stop_haproxy() {
    log "Stopping HAProxy container..."
    
    cd /etc/haproxy
    if docker-compose down; then
        echo -e "${GREEN}‚úÖ HAProxy container stopped successfully${NC}"
        log "SUCCESS: HAProxy container stopped"
        return 0
    else
        echo -e "${RED}‚ùå Failed to stop HAProxy container${NC}"
        log "ERROR: Failed to stop HAProxy container"
        return 1
    fi
}

# Restart HAProxy container
restart_haproxy() {
    log "Restarting HAProxy container..."
    stop_haproxy && sleep 2 && start_haproxy
}

# Check HAProxy container status
status_haproxy() {
    echo "üîç HAProxy Container Status:"
    echo "=========================="
    
    if docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -q "^$HAPROXY_CONTAINER"; then
        echo -e "${GREEN}‚úÖ Container: RUNNING${NC}"
        
        # Show container details
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep "$HAPROXY_CONTAINER"
        
        # Show health status
        local health_status
        health_status=$(docker inspect --format='{{.State.Health.Status}}' "$HAPROXY_CONTAINER" 2>/dev/null || echo "unknown")
        echo "Health Status: $health_status"
        
        # Show resource usage
        echo ""
        echo "üìä Resource Usage:"
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" "$HAPROXY_CONTAINER"
        
    else
        echo -e "${RED}‚ùå Container: NOT RUNNING${NC}"
        
        # Check if container exists but is stopped
        if docker ps -a --format "table {{.Names}}" | grep -q "^$HAPROXY_CONTAINER$"; then
            echo -e "${YELLOW}‚ö†Ô∏è Container exists but is stopped${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è Container does not exist${NC}"
        fi
    fi
    
    # Show HAProxy stats URL
    echo ""
    echo "üîó HAProxy Stats: http://{{ ansible_default_ipv4.address }}:{{ haproxy_stats_port | default(8404) }}/stats"
}

# Show HAProxy logs
logs_haproxy() {
    local lines="${1:-50}"
    echo "üìã HAProxy Container Logs (last $lines lines):"
    echo "============================================="
    
    if docker ps --format "table {{.Names}}" | grep -q "^$HAPROXY_CONTAINER$"; then
        docker logs --tail "$lines" "$HAPROXY_CONTAINER"
    else
        echo -e "${RED}‚ùå Container is not running${NC}"
        return 1
    fi
}

# Validate HAProxy configuration
validate_config() {
    echo "üîß Validating HAProxy Configuration:"
    echo "===================================="
    
    if docker exec "$HAPROXY_CONTAINER" haproxy -f /usr/local/etc/haproxy/haproxy.cfg -c 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Configuration is valid${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Configuration validation failed${NC}"
        return 1
    fi
}

# Update container (pull new image and recreate)
update_haproxy() {
    log "Updating HAProxy container..."
    
    cd /etc/haproxy
    if docker-compose pull && docker-compose up -d --force-recreate; then
        echo -e "${GREEN}‚úÖ HAProxy container updated successfully${NC}"
        log "SUCCESS: HAProxy container updated"
        return 0
    else
        echo -e "${RED}‚ùå Failed to update HAProxy container${NC}"
        log "ERROR: Failed to update HAProxy container"
        return 1
    fi
}

# Clean up old images and containers
cleanup_haproxy() {
    log "Cleaning up HAProxy containers and images..."
    
    # Remove stopped containers
    docker container prune -f
    
    # Remove unused images
    docker image prune -f
    
    echo -e "${GREEN}‚úÖ Cleanup completed${NC}"
    log "SUCCESS: Cleanup completed"
}

# Main function
main() {
    case "${1:-}" in
        "start")
            start_haproxy
            ;;
        "stop")
            stop_haproxy
            ;;
        "restart")
            restart_haproxy
            ;;
        "status")
            status_haproxy
            ;;
        "logs")
            logs_haproxy "${2:-50}"
            ;;
        "validate")
            validate_config
            ;;
        "update")
            update_haproxy
            ;;
        "cleanup")
            cleanup_haproxy
            ;;
        *)
            echo "HAProxy Container Manager"
            echo "========================"
            echo "Usage: $0 {start|stop|restart|status|logs|validate|update|cleanup}"
            echo ""
            echo "Commands:"
            echo "  start     - Start HAProxy container"
            echo "  stop      - Stop HAProxy container"
            echo "  restart   - Restart HAProxy container"
            echo "  status    - Show container status and stats"
            echo "  logs      - Show container logs (optional: number of lines)"
            echo "  validate  - Validate HAProxy configuration"
            echo "  update    - Update container image and recreate"
            echo "  cleanup   - Clean up old containers and images"
            echo ""
            echo "Examples:"
            echo "  $0 status"
            echo "  $0 logs 100"
            echo "  $0 restart"
            exit 1
            ;;
    esac
}

# Execute main function
main "$@"