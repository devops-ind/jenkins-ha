#!/bin/bash
# Jenkins Multi-Team HA Health Check Script
# Generated by Ansible high-availability role

set -euo pipefail

# Configuration
HAPROXY_CONTAINER="jenkins-haproxy"
DOMAIN="{{ jenkins_domain | default('devops.example.com') }}"
PROTOCOL="{{ 'https' if ssl_enabled | default(false) else 'http' }}"
TIMEOUT={{ health_check_timeout | default(10) }}
RETRIES={{ health_check_retries | default(3) }}
LOG_FILE="{{ monitoring_log_file | default('/var/log/jenkins-ha-monitor.log') }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Container health check function
check_haproxy_container() {
    echo "🐳 Checking HAProxy container health..."
    
    if ! docker ps --format "table {% raw %}{{.Names}}{% endraw %}" | grep -q "^$HAPROXY_CONTAINER$"; then
        echo -e "${RED}❌ HAProxy container: NOT RUNNING${NC}"
        log "ERROR: HAProxy container '$HAPROXY_CONTAINER' is not running"
        return 1
    fi
    
    # Check container health status
    local health_status
    health_status=$(docker inspect --format='{{.State.Health.Status}}' "$HAPROXY_CONTAINER" 2>/dev/null || echo "unknown")
    
    if [ "$health_status" = "healthy" ]; then
        echo -e "${GREEN}✅ HAProxy container: HEALTHY${NC}"
        log "SUCCESS: HAProxy container is healthy"
        return 0
    elif [ "$health_status" = "starting" ]; then
        echo -e "${YELLOW}⚠️ HAProxy container: STARTING${NC}"
        log "WARNING: HAProxy container is still starting"
        return 1
    else
        echo -e "${RED}❌ HAProxy container: UNHEALTHY (status: $health_status)${NC}"
        log "ERROR: HAProxy container health status: $health_status"
        return 1
    fi
}

# Health check function
check_jenkins_health() {
    local team="$1"
    local url="$2"
    local attempt=1
    
    while [ $attempt -le $RETRIES ]; do
        if curl -sf --connect-timeout "$TIMEOUT" "$url/login" >/dev/null 2>&1; then
            echo -e "${GREEN}✅ $team: HEALTHY${NC}"
            log "SUCCESS: $team ($url) - healthy"
            return 0
        fi
        
        if [ $attempt -lt $RETRIES ]; then
            echo -e "${YELLOW}⚠️ $team: Retry $attempt/$RETRIES${NC}"
            sleep 2
        fi
        
        ((attempt++))
    done
    
    echo -e "${RED}❌ $team: UNHEALTHY${NC}"
    log "ERROR: $team ($url) - unhealthy after $RETRIES attempts"
    return 1
}

# HAProxy stats check
check_haproxy_stats() {
    local stats_url="http://{{ ansible_default_ipv4.address }}:{{ haproxy_stats_port | default(8404) }}/stats;csv"
    
    if curl -sf --connect-timeout "$TIMEOUT" "$stats_url" >/dev/null 2>&1; then
        echo -e "${GREEN}✅ HAProxy: HEALTHY${NC}"
        log "SUCCESS: HAProxy stats accessible"
        return 0
    else
        echo -e "${RED}❌ HAProxy: UNHEALTHY${NC}"
        log "ERROR: HAProxy stats not accessible"
        return 1
    fi
}

# Main health check execution
main() {
    echo "🏥 Jenkins Multi-Team Health Check"
    echo "=================================="
    echo "Domain: $DOMAIN"
    echo "Protocol: $PROTOCOL"
    echo "Timeout: ${TIMEOUT}s"
    echo "Retries: $RETRIES"
    echo ""
    
    local overall_health=0
    
    # Check HAProxy container first
    if ! check_haproxy_container; then
        overall_health=1
    fi
    
    echo ""
    
    # Check HAProxy stats
    if ! check_haproxy_stats; then
        overall_health=1
    fi
    
    echo ""
    
    # Check team endpoints
    {% if jenkins_teams is defined and jenkins_teams | length > 0 %}
    echo "Team Health Checks:"
    echo "-------------------"
    {% for team in jenkins_teams %}
    
    local {{ team.team_name }}_url="${PROTOCOL}://{{ team.team_name }}.${DOMAIN}"
    if ! check_jenkins_health "{{ team.team_name | title }}" "${{ team.team_name }}_url"; then
        overall_health=1
    fi
    {% endfor %}
    {% else %}
    # Default team checks
    echo "Default Team Health Checks:"
    echo "---------------------------"
    
    local jenkins_url="${PROTOCOL}://jenkins.${DOMAIN}"
    if ! check_jenkins_health "Jenkins" "$jenkins_url"; then
        overall_health=1
    fi
    
    local dev_url="${PROTOCOL}://dev.${DOMAIN}"
    if ! check_jenkins_health "Dev" "$dev_url"; then
        overall_health=1
    fi
    
    local staging_url="${PROTOCOL}://staging.${DOMAIN}"
    if ! check_jenkins_health "Staging" "$staging_url"; then
        overall_health=1
    fi
    
    local prod_url="${PROTOCOL}://prod.${DOMAIN}"
    if ! check_jenkins_health "Prod" "$prod_url"; then
        overall_health=1
    fi
    {% endif %}
    
    echo ""
    echo "=================================="
    
    if [ $overall_health -eq 0 ]; then
        echo -e "${GREEN}🎉 Overall Status: ALL HEALTHY${NC}"
        log "SUCCESS: All services healthy"
    else
        echo -e "${RED}💥 Overall Status: ISSUES DETECTED${NC}"
        log "WARNING: Health check issues detected"
        
        {% if failover_notification_enabled | default(false) %}
        # Send notification if configured
        if command -v mail >/dev/null 2>&1 && [ -n "${NOTIFICATION_EMAIL:-}" ]; then
            echo "Health check issues detected at $(date)" | mail -s "Jenkins HA Health Alert" "$NOTIFICATION_EMAIL"
        fi
        {% endif %}
    fi
    
    return $overall_health
}

# Execute main function
main "$@"