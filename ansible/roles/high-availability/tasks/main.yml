---
# HAProxy High Availability Role - Unified Container Management
# Supports multi-team Jenkins infrastructure with wildcard subdomain routing

# Detect deployment mode based on configuration
- name: Determine HAProxy deployment mode
  set_fact:
    haproxy_deployment_mode: "{{ 'multi-team' if jenkins_teams is defined and jenkins_teams | length > 0 else 'single-team' }}"
    haproxy_effective_teams: "{{ jenkins_teams if jenkins_teams is defined and jenkins_teams | length > 0 else [] }}"
  tags: ['always']

- name: Display HAProxy deployment configuration
  debug:
    msg: |
      HAProxy Deployment Mode: {{ haproxy_deployment_mode }}
      Teams: {{ haproxy_effective_teams | map(attribute='team_name') | list | join(', ') if haproxy_effective_teams else 'single-team' }}
      Container Runtime: {{ haproxy_container_runtime }}
      SSL Enabled: {{ ssl_enabled | default(false) }}
      Domain: {{ jenkins_domain | default('devops.example.com') }}
  tags: ['always']

# Pre-deployment validation
- name: Import validation tasks
  import_tasks: validation.yml
  tags: ['always', 'validate']

# System configuration and setup
- name: Import system configuration tasks
  import_tasks: configuration.yml
  tags: ['config', 'setup']

# Network infrastructure setup
- name: Import networking tasks
  import_tasks: networking.yml
  tags: ['network', 'setup']

# Volume management
- name: Import volume management tasks
  import_tasks: volumes.yml
  tags: ['volumes', 'setup']

# Container deployment
- name: Import container management tasks
  import_tasks: containers.yml
  tags: ['container', 'deploy']

# Monitoring and management scripts (must be deployed before keepalived)
- name: Create HA monitoring and management scripts
  template:
    src: "{{ item }}.j2"
    dest: "/usr/local/bin/{{ item }}"
    mode: '0755'
  loop:
    - jenkins-ha-monitor.sh
    - jenkins-failover.sh
    - haproxy-container-manager.sh
    - keepalived-haproxy-check.sh
  become: yes
  tags: ['ha', 'monitoring']

# Keepalived VIP management
- name: Install keepalived for VIP management
  package:
    name: keepalived
    state: present
  become: yes
  when: jenkins_vip is defined and jenkins_vip != ""
  tags: ['ha', 'vip']

- name: Configure keepalived for VIP
  template:
    src: keepalived.conf.j2
    dest: /etc/keepalived/keepalived.conf
    backup: yes
  become: yes
  notify: restart keepalived
  when: jenkins_vip is defined and jenkins_vip != ""
  tags: ['ha', 'vip']

- name: Start and enable keepalived
  systemd:
    name: keepalived
    state: started
    enabled: yes
    daemon_reload: yes
  become: yes
  when: jenkins_vip is defined and jenkins_vip != ""
  tags: ['ha', 'service']

- name: Check if crontab is available
  command: which crontab
  register: crontab_check
  failed_when: false
  changed_when: false
  tags: ['ha', 'monitoring']

- name: Setup HA monitoring cron job
  cron:
    name: "Jenkins HA Health Monitoring"
    job: "/usr/local/bin/jenkins-ha-monitor.sh"
    minute: "*/2"
    user: root
  become: yes
  when: crontab_check.rc == 0
  tags: ['ha', 'monitoring']

- name: Skip cron job setup (crontab not available)
  debug:
    msg: "Skipping HA monitoring cron job - crontab not installed (development environment)"
  when: crontab_check.rc != 0
  tags: ['ha', 'monitoring']

- name: Display multi-team HA configuration status
  debug:
    msg: |
      🎯 Jenkins Multi-Team High Availability Configuration (Containerized):
      
      🌐 Domain Configuration:
      Primary Domain: {{ jenkins_domain | default('devops.example.com') }}
      Wildcard Support: {{ jenkins_wildcard_domain | default('*.devops.example.com') }}
      SSL Enabled: {{ ssl_enabled | default(false) }}
      
      🐳 Containerized Load Balancer (HAProxy):
      Container: jenkins-haproxy ({{ haproxy_image_registry }}/{{ haproxy_image_name }}:{{ haproxy_image_tag }})
      Container Runtime: {{ haproxy_container_runtime }}
      Network Mode: {{ haproxy_network_mode }}
      {% if ssl_enabled | default(false) %}
      HTTPS: https://{{ jenkins_domain }}
      HTTP: http://{{ jenkins_domain }} (redirects to HTTPS)
      SSL Certificate: /etc/haproxy/ssl/combined.pem (wildcard)
      {% else %}
      HTTP: http://{{ jenkins_domain }}
      {% endif %}
      Stats: http://{{ ansible_default_ipv4.address }}:{{ haproxy_stats_port | default(8404) }}{{ haproxy_stats_uri | default('/stats') }}
      Management: /usr/local/bin/haproxy-container-manager.sh
      
      {% if jenkins_vip is defined and jenkins_vip != "" %}
      🎯 Virtual IP Configuration:
      VIP Address: {{ jenkins_vip }}
      VRRP: Enabled with keepalived
      Priority: {{ keepalived_priority | default(100) }}
      {% endif %}
      
      👥 Team Configuration:
      {% if jenkins_teams is defined and jenkins_teams | length > 0 %}
      {% for team in jenkins_teams %}
      • {{ team.team_name | title }} Team: https://{{ team.team_name }}.{{ jenkins_domain }}
        - Port: {{ team.ports.web | default(8080) }}
        - Blue-Green: {{ team.blue_green_enabled | default(true) }}
        - Active Environment: {{ team.active_environment | default('blue') }}
      {% endfor %}
      {% else %}
      Single team configuration
      {% endif %}
      
      🔍 Health Monitoring:
      Check Interval: {{ haproxy_check_interval | default('5s') }}
      Failure Threshold: {{ haproxy_check_fall | default(3) }}
      Recovery Threshold: {{ haproxy_check_rise | default(2) }}
      
      📊 Access URLs:
      {% if jenkins_teams is defined %}
      {% for team in jenkins_teams %}
      - {{ team.team_name | title }}: https://{{ team.team_name }}.{{ jenkins_domain }}
      {% endfor %}
      {% endif %}
      - HAProxy Stats: http://{{ ansible_default_ipv4.address }}:{{ haproxy_stats_port | default(8404) }}/stats
      - Container Management: /usr/local/bin/haproxy-container-manager.sh status
  tags: ['ha', 'info']