#!/bin/bash
# Jenkins Blue-Green Health Check Script
# Generated by Ansible - Blue-Green Deployment

set -euo pipefail

# Configuration
JENKINS_HOME="{{ jenkins_home_dir }}"
STATE_FILE="$JENKINS_HOME/blue-green/state.json"
LOG_FILE="$JENKINS_HOME/blue-green/logs/health-check.log"
CONTAINER_RUNTIME="{{ jenkins_container_runtime }}"
BLUE_CONTAINER="{{ jenkins_blue_container_name }}"
GREEN_CONTAINER="{{ jenkins_green_container_name }}"
BLUE_PORT="{{ jenkins_blue_port }}"
GREEN_PORT="{{ jenkins_green_port }}"
VIP="{{ jenkins_vip | default(ansible_default_ipv4.address) }}"
JENKINS_PORT="{{ jenkins_master_port }}"
CONTEXT_PATH="{{ jenkins_context_path | default('') }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Health check results
declare -A HEALTH_RESULTS

# Logging function
log() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $message" >> "$LOG_FILE"
}

# Check container status
check_container_status() {
    local container="$1"
    
    if [[ "$CONTAINER_RUNTIME" == "docker" ]]; then
        docker inspect --format='{{ '{{.State.Status}}' }}' "$container" 2>/dev/null || echo "not-found"
    else
        podman inspect --format='{{ '{{.State.Status}}' }}' "$container" 2>/dev/null || echo "not-found"
    fi
}

# Check container health
check_container_health() {
    local container="$1"
    
    if [[ "$CONTAINER_RUNTIME" == "docker" ]]; then
        docker inspect --format='{{ '{{.State.Health.Status}}' }}' "$container" 2>/dev/null || echo "no-healthcheck"
    else
        podman inspect --format='{{ '{{.State.Health.Status}}' }}' "$container" 2>/dev/null || echo "no-healthcheck"
    fi
}

# HTTP health check
check_http_endpoint() {
    local url="$1"
    local timeout="${2:-10}"
    
    curl -sf --max-time "$timeout" "$url" >/dev/null 2>&1
}

# Jenkins API health check
check_jenkins_api() {
    local port="$1"
    local url="http://localhost:${port}${CONTEXT_PATH}/api/json?tree=version,nodeDescription,numExecutors"
    
    local response=$(curl -sf --max-time 10 "$url" 2>/dev/null)
    if [[ $? -eq 0 && -n "$response" ]]; then
        echo "$response" | jq -r '.version // "unknown"' 2>/dev/null || echo "unknown"
        return 0
    fi
    return 1
}

# Check agent port connectivity
check_agent_port() {
    local port="$1"
    
    nc -z localhost "$port" 2>/dev/null
}

# Get current active environment
get_current_environment() {
    if [[ -f "$STATE_FILE" ]]; then
        jq -r '.current_environment // "blue"' "$STATE_FILE" 2>/dev/null || echo "blue"
    else
        echo "blue"
    fi
}

# Check shared storage
check_shared_storage() {
    local storage_path="{{ shared_storage_path | default('/shared/jenkins') }}/shared-home"
    
    if [[ -d "$storage_path" && -r "$storage_path" && -w "$storage_path" ]]; then
        return 0
    fi
    return 1
}

# Comprehensive health check for an environment
check_environment_health() {
    local env="$1"
    local container="$2"
    local port="$3"
    local agent_port="$4"
    
    local results=()
    local overall_status="HEALTHY"
    
    # Container status check
    local container_status=$(check_container_status "$container")
    if [[ "$container_status" == "running" ]]; then
        results+=("Container Status: ${GREEN}RUNNING${NC}")
    else
        results+=("Container Status: ${RED}$container_status${NC}")
        overall_status="UNHEALTHY"
    fi
    
    # Container health check
    local container_health=$(check_container_health "$container")
    if [[ "$container_health" == "healthy" ]]; then
        results+=("Container Health: ${GREEN}HEALTHY${NC}")
    elif [[ "$container_health" == "no-healthcheck" ]]; then
        results+=("Container Health: ${YELLOW}NO HEALTHCHECK${NC}")
    else
        results+=("Container Health: ${RED}$container_health${NC}")
        overall_status="UNHEALTHY"
    fi
    
    # Web interface check
    local web_url="http://localhost:${port}${CONTEXT_PATH}/login"
    if check_http_endpoint "$web_url"; then
        results+=("Web Interface: ${GREEN}ACCESSIBLE${NC}")
    else
        results+=("Web Interface: ${RED}INACCESSIBLE${NC}")
        overall_status="UNHEALTHY"
    fi
    
    # API check
    local api_version=$(check_jenkins_api "$port")
    if [[ "$api_version" != "unknown" ]]; then
        results+=("Jenkins API: ${GREEN}RESPONDING${NC} (v$api_version)")
    else
        results+=("Jenkins API: ${RED}NOT RESPONDING${NC}")
        overall_status="UNHEALTHY"
    fi
    
    # Agent port check
    if check_agent_port "$agent_port"; then
        results+=("Agent Port: ${GREEN}ACCESSIBLE${NC} ($agent_port)")
    else
        results+=("Agent Port: ${RED}INACCESSIBLE${NC} ($agent_port)")
        overall_status="UNHEALTHY"
    fi
    
    # Store results
    HEALTH_RESULTS["${env}_status"]="$overall_status"
    HEALTH_RESULTS["${env}_details"]="${results[*]}"
    
    return $([ "$overall_status" = "HEALTHY" ] && echo 0 || echo 1)
}

# Check load balancer health
check_load_balancer_health() {
    local lb_url="http://${VIP}:${JENKINS_PORT}${CONTEXT_PATH}/login"
    
    if check_http_endpoint "$lb_url"; then
        HEALTH_RESULTS["lb_status"]="HEALTHY"
        HEALTH_RESULTS["lb_details"]="Load Balancer: ${GREEN}ACCESSIBLE${NC} ($lb_url)"
        return 0
    else
        HEALTH_RESULTS["lb_status"]="UNHEALTHY"
        HEALTH_RESULTS["lb_details"]="Load Balancer: ${RED}INACCESSIBLE${NC} ($lb_url)"
        return 1
    fi
}

# Check shared storage health
check_shared_storage_health() {
    if check_shared_storage; then
        HEALTH_RESULTS["storage_status"]="HEALTHY"
        HEALTH_RESULTS["storage_details"]="Shared Storage: ${GREEN}ACCESSIBLE${NC}"
        return 0
    else
        HEALTH_RESULTS["storage_status"]="UNHEALTHY"
        HEALTH_RESULTS["storage_details"]="Shared Storage: ${RED}INACCESSIBLE${NC}"
        return 1
    fi
}

# Generate health check report
generate_health_report() {
    local current_env=$(get_current_environment)
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Create JSON report
    local json_report=$(cat << EOF
{
  "timestamp": "$timestamp",
  "current_environment": "$current_env",
  "environments": {
    "blue": {
      "status": "${HEALTH_RESULTS[blue_status]}",
      "container": "$BLUE_CONTAINER",
      "port": $BLUE_PORT,
      "agent_port": $((BLUE_PORT + 42000))
    },
    "green": {
      "status": "${HEALTH_RESULTS[green_status]}",
      "container": "$GREEN_CONTAINER",
      "port": $GREEN_PORT,
      "agent_port": $((GREEN_PORT + 42000))
    }
  },
  "load_balancer": {
    "status": "${HEALTH_RESULTS[lb_status]}",
    "url": "http://${VIP}:${JENKINS_PORT}${CONTEXT_PATH}",
    "active_environment": "$current_env"
  },
  "shared_storage": {
    "status": "${HEALTH_RESULTS[storage_status]}",
    "path": "{{ shared_storage_path | default('/shared/jenkins') }}/shared-home"
  },
  "overall_health": {
    "blue_green_ready": $([ "${HEALTH_RESULTS[blue_status]}" = "HEALTHY" ] && [ "${HEALTH_RESULTS[green_status]}" = "HEALTHY" ] && echo "true" || echo "false"),
    "active_environment_healthy": $([ "${HEALTH_RESULTS[${current_env}_status]}" = "HEALTHY" ] && echo "true" || echo "false"),
    "deployment_safe": $([ "${HEALTH_RESULTS[blue_status]}" = "HEALTHY" ] && [ "${HEALTH_RESULTS[green_status]}" = "HEALTHY" ] && [ "${HEALTH_RESULTS[lb_status]}" = "HEALTHY" ] && echo "true" || echo "false")
  }
}
EOF
)
    
    # Save JSON report
    echo "$json_report" > "$JENKINS_HOME/blue-green/logs/health-check-$(date +%s).json"
    
    echo "$json_report"
}

# Display detailed health report
show_detailed_report() {
    local current_env=$(get_current_environment)
    
    echo -e "${CYAN}=== Jenkins Blue-Green Comprehensive Health Check ===${NC}"
    echo ""
    echo -e "Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
    echo -e "Current Active Environment: ${BLUE}${current_env^^}${NC}"
    echo ""
    
    # Blue environment
    echo -e "${BLUE}BLUE Environment ($BLUE_CONTAINER):${NC}"
    echo -e "  Overall Status: $([ "${HEALTH_RESULTS[blue_status]}" = "HEALTHY" ] && echo -e "${GREEN}HEALTHY${NC}" || echo -e "${RED}UNHEALTHY${NC}")"
    echo -e "  Port: $BLUE_PORT"
    echo -e "  Agent Port: $((BLUE_PORT + 42000))"
    IFS=' ' read -ra details <<< "${HEALTH_RESULTS[blue_details]}"
    for detail in "${details[@]}"; do
        echo -e "  $detail"
    done
    echo ""
    
    # Green environment
    echo -e "${GREEN}GREEN Environment ($GREEN_CONTAINER):${NC}"
    echo -e "  Overall Status: $([ "${HEALTH_RESULTS[green_status]}" = "HEALTHY" ] && echo -e "${GREEN}HEALTHY${NC}" || echo -e "${RED}UNHEALTHY${NC}")"
    echo -e "  Port: $GREEN_PORT"
    echo -e "  Agent Port: $((GREEN_PORT + 42000))"
    IFS=' ' read -ra details <<< "${HEALTH_RESULTS[green_details]}"
    for detail in "${details[@]}"; do
        echo -e "  $detail"
    done
    echo ""
    
    # Load balancer
    echo -e "${YELLOW}Load Balancer:${NC}"
    echo -e "  ${HEALTH_RESULTS[lb_details]}"
    echo -e "  Active Environment: ${current_env^^}"
    echo ""
    
    # Shared storage
    echo -e "${CYAN}Shared Storage:${NC}"
    echo -e "  ${HEALTH_RESULTS[storage_details]}"
    echo ""
    
    # Overall assessment
    echo -e "${YELLOW}Overall Assessment:${NC}"
    local blue_green_ready=$([ "${HEALTH_RESULTS[blue_status]}" = "HEALTHY" ] && [ "${HEALTH_RESULTS[green_status]}" = "HEALTHY" ] && echo "YES" || echo "NO")
    local active_healthy=$([ "${HEALTH_RESULTS[${current_env}_status]}" = "HEALTHY" ] && echo "YES" || echo "NO")
    local deployment_safe=$([ "${HEALTH_RESULTS[blue_status]}" = "HEALTHY" ] && [ "${HEALTH_RESULTS[green_status]}" = "HEALTHY" ] && [ "${HEALTH_RESULTS[lb_status]}" = "HEALTHY" ] && echo "YES" || echo "NO")
    
    echo -e "  Blue-Green Ready: $([ "$blue_green_ready" = "YES" ] && echo -e "${GREEN}$blue_green_ready${NC}" || echo -e "${RED}$blue_green_ready${NC}")"
    echo -e "  Active Environment Healthy: $([ "$active_healthy" = "YES" ] && echo -e "${GREEN}$active_healthy${NC}" || echo -e "${RED}$active_healthy${NC}")"
    echo -e "  Safe for Deployment: $([ "$deployment_safe" = "YES" ] && echo -e "${GREEN}$deployment_safe${NC}" || echo -e "${RED}$deployment_safe${NC}")"
}

# Quick health check summary
show_quick_summary() {
    local current_env=$(get_current_environment)
    
    echo -e "${CYAN}=== Quick Health Summary ===${NC}"
    echo -e "Active: ${current_env^^} | Blue: $([ "${HEALTH_RESULTS[blue_status]}" = "HEALTHY" ] && echo -e "${GREEN}✓${NC}" || echo -e "${RED}✗${NC}") | Green: $([ "${HEALTH_RESULTS[green_status]}" = "HEALTHY" ] && echo -e "${GREEN}✓${NC}" || echo -e "${RED}✗${NC}") | LB: $([ "${HEALTH_RESULTS[lb_status]}" = "HEALTHY" ] && echo -e "${GREEN}✓${NC}" || echo -e "${RED}✗${NC}") | Storage: $([ "${HEALTH_RESULTS[storage_status]}" = "HEALTHY" ] && echo -e "${GREEN}✓${NC}" || echo -e "${RED}✗${NC}")"
}

# Main health check function
run_health_check() {
    local mode="${1:-detailed}"
    
    # Check blue environment
    check_environment_health "blue" "$BLUE_CONTAINER" "$BLUE_PORT" "$((BLUE_PORT + 42000))"
    
    # Check green environment
    check_environment_health "green" "$GREEN_CONTAINER" "$GREEN_PORT" "$((GREEN_PORT + 42000))"
    
    # Check load balancer
    check_load_balancer_health
    
    # Check shared storage
    check_shared_storage_health
    
    # Log summary
    local current_env=$(get_current_environment)
    log "Health Check: Active=$current_env | Blue=${HEALTH_RESULTS[blue_status]} | Green=${HEALTH_RESULTS[green_status]} | LB=${HEALTH_RESULTS[lb_status]} | Storage=${HEALTH_RESULTS[storage_status]}"
    
    # Generate and save report
    generate_health_report > /dev/null
    
    # Display results based on mode
    case "$mode" in
        quick|summary)
            show_quick_summary
            ;;
        detailed|full|*)
            show_detailed_report
            ;;
    esac
    
    # Return overall status
    local overall_healthy=$([ "${HEALTH_RESULTS[blue_status]}" = "HEALTHY" ] && [ "${HEALTH_RESULTS[green_status]}" = "HEALTHY" ] && [ "${HEALTH_RESULTS[lb_status]}" = "HEALTHY" ] && [ "${HEALTH_RESULTS[storage_status]}" = "HEALTHY" ] && echo 0 || echo 1)
    return $overall_healthy
}

# Usage function
usage() {
    echo "Usage: $0 [quick|detailed]"
    echo ""
    echo "Options:"
    echo "  quick     - Show quick health summary"
    echo "  detailed  - Show detailed health report (default)"
    echo ""
    echo "Examples:"
    echo "  $0                     # Detailed health check"
    echo "  $0 detailed            # Detailed health check"
    echo "  $0 quick               # Quick summary"
}

# Main script logic
main() {
    case "${1:-detailed}" in
        quick|summary)
            run_health_check "quick"
            ;;
        detailed|full)
            run_health_check "detailed"
            ;;
        help|--help|-h)
            usage
            ;;
        *)
            run_health_check "detailed"
            ;;
    esac
}

# Create log directory if it doesn't exist
mkdir -p "$(dirname "$LOG_FILE")"

# Run main function
main "$@"