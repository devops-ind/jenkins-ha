# HAProxy Configuration for Jenkins {{ item.name }} Team - Blue-Green Deployment
# Generated by Ansible for {{ ansible_hostname }}

# Global configuration
global
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # SSL/TLS configuration
    {% if jenkins_ssl_enabled | default(false) %}
    ssl-default-bind-ciphers ECDHE+RSA+AES128+GCM+SHA256:ECDHE+RSA+AES128+SHA256:ECDHE+RSA+AES256+SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE+RSA+AES128+GCM+SHA256:ECDHE+RSA+AES128+SHA256:ECDHE+RSA+AES256+SHA384
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets
    {% endif %}

# Default configuration
defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor except 127.0.0.0/8
    option redispatch
    
    # Timeouts
    timeout connect 10s
    timeout client 60s
    timeout server 60s
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s
    
    # Error pages
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics interface
listen stats
    bind *:8404
    mode http
    stats enable
    stats hide-version
    stats realm HAProxy\ Statistics
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    
    # Restrict access to local network
    acl local_network src 127.0.0.1 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
    http-request deny unless local_network

# Blue environment backend for {{ item.name }}
backend jenkins_{{ item.name }}_blue
    mode http
    balance roundrobin
    option httpchk GET /login HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Server definition
    server jenkins-{{ item.name }}-blue 127.0.0.1:{{ item.port }} check inter 30s fastinter 5s downinter 5s rise 2 fall 3
    
    # Request/response modifications
    http-request add-header X-Jenkins-Team "{{ item.name }}"
    http-request add-header X-Jenkins-Environment "blue"
    http-response add-header X-Jenkins-Team "{{ item.name }}"
    http-response add-header X-Jenkins-Environment "blue"

# Green environment backend for {{ item.name }}
backend jenkins_{{ item.name }}_green
    mode http
    balance roundrobin
    option httpchk GET /login HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Server definition (uses internal port when inactive)
    {% if item.active_environment == 'green' %}
    server jenkins-{{ item.name }}-green 127.0.0.1:{{ item.port }} check inter 30s fastinter 5s downinter 5s rise 2 fall 3
    {% else %}
    server jenkins-{{ item.name }}-green 127.0.0.1:8080 check inter 30s fastinter 5s downinter 5s rise 2 fall 3 backup
    {% endif %}
    
    # Request/response modifications
    http-request add-header X-Jenkins-Team "{{ item.name }}"
    http-request add-header X-Jenkins-Environment "green"
    http-response add-header X-Jenkins-Team "{{ item.name }}"
    http-response add-header X-Jenkins-Environment "green"

# Active backend (points to current active environment)
backend jenkins_{{ item.name }}_active
    mode http
    {% if item.active_environment == 'blue' %}
    # Blue is active
    server jenkins-{{ item.name }}-active 127.0.0.1:{{ item.port }} check inter 10s fastinter 2s downinter 2s rise 2 fall 2
    {% else %}
    # Green is active
    server jenkins-{{ item.name }}-active 127.0.0.1:{{ item.port }} check inter 10s fastinter 2s downinter 2s rise 2 fall 2
    {% endif %}
    
    # Jenkins-specific settings
    option httpchk GET /api/json HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200,403
    
    # Request modifications for Jenkins
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    http-request add-header X-Forwarded-Proto http if !{ ssl_fc }
    http-request add-header X-Jenkins-Team "{{ item.name }}"
    http-request add-header X-Jenkins-Environment "{{ item.active_environment }}"
    
    # Response modifications
    http-response add-header X-Jenkins-Team "{{ item.name }}"
    http-response add-header X-Jenkins-Environment "{{ item.active_environment }}"
    
    # Security headers
    http-response add-header X-Frame-Options SAMEORIGIN
    http-response add-header X-Content-Type-Options nosniff
    http-response add-header X-XSS-Protection "1; mode=block"
    {% if jenkins_ssl_enabled | default(false) %}
    http-response add-header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload"
    {% endif %}

# Main frontend for Jenkins {{ item.name }}
frontend jenkins_{{ item.name }}_frontend
    bind *:{{ item.port }}
    {% if jenkins_ssl_enabled | default(false) %}
    bind *:{{ item.port | int + 443 }} ssl crt {{ jenkins_ssl_cert_path | default('/etc/ssl/certs/jenkins.pem') }}
    {% endif %}
    
    mode http
    option httplog
    
    # Capture custom headers for logging
    capture request header User-Agent len 64
    capture request header X-Forwarded-For len 64
    
    # ACLs for different request types
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_jenkins_cli path_beg /cli
    acl is_jenkins_agent path_beg /computer/
    acl is_static_resource path_end .css .js .png .jpg .jpeg .gif .ico .svg .woff .woff2
    acl is_blue_green_api path_beg /blue-green/
    acl is_health_check path_beg /health/
    
    # Security ACLs
    acl local_network src 127.0.0.1 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
    acl admin_network src {{ admin_network_cidr | default('127.0.0.1/32') }}
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # Blue-green API access control
    http-request deny if is_blue_green_api !admin_network
    
    # Health check endpoints (internal)
    use_backend jenkins_{{ item.name }}_blue if is_health_check path_reg ^/health/{{ item.name }}/blue
    use_backend jenkins_{{ item.name }}_green if is_health_check path_reg ^/health/{{ item.name }}/green
    
    # Blue-green switching logic (handled by external script)
    http-request return status 200 content-type "text/plain" string "Switching {{ item.name }} to blue" if { path /blue-green/switch/blue } admin_network
    http-request return status 200 content-type "text/plain" string "Switching {{ item.name }} to green" if { path /blue-green/switch/green } admin_network
    http-request return status 200 content-type "text/plain" string "{{ item.name }} active: {{ item.active_environment }}" if { path /blue-green/status } local_network
    
    {% if jenkins_ssl_enabled | default(false) %}
    # HTTPS redirect
    redirect scheme https code 301 if !{ ssl_fc } !is_health_check !is_blue_green_api
    {% endif %}
    
    # Default backend
    default_backend jenkins_{{ item.name }}_active

# Agent connection frontend (JNLP port)
frontend jenkins_{{ item.name }}_agent_frontend  
    bind *:{{ item.agent_port }}
    mode tcp
    option tcplog
    
    # Simple TCP load balancing to active environment
    default_backend jenkins_{{ item.name }}_agent_backend

# Agent connection backend
backend jenkins_{{ item.name }}_agent_backend
    mode tcp
    balance source
    
    {% if item.active_environment == 'blue' %}
    server jenkins-{{ item.name }}-agent 127.0.0.1:{{ item.agent_port }} check
    {% else %}
    server jenkins-{{ item.name }}-agent 127.0.0.1:{{ item.agent_port }} check
    {% endif %}