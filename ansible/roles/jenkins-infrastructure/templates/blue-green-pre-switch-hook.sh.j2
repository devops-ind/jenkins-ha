#!/bin/bash
# Jenkins Blue-Green Pre-Switch Hook
# Executed before environment switching
# Generated by Ansible

set -euo pipefail

# Source configuration
JENKINS_HOME="{{ jenkins_home_dir }}"
source "$JENKINS_HOME/blue-green/scripts/config.sh"

# Pre-switch hook execution
echo "=== Jenkins Blue-Green Pre-Switch Hook ==="
echo "Timestamp: $(date -Iseconds)"
echo "Current Environment: ${1:-unknown}"
echo "Target Environment: ${2:-unknown}"
echo ""

# Example pre-switch checks and operations
# Customize this section based on your requirements

# 1. Check Jenkins queue
echo "Checking Jenkins build queue..."
current_env="${1:-blue}"
if [[ "$current_env" == "blue" ]]; then
    queue_url="http://localhost:$JENKINS_BLUE_PORT$JENKINS_CONTEXT_PATH/queue/api/json"
else
    queue_url="http://localhost:$JENKINS_GREEN_PORT$JENKINS_CONTEXT_PATH/queue/api/json"
fi

queue_size=$(curl -sf "$queue_url" | jq '.items | length' 2>/dev/null || echo "0")
if [[ "$queue_size" -gt 5 ]]; then
    log_warning "Large build queue detected: $queue_size items"
    log_warning "Consider waiting for queue to process before switching"
fi

# 2. Check running builds
echo "Checking for running builds..."
builds_url="http://localhost:$JENKINS_BLUE_PORT$JENKINS_CONTEXT_PATH/computer/api/json"
if [[ "$current_env" != "blue" ]]; then
    builds_url="http://localhost:$JENKINS_GREEN_PORT$JENKINS_CONTEXT_PATH/computer/api/json"
fi

running_builds=$(curl -sf "$builds_url" | jq '[.computer[].executors[] | select(.currentExecutable != null)] | length' 2>/dev/null || echo "0")
if [[ "$running_builds" -gt 0 ]]; then
    log_warning "Running builds detected: $running_builds"
    log_warning "Builds will continue running during switch"
fi

# 3. Verify target environment readiness
echo "Verifying target environment readiness..."
target_env="${2:-green}"
if [[ "$target_env" == "blue" ]]; then
    target_url="http://localhost:$JENKINS_BLUE_PORT$JENKINS_CONTEXT_PATH/login"
else
    target_url="http://localhost:$JENKINS_GREEN_PORT$JENKINS_CONTEXT_PATH/login"
fi

if ! curl -sf "$target_url" >/dev/null; then
    log_error "Target environment is not accessible: $target_url"
    exit 1
fi

# 4. Check disk space
echo "Checking disk space..."
disk_usage=$(df "$JENKINS_SHARED_STORAGE_PATH" | awk 'NR==2 {print $5}' | sed 's/%//')
if [[ "$disk_usage" -gt 85 ]]; then
    log_warning "Disk usage is high: ${disk_usage}%"
    log_warning "Consider cleaning up before proceeding"
fi

# 5. Create pre-switch notification
echo "Creating pre-switch notification..."
cat > "$JENKINS_BG_LOGS_DIR/pre-switch-$(date +%s).log" << EOF
Pre-Switch Hook Execution Report
================================
Timestamp: $(date -Iseconds)
Current Environment: ${1:-unknown}
Target Environment: ${2:-unknown}
Queue Size: $queue_size
Running Builds: $running_builds
Disk Usage: ${disk_usage}%
Target Environment Status: READY

Pre-switch checks completed successfully.
EOF

# 6. Custom notification (example - webhook)
# Uncomment and customize as needed
# if [[ -n "${JENKINS_WEBHOOK_URL:-}" ]]; then
#     curl -X POST "$JENKINS_WEBHOOK_URL" \
#         -H "Content-Type: application/json" \
#         -d "{\"event\":\"pre-switch\",\"current\":\"${1:-unknown}\",\"target\":\"${2:-unknown}\",\"timestamp\":\"$(date -Iseconds)\"}"
# fi

log_success "Pre-switch hook completed successfully"
echo "Queue: $queue_size items | Running: $running_builds builds | Disk: ${disk_usage}%"
echo ""

exit 0