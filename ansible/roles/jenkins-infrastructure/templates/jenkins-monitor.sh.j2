#!/bin/bash

# Jenkins Service Monitoring Script
# Generated by Ansible

set -e

JENKINS_SERVICE="jenkins-master"
JENKINS_URL="http://localhost:{{ jenkins_master_port }}"
LOG_FILE="/var/log/jenkins-monitor.log"
MAX_RESTART_ATTEMPTS=3
RESTART_COUNTER_FILE="/tmp/jenkins-restart-counter"

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Function to send notification (if configured)
send_notification() {
    local message="$1"
    local severity="$2"
    
    {% if slack_webhook_url is defined %}
    # Send Slack notification
    curl -X POST -H 'Content-type: application/json' \
         --data "{\"text\":\"🚨 Jenkins Monitor: $message\"}" \
         "{{ slack_webhook_url }}" > /dev/null 2>&1 || true
    {% endif %}
    
    # Log to system log
    logger -t jenkins-monitor "$severity: $message"
}

# Check if Jenkins is responsive
check_jenkins_health() {
    if curl -s -f --max-time 15 "$JENKINS_URL/login" > /dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Get restart counter
get_restart_counter() {
    if [ -f "$RESTART_COUNTER_FILE" ]; then
        cat "$RESTART_COUNTER_FILE"
    else
        echo "0"
    fi
}

# Set restart counter
set_restart_counter() {
    echo "$1" > "$RESTART_COUNTER_FILE"
}

# Reset restart counter
reset_restart_counter() {
    rm -f "$RESTART_COUNTER_FILE"
}

# Restart Jenkins service
restart_jenkins() {
    local counter
    counter=$(get_restart_counter)
    counter=$((counter + 1))
    
    if [ $counter -gt $MAX_RESTART_ATTEMPTS ]; then
        log_message "❌ Maximum restart attempts ($MAX_RESTART_ATTEMPTS) reached. Manual intervention required."
        send_notification "Jenkins restart failed after $MAX_RESTART_ATTEMPTS attempts. Manual intervention required." "CRITICAL"
        return 1
    fi
    
    log_message "🔄 Attempting to restart Jenkins (attempt $counter/$MAX_RESTART_ATTEMPTS)..."
    set_restart_counter "$counter"
    
    # Restart the service
    if systemctl restart "$JENKINS_SERVICE"; then
        log_message "✅ Jenkins service restarted successfully"
        
        # Wait for Jenkins to be ready
        log_message "⏳ Waiting for Jenkins to be ready..."
        local wait_time=0
        local max_wait=300
        
        while [ $wait_time -lt $max_wait ]; do
            if check_jenkins_health; then
                log_message "✅ Jenkins is responsive after restart"
                reset_restart_counter
                send_notification "Jenkins restarted successfully after $counter attempts" "INFO"
                return 0
            fi
            
            sleep 10
            wait_time=$((wait_time + 10))
            log_message "⏳ Still waiting for Jenkins... (${wait_time}s/${max_wait}s)"
        done
        
        log_message "❌ Jenkins failed to become responsive after restart"
        send_notification "Jenkins restart failed - service not responsive after ${max_wait}s" "CRITICAL"
        return 1
    else
        log_message "❌ Failed to restart Jenkins service"
        send_notification "Failed to restart Jenkins service (attempt $counter)" "CRITICAL"
        return 1
    fi
}

# Main monitoring logic
main() {
    log_message "🔍 Monitoring Jenkins health..."
    
    # Check if systemd service is active
    if ! systemctl is-active --quiet "$JENKINS_SERVICE"; then
        log_message "❌ Jenkins systemd service is not active"
        restart_jenkins
        return
    fi
    
    # Check if Jenkins is responsive
    if check_jenkins_health; then
        log_message "✅ Jenkins is healthy"
        reset_restart_counter
        return 0
    else
        log_message "❌ Jenkins health check failed"
        
        # Try a few more times before restarting
        for i in {1..3}; do
            log_message "🔄 Retry health check ($i/3)..."
            sleep 30
            
            if check_jenkins_health; then
                log_message "✅ Jenkins recovered on retry $i"
                return 0
            fi
        done
        
        log_message "❌ Jenkins still unresponsive after retries"
        restart_jenkins
    fi
}

# Run the monitoring
main "$@"