#!/bin/bash

# Jenkins Jobs Management Script
# Generated by Ansible

set -e

JENKINS_URL="http://localhost:{{ jenkins_master_port }}"
CLI_JAR="{{ jenkins_home_dir }}/jenkins-cli.jar"
JENKINS_USER="{{ jenkins_admin_user }}"
JENKINS_PASS="{{ jenkins_admin_password }}"

usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Options:"
    echo "  --monitor          Monitor infrastructure jobs"
    echo "  --list            List all infrastructure jobs"
    echo "  --status          Show job status"
    echo "  --trigger JOB     Trigger specific job"
    echo "  --help            Show this help"
}

monitor_jobs() {
    echo "üîç Monitoring infrastructure jobs..."
    
    java -jar "$CLI_JAR" -s "$JENKINS_URL" -auth "$JENKINS_USER:$JENKINS_PASS" \
         groovy = << 'EOF'
import jenkins.model.Jenkins

def jenkins = Jenkins.getInstance()
def folder = jenkins.getItem("Infrastructure")

if (folder != null) {
    println "üìã Infrastructure Jobs Status:"
    folder.getItems().each { job ->
        def lastBuild = job.getLastBuild()
        def status = lastBuild ? lastBuild.getResult() : "NEVER_RUN"
        def duration = lastBuild ? lastBuild.getDurationString() : "N/A"
        
        println "  ${job.getName()}: ${status} (${duration})"
        
        if (status == "FAILURE") {
            println "    ‚ùå Last build failed!"
        } else if (status == "UNSTABLE") {
            println "    ‚ö†Ô∏è Last build unstable"
        }
    }
} else {
    println "‚ùå Infrastructure folder not found"
}
EOF
}

list_jobs() {
    echo "üìã Infrastructure jobs:"
    java -jar "$CLI_JAR" -s "$JENKINS_URL" -auth "$JENKINS_USER:$JENKINS_PASS" \
         list-jobs Infrastructure/
}

show_status() {
    echo "üìä Jenkins system status:"
    java -jar "$CLI_JAR" -s "$JENKINS_URL" -auth "$JENKINS_USER:$JENKINS_PASS" \
         groovy = << 'EOF'
import jenkins.model.Jenkins

def jenkins = Jenkins.getInstance()
println "Jenkins version: ${jenkins.getVersion()}"
println "Nodes online: ${jenkins.getNodes().findAll { !it.toComputer().isOffline() }.size()}"
println "Queue length: ${jenkins.getQueue().getItems().length}"
println "Running builds: ${jenkins.getNodes().collect { it.toComputer().getExecutors().findAll { it.isBusy() } }.flatten().size()}"
EOF
}

trigger_job() {
    local job_name="$1"
    echo "üöÄ Triggering job: Infrastructure/$job_name"
    
    java -jar "$CLI_JAR" -s "$JENKINS_URL" -auth "$JENKINS_USER:$JENKINS_PASS" \
         build "Infrastructure/$job_name"
    
    echo "‚úÖ Job triggered successfully"
}

# Main script logic
case "${1:-}" in
    --monitor)
        monitor_jobs
        ;;
    --list)
        list_jobs
        ;;
    --status)
        show_status
        ;;
    --trigger)
        if [ -z "$2" ]; then
            echo "‚ùå Error: Job name required"
            usage
            exit 1
        fi
        trigger_job "$2"
        ;;
    --help|*)
        usage
        ;;
esac