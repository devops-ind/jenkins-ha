---
# Jenkins Configuration as Code (JCasC) - Job Definitions
# This file defines all Jenkins jobs using JCasC format

jobs:
  # Infrastructure folder for all infrastructure-related jobs
  - script: >
      folder('Infrastructure') {
        displayName('Infrastructure Management')
        description('Jobs for managing Jenkins infrastructure, deployments, and maintenance')
      }

  # NOTE: Pipeline jobs are defined in their respective Jenkinsfile.* scripts in pipelines/ directory
  # The Job DSL Seed job below will create these jobs from the jenkins-dsl/ scripts directory

  # Job DSL Seed Job - Single Unified Job for All DSL Operations
  - script: |
      pipelineJob('Infrastructure/Job-DSL-Seed') {
        displayName('Job DSL Seed Pipeline')
        description('''
          Job DSL Seed Pipeline: Unified Job Generation and Management
          
          This pipeline runs on dynamic python-agent and performs:
          - Job DSL script execution for all job generation
          - Pipeline configuration management
          - Automated job updates and maintenance
          - Repository-based job definitions processing
          
          Agent: Runs on python dynamic agents with Job DSL capabilities
          Labels: python, python-build
          DSL Scripts Location: jenkins-dsl/**/*.groovy
        ''')
        
        properties {
          buildDiscarder {
            strategy {
              logRotator {
                daysToKeepStr('30')
                numToKeepStr('25')
                artifactDaysToKeepStr('14')
                artifactNumToKeepStr('10')
              }
            }
          }
          
          pipelineTriggers {
            triggers {
              scm {
                scmpoll_spec('H/15 * * * *')  // Poll SCM every 15 minutes
              }
            }
          }
          
          parameters {
            choiceParam {
              name('SEED_ACTION')
              description('Type of seed operation to perform')
              choices(['generate-all', 'update-existing', 'dry-run', 'cleanup-orphaned'])
            }
            stringParam {
              name('JOB_PATTERNS')
              description('Job patterns to generate (comma separated, empty for all)')
              defaultValue('')
              trim(true)
            }
            booleanParam {
              name('REMOVE_DISABLED')
              description('Remove disabled jobs during cleanup')
              defaultValue(false)
            }
            booleanParam {
              name('VALIDATE_SCRIPTS')
              description('Validate Job DSL scripts before execution')
              defaultValue(true)
            }
            stringParam {
              name('DSL_SCRIPTS_PATH')
              description('Path to Job DSL scripts in repository')
              defaultValue('jenkins-dsl/**/*.groovy')
              trim(true)
            }
          }
        }
        
        definition {
          cps {
            script('''
              pipeline {
                agent {
                  label 'python'  // Targets dynamic python-agent
                }
                
                options {
                  timeout(time: 30, unit: 'MINUTES')
                  skipStagesAfterUnstable()
                  disableConcurrentBuilds()
                  buildDiscarder(logRotator(daysToKeepStr: '30', numToKeepStr: '25'))
                }
                
                environment {
                  PYTHONPATH = '/home/jenkins/agent'
                  PIP_CACHE_DIR = '/home/jenkins/.cache/pip'
                  JOB_DSL_VERSION = '1.82'
                }
                
                stages {
                  stage('Setup Environment') {
                    steps {
                      script {
                        echo "Running on agent: ${env.NODE_NAME}"
                        echo "Agent labels: ${env.NODE_LABELS}"
                        echo "Workspace: ${env.WORKSPACE}"
                      }
                      
                      // Ensure required tools are available
                      sh '''
                        python3 --version
                        pip3 --version
                        which groovy || echo "Groovy not found - will use Jenkins internal"
                      '''
                    }
                  }
                  
                  stage('Validate DSL Scripts') {
                    when {
                      params.VALIDATE_SCRIPTS == true
                    }
                    steps {
                      script {
                        def dslFiles = findFiles(glob: params.DSL_SCRIPTS_PATH)
                        if (dslFiles.length == 0) {
                          error "No Job DSL scripts found with pattern: ${params.DSL_SCRIPTS_PATH}"
                        }
                        echo "Found ${dslFiles.length} Job DSL scripts to process"
                        
                        // Basic syntax validation
                        dslFiles.each { file ->
                          echo "Validating: ${file.path}"
                          def content = readFile(file.path)
                          if (content.trim().isEmpty()) {
                            error "Empty DSL script found: ${file.path}"
                          }
                        }
                      }
                    }
                  }
                  
                  stage('Execute Job DSL') {
                    steps {
                      script {
                        def action = params.SEED_ACTION
                        def patterns = params.JOB_PATTERNS?.split(',')?.collect { it.trim() }?.findAll { it }
                        
                        echo "Executing seed action: ${action}"
                        if (patterns) {
                          echo "Job patterns: ${patterns.join(', ')}"
                        }
                        
                        // Execute Job DSL with appropriate settings
                        def dslConfig = [
                          targets: params.DSL_SCRIPTS_PATH,
                          removeAction: params.REMOVE_DISABLED ? 'DELETE' : 'IGNORE',
                          removeViewAction: 'DELETE',
                          lookupStrategy: 'SEED_JOB',
                          additionalClasspath: '',
                          additionalParameters: [
                            SEED_ACTION: action,
                            JOB_PATTERNS: params.JOB_PATTERNS,
                            BUILD_NUMBER: env.BUILD_NUMBER ?: 'unknown'
                          ]
                        ]
                        
                        if (action == 'dry-run') {
                          echo "DRY RUN MODE - Would execute Job DSL with config:"
                          dslConfig.each { key, value ->
                            echo "  ${key}: ${value}"
                          }
                        } else {
                          jobDsl(dslConfig)
                        }
                      }
                    }
                  }
                  
                  stage('Post-Process Jobs') {
                    steps {
                      script {
                        // Additional post-processing if needed
                        echo "Seed job execution completed"
                        echo "Generated jobs will appear in Jenkins shortly"
                        
                        // Optional: Trigger health check after job generation
                        if (params.SEED_ACTION in ['generate-all', 'update-existing']) {
                          echo "Consider running health check after job generation"
                        }
                      }
                    }
                  }
                }
                
                post {
                  always {
                    // Archive any generated reports
                    archiveArtifacts(
                      artifacts: '**/job-dsl-*.log, **/seed-*.xml',
                      allowEmptyArchive: true,
                      fingerprint: false
                    )
                  }
                  success {
                    echo "Seed job pipeline completed successfully"
                  }
                  failure {
                    echo "Seed job pipeline failed - check logs for details"
                  }
                  cleanup {
                    // Clean up workspace on python agent
                    cleanWs(
                      cleanWhenAborted: true,
                      cleanWhenFailure: true,
                      cleanWhenNotBuilt: true,
                      cleanWhenSuccess: true,
                      cleanWhenUnstable: true,
                      deleteDirs: true
                    )
                  }
                }
              }
            ''')
            sandbox(true)
          }
        }
      }

  # Views Configuration - Infrastructure Folder Views
  - script: |
      listView('Infrastructure/Python Jobs') {
        displayName('Python Jobs View')
        description('View showing all Python-related jobs and seed jobs')
        jobs {
          name('Infrastructure/Job-DSL-Seed')
          regex('.*[Pp]ython.*')
        }
        columns {
          status()
          weather()
          name()
          lastSuccess()
          lastFailure()
          lastDuration()
          buildButton()
        }
        filterBuildQueue(true)
        filterExecutors(true)
        recurse(false)
      }

  - script: |
      listView('Infrastructure/Seed Jobs') {
        displayName('Seed Jobs View')
        description('View for all seed and job generation jobs')
        jobs {
          name('Infrastructure/Job-DSL-Seed')
          regex('.*[Ss]eed.*')
          regex('.*[Gg]enerat.*')
        }
        columns {
          status()
          weather()
          name()
          lastSuccess()
          lastFailure()
          lastDuration()
          buildButton()
        }
        filterBuildQueue(true)
        filterExecutors(true)
      }

  - script: |
      listView('Infrastructure/Pipeline Jobs') {
        displayName('Pipeline Jobs View')
        description('View showing all infrastructure pipeline jobs')
        jobs {
          name('Infrastructure/Image-Builder')
          name('Infrastructure/Backup-Pipeline')
          name('Infrastructure/Infrastructure-Update')
          name('Infrastructure/Monitoring-Setup')
          name('Infrastructure/Security-Scan')
          name('Infrastructure/Health-Check')
          name('Infrastructure/Job-DSL-Seed')
        }
        columns {
          status()
          weather()
          name()
          lastSuccess()
          lastFailure()
          lastDuration()
          buildButton()
        }
        filterBuildQueue(true)
        filterExecutors(true)
      }

  - script: |
      buildPipelineView('Infrastructure/Build Pipeline View') {
        displayName('Build Pipeline Flow')
        description('Pipeline view showing job dependencies and flow')
        selectedJob('Infrastructure/Job-DSL-Seed')
        numberOfBuilds(5)
        showPipelineParameters(true)
        showPipelineParametersInHeaders(true)
        showPipelineDefinitionHeader(true)
        refreshFrequency(30)
        triggerOnlyLatestJob(true)
        alwaysAllowManualTrigger(true)
      }

  - script: |
      categorizedJobsView('Infrastructure/Categorized View') {
        displayName('Categorized Infrastructure View')
        description('Jobs organized by category and function')
        
        categorizationCriteria {
          regexGroupingRule {
            groupRegex('(.*)-.*')
            namingRule('\\1')
          }
        }
        
        jobFilters {
          regex {
            matchType(MatchType.INCLUDE_MATCHED)
            matchValue('Infrastructure/.*')
          }
        }
        
        columns {
          status()
          weather() 
          categorizedJob()
          lastSuccess()
          lastFailure()
          lastDuration()
          buildButton()
        }
      }