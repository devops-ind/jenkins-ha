---
# Jenkins Configuration as Code (JCasC) - Job Definitions
# This file defines all Jenkins jobs using JCasC format

jobs:
  # Infrastructure folder for all infrastructure-related jobs
  - script: >
      folder('Infrastructure') {
        displayName('Infrastructure Management')
        description('Jobs for managing Jenkins infrastructure, deployments, and maintenance')
      }

  # Image Builder Pipeline Job
  - script: |
      pipelineJob('Infrastructure/Image-Builder') {
        displayName('Jenkins Image Builder Pipeline')
        description('''
          Infrastructure Pipeline: Build and Push Jenkins Images to Harbor Registry

          This pipeline builds all Jenkins infrastructure images including:
          - Jenkins Master with pre-configured plugins and JCasC
          - DIND Agent for Docker operations
          - Maven Agent for Java builds
          - Python Agent for Python builds  
          - Node.js Agent for frontend builds

          Images are pushed to Harbor registry: {{ harbor_registry_url }}/{{ harbor_project }}
        ''')
        
        properties {
          buildDiscarder {
            strategy {
              logRotator {
                daysToKeepStr('30')
                numToKeepStr('20')
                artifactDaysToKeepStr('-1')
                artifactNumToKeepStr('-1')
              }
            }
          }
          
          pipelineTriggers {
            triggers {
              cron {
                spec('H 1 * * 0')  // Weekly on Sunday at 1 AM
              }
            }
          }
          
          parameters {
            booleanParam {
              name('FORCE_REBUILD')
              description('Force rebuild all images without cache')
              defaultValue(false)
            }
            booleanParam {
              name('PUSH_TO_HARBOR')
              description('Push built images to Harbor registry')
              defaultValue(true)
            }
            stringParam {
              name('IMAGE_TAG')
              description('Tag for built images (default: build number)')
              defaultValue('${BUILD_NUMBER}')
              trim(true)
            }
            choiceParam {
              name('IMAGES_TO_BUILD')
              description('Select which images to build')
              choices(['all', 'master', 'dind-agent', 'maven-agent', 'python-agent', 'nodejs-agent'])
            }
          }
        }
        
        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url('{{ jenkins_infrastructure_repo_url }}')
                  credentials('{{ git_credentials_id }}')
                }
                branch('*/main')
              }
            }
            scriptPath('pipelines/Jenkinsfile.image-builder')
          }
        }
      }

  # Backup Pipeline Job
  - script: |
      pipelineJob('Infrastructure/Backup-Pipeline') {
        displayName('Jenkins Backup Pipeline')
        description('''
          Infrastructure Pipeline: Automated Backup and Recovery System

          This pipeline manages comprehensive backup operations for:
          - Jenkins home directory and job configurations
          - Docker volumes (jenkins_data, shared_workspace, maven-cache, pip-cache)
          - Configuration files (JCasC, systemd services, SSL certificates)
          - Monitoring data (Prometheus metrics, Grafana dashboards)
          - System configurations and secrets

          Backups are stored on shared NFS/CIFS storage: {{ backup_mount_point }}
          Retention policy: {{ backup_daily_retention | default(30) }} daily, {{ backup_weekly_retention | default(12) }} weekly, {{ backup_monthly_retention | default(12) }} monthly
        ''')
        
        properties {
          buildDiscarder {
            strategy {
              logRotator {
                daysToKeepStr('90')
                numToKeepStr('50')
                artifactDaysToKeepStr('-1')
                artifactNumToKeepStr('-1')
              }
            }
          }
          
          pipelineTriggers {
            triggers {
              cron {
                spec('{{ backup_incremental_schedule | default("0 2 * * 1-6") }}')
              }
            }
          }
          
          parameters {
            choiceParam {
              name('BACKUP_TYPE')
              description('Type of backup to perform')
              choices(['incremental', 'full', 'configuration-only', 'volumes-only'])
            }
            booleanParam {
              name('VERIFY_BACKUP')
              description('Verify backup integrity after creation')
              defaultValue(true)
            }
            booleanParam {
              name('CLEANUP_OLD_BACKUPS')
              description('Clean up old backups according to retention policy')
              defaultValue(true)
            }
            stringParam {
              name('CUSTOM_TAG')
              description('Custom tag for backup (optional)')
              defaultValue('')
              trim(true)
            }
            booleanParam {
              name('SEND_NOTIFICATIONS')
              description('Send backup status notifications')
              defaultValue(true)
            }
          }
        }
        
        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url('{{ jenkins_infrastructure_repo_url }}')
                  credentials('{{ git_credentials_id }}')
                }
                branch('*/main')
              }
            }
            scriptPath('pipelines/Jenkinsfile.backup')
          }
        }
      }

  # Infrastructure Update Pipeline Job
  - script: |
      pipelineJob('Infrastructure/Infrastructure-Update') {
        displayName('Infrastructure Update Pipeline')
        description('''
          Infrastructure Pipeline: Update and Maintenance Operations

          This pipeline handles:
          - Rolling updates of Jenkins masters and agents
          - Configuration updates and deployments
          - System maintenance and health checks
          - Service restarts and health validation
          - Plugin updates and compatibility checks
        ''')
        
        properties {
          buildDiscarder {
            strategy {
              logRotator {
                daysToKeepStr('60')
                numToKeepStr('30')
                artifactDaysToKeepStr('-1')
                artifactNumToKeepStr('-1')
              }
            }
          }
          
          parameters {
            stringParam {
              name('IMAGE_TAG')
              description('Image tag to deploy (default: latest)')
              defaultValue('latest')
              trim(true)
            }
            booleanParam {
              name('RESTART_SERVICES')
              description('Restart Jenkins services after update')
              defaultValue(false)
            }
            stringParam {
              name('UPDATE_REASON')
              description('Reason for the update')
              defaultValue('Manual update')
              trim(true)
            }
            choiceParam {
              name('UPDATE_SCOPE')
              description('Scope of the update')
              choices(['all', 'masters-only', 'agents-only', 'configuration-only'])
            }
            booleanParam {
              name('SKIP_HEALTH_CHECKS')
              description('Skip post-update health checks')
              defaultValue(false)
            }
          }
        }
        
        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url('{{ jenkins_infrastructure_repo_url }}')
                  credentials('{{ git_credentials_id }}')
                }
                branch('*/main')
              }
            }
            scriptPath('pipelines/Jenkinsfile.infrastructure-update')
          }
        }
      }

  # Monitoring Pipeline Job
  - script: |
      pipelineJob('Infrastructure/Monitoring-Setup') {
        displayName('Monitoring Stack Setup')
        description('''
          Infrastructure Pipeline: Setup and Configure Monitoring Stack

          This pipeline manages:
          - Prometheus metrics collection setup
          - Grafana dashboards deployment
          - Alerting rules configuration
          - Monitoring stack health checks
          - Performance metrics validation
        ''')
        
        properties {
          buildDiscarder {
            strategy {
              logRotator {
                daysToKeepStr('30')
                numToKeepStr('20')
                artifactDaysToKeepStr('-1')
                artifactNumToKeepStr('-1')
              }
            }
          }
          
          parameters {
            choiceParam {
              name('MONITORING_ACTION')
              description('Monitoring operation to perform')
              choices(['setup', 'update-dashboards', 'update-rules', 'health-check', 'reset'])
            }
            booleanParam {
              name('RESTART_SERVICES')
              description('Restart monitoring services after changes')
              defaultValue(true)
            }
            booleanParam {
              name('VALIDATE_METRICS')
              description('Validate metrics collection after setup')
              defaultValue(true)
            }
          }
        }
        
        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url('{{ jenkins_infrastructure_repo_url }}')
                  credentials('{{ git_credentials_id }}')
                }
                branch('*/main')
              }
            }
            scriptPath('pipelines/Jenkinsfile.monitoring')
          }
        }
      }

  # Security Scan Pipeline Job
  - script: |
      pipelineJob('Infrastructure/Security-Scan') {
        displayName('Security Scan Pipeline')
        description('''
          Infrastructure Pipeline: Security Scanning and Compliance

          This pipeline performs:
          - Container image vulnerability scanning
          - Security compliance checks
          - Configuration security validation
          - Access control auditing
          - Security report generation
        ''')
        
        properties {
          buildDiscarder {
            strategy {
              logRotator {
                daysToKeepStr('90')
                numToKeepStr('40')
                artifactDaysToKeepStr('30')
                artifactNumToKeepStr('10')
              }
            }
          }
          
          pipelineTriggers {
            triggers {
              cron {
                spec('H 3 * * 1')  // Weekly on Monday at 3 AM
              }
            }
          }
          
          parameters {
            choiceParam {
              name('SCAN_TYPE')
              description('Type of security scan to perform')
              choices(['full', 'images-only', 'configs-only', 'compliance-only'])
            }
            booleanParam {
              name('FAIL_ON_HIGH_SEVERITY')
              description('Fail pipeline on high severity vulnerabilities')
              defaultValue(true)
            }
            booleanParam {
              name('GENERATE_REPORTS')
              description('Generate detailed security reports')
              defaultValue(true)
            }
            booleanParam {
              name('SEND_NOTIFICATIONS')
              description('Send security scan notifications')
              defaultValue(true)
            }
          }
        }
        
        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url('{{ jenkins_infrastructure_repo_url }}')
                  credentials('{{ git_credentials_id }}')
                }
                branch('*/main')
              }
            }
            scriptPath('pipelines/Jenkinsfile.security-scan')
          }
        }
      }

  # Health Check Pipeline Job
  - script: |
      pipelineJob('Infrastructure/Health-Check') {
        displayName('Health Check Pipeline')
        description('''
          Infrastructure Pipeline: Comprehensive Health Monitoring

          This pipeline performs:
          - Jenkins master and agent health checks
          - Service availability monitoring
          - Resource utilization checks
          - Network connectivity validation
          - Performance metrics collection
        ''')
        
        properties {
          buildDiscarder {
            strategy {
              logRotator {
                daysToKeepStr('30')
                numToKeepStr('50')
                artifactDaysToKeepStr('-1')
                artifactNumToKeepStr('-1')
              }
            }
          }
          
          pipelineTriggers {
            triggers {
              cron {
                spec('H/15 * * * *')  // Every 15 minutes
              }
            }
          }
          
          parameters {
            choiceParam {
              name('CHECK_SCOPE')
              description('Scope of health checks')
              choices(['all', 'masters-only', 'agents-only', 'services-only', 'network-only'])
            }
            booleanParam {
              name('DETAILED_REPORTING')
              description('Generate detailed health reports')
              defaultValue(false)
            }
            booleanParam {
              name('SEND_ALERTS')
              description('Send alerts for failed health checks')
              defaultValue(true)
            }
          }
        }
        
        definition {
          cpsScm {
            scm {
              git {
                remote {
                  url('{{ jenkins_infrastructure_repo_url }}')
                  credentials('{{ git_credentials_id }}')
                }
                branch('*/main')
              }
            }
            scriptPath('pipelines/Jenkinsfile.health-check')
          }
        }
      }