---
# Jenkins Configuration as Code (JCasC) - Job Definitions
# This file defines all Jenkins jobs using JCasC format

jobs:
  # Infrastructure folder for all infrastructure-related jobs
  - script: >
      folder('Infrastructure') {
        displayName('Infrastructure Management')
        description('Jobs for managing Jenkins infrastructure, deployments, and maintenance')
      }

  # NOTE: Pipeline jobs are defined in their respective Jenkinsfile.* scripts in pipelines/ directory
  # The Job DSL Seed job below will create these jobs from the jenkins-dsl/ scripts directory

  # Job DSL Seed Job - Simple Repository-Based Job Generation
  - script: |
      pipelineJob('Infrastructure/Job-DSL-Seed') {
        displayName('Job DSL Seed Pipeline')
        description('''
          Simple Job DSL Seed Pipeline with Git repository integration.
          
          This pipeline pulls Job DSL scripts from Git and processes them:
          ‚Ä¢ Pulls from specified Git repository and branch
          ‚Ä¢ Processes jenkins-dsl/**/*.groovy files
          ‚Ä¢ Creates/updates jobs, folders, and views
          ‚Ä¢ Supports dry-run mode for testing
          
          Repository structure expected:
          jenkins-dsl/
          ‚îú‚îÄ‚îÄ folders.groovy
          ‚îú‚îÄ‚îÄ views.groovy  
          ‚îú‚îÄ‚îÄ infrastructure/*.groovy
          ‚îî‚îÄ‚îÄ applications/*.groovy
        ''')
        
        parameters {
          stringParam {
            name('GIT_REPOSITORY')
            description('Git repository containing Job DSL scripts')
            defaultValue('https://github.com/your-org/jenkins-ha.git')
            trim(true)
          }
          stringParam {
            name('DSL_BRANCH')
            description('Git branch containing Job DSL scripts')
            defaultValue('main')
            trim(true)
          }
          credentialsParam('GIT_CREDENTIALS') {
            type('com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl')
            description('Git repository credentials')
            defaultValue('git-credentials')
          }
          choiceParam {
            name('REMOVAL_ACTION')
            description('Action for removed jobs/views')
            choices(['IGNORE', 'DELETE', 'DISABLE'])
            defaultValue('IGNORE')
          }
          booleanParam {
            name('DRY_RUN')
            description('Perform dry run without making changes')
            defaultValue(false)
          }
        }
        
        properties {
          buildDiscarder {
            strategy {
              logRotator {
                daysToKeepStr('30')
                numToKeepStr('20')
                artifactDaysToKeepStr('7')
                artifactNumToKeepStr('5')
              }
            }
          }
          
          pipelineTriggers {
            triggers {
              scm {
                scmpoll_spec('H/15 * * * *')
              }
            }
          }
        }
        
        definition {
          cps {
            script('''
pipeline {
    agent any
    
    options {
        timeout(time: 15, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Checkout Repository') {
            steps {
                script {
                    echo "üîÑ Checking out repository: ${params.GIT_REPOSITORY}"
                    echo "üìã Branch: ${params.DSL_BRANCH}"
                    
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${params.DSL_BRANCH}"]],
                        extensions: [[$class: 'CleanBeforeCheckout']],
                        userRemoteConfigs: [[
                            credentialsId: params.GIT_CREDENTIALS,
                            url: params.GIT_REPOSITORY
                        ]]
                    ])
                }
            }
        }
        
        stage('Process Job DSL Scripts') {
            steps {
                script {
                    echo "üöÄ Processing Job DSL scripts"
                    echo "üìã Dry Run: ${params.DRY_RUN}"
                    
                    if (params.DRY_RUN) {
                        echo "üß™ DRY RUN MODE - No actual changes will be made"
                        
                        def dslFiles = findFiles(glob: 'jenkins-dsl/**/*.groovy')
                        echo "üìÅ Found ${dslFiles.length} Job DSL scripts:"
                        dslFiles.each { file ->
                            echo "   ‚Ä¢ ${file.path}"
                        }
                        
                        echo "‚úÖ Dry run completed - review the files that would be processed above"
                        return
                    }
                    
                    try {
                        def result = jobDsl(
                            targets: 'jenkins-dsl/**/*.groovy',
                            removedJobAction: params.REMOVAL_ACTION,
                            removedViewAction: params.REMOVAL_ACTION,
                            lookupStrategy: 'SEED_JOB',
                            sandbox: false
                        )
                        
                        echo "‚úÖ Job DSL processing completed successfully!"
                        echo "üìä Results:"
                        echo "   Jobs - Created: ${result.createdJobs.size()}, Updated: ${result.updatedJobs.size()}, Removed: ${result.removedJobs.size()}"
                        echo "   Views - Created: ${result.createdViews.size()}, Updated: ${result.updatedViews.size()}, Removed: ${result.removedViews.size()}"
                        
                        if (result.createdJobs) {
                            echo "üÜï Created Jobs:"
                            result.createdJobs.each { job -> echo "   ‚Ä¢ ${job.fullName}" }
                        }
                        
                        if (result.createdViews) {
                            echo "üÜï Created Views:"
                            result.createdViews.each { view -> echo "   ‚Ä¢ ${view.name}" }
                        }
                        
                    } catch (Exception e) {
                        echo "‚ùå Job DSL processing failed: ${e.message}"
                        throw e
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo "üéâ Job DSL Seed pipeline completed successfully!"
        }
        
        failure {
            echo "‚ùå Job DSL Seed pipeline failed!"
        }
    }
}
            ''')
            sandbox(false)
          }
        }
      }

  # NOTE: Views are now managed through Job DSL scripts in jenkins-dsl/views.groovy
  # This centralizes view management and eliminates duplication between JCasC and Job DSL