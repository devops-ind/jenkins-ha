#!/bin/bash
# Jenkins Container Security Scanner
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

# Configuration
SCANNER="{{ jenkins_image_scanning.scanner }}"
SCAN_TIMEOUT="{{ jenkins_image_scanning.trivy.scan_timeout }}"
SEVERITY_LEVELS="{{ jenkins_image_scanning.trivy.severity_levels | join(',') }}"
FAIL_ON_SEVERITY="{{ jenkins_image_scanning.trivy.fail_on_severity }}"
RESULTS_DIR="{{ jenkins_home_dir }}/security-scan-results"
LOG_FILE="/var/log/jenkins/security/scanner.log"
SCHEDULED_MODE=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Error handling
error() {
    echo -e "${RED}ERROR: $1${NC}" | tee -a "$LOG_FILE"
    exit 1
}

# Warning function
warn() {
    echo -e "${YELLOW}WARNING: $1${NC}" | tee -a "$LOG_FILE"
}

# Success function
success() {
    echo -e "${GREEN}SUCCESS: $1${NC}" | tee -a "$LOG_FILE"
}

# Info function
info() {
    echo -e "${BLUE}INFO: $1${NC}" | tee -a "$LOG_FILE"
}

# Check if running in scheduled mode
if [[ "${1:-}" == "--scheduled" ]]; then
    SCHEDULED_MODE=true
    shift
fi

# Ensure results directory exists
mkdir -p "$RESULTS_DIR"
mkdir -p "$(dirname "$LOG_FILE")"

# Function to scan image with Trivy
scan_with_trivy() {
    local image="$1"
    local output_file="$2"
    
    info "Scanning image: $image"
    
    # Create scan command based on configuration
    local cmd="trivy image"
    cmd+=" --timeout $SCAN_TIMEOUT"
    cmd+=" --severity $SEVERITY_LEVELS"
    cmd+=" --format json"
    cmd+=" --output $output_file"
    
{% if jenkins_image_scanning.trivy.ignore_unfixed %}
    cmd+=" --ignore-unfixed"
{% endif %}

    # Execute scan
    if timeout "${SCAN_TIMEOUT}" $cmd "$image" 2>>"$LOG_FILE"; then
        success "Scan completed for $image"
        return 0
    else
        error "Scan failed for $image"
        return 1
    fi
}

# Function to analyze scan results
analyze_scan_results() {
    local results_file="$1"
    local image="$2"
    
    if [[ ! -f "$results_file" ]]; then
        error "Results file not found: $results_file"
        return 1
    fi
    
    # Parse JSON results
    local critical_count=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "$results_file" 2>/dev/null || echo "0")
    local high_count=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "$results_file" 2>/dev/null || echo "0")
    local medium_count=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' "$results_file" 2>/dev/null || echo "0")
    local low_count=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' "$results_file" 2>/dev/null || echo "0")
    
    info "Vulnerability summary for $image:"
    info "  Critical: $critical_count"
    info "  High: $high_count"  
    info "  Medium: $medium_count"
    info "  Low: $low_count"
    
    # Check against policies
    local block_deployment=false
    
{% if jenkins_image_scanning.scanning_policies.block_critical %}
    if [[ $critical_count -gt 0 ]]; then
        error "CRITICAL vulnerabilities found ($critical_count) - deployment blocked by policy"
        block_deployment=true
    fi
{% endif %}

{% if jenkins_image_scanning.scanning_policies.max_high_vulns is defined %}
    if [[ $high_count -gt {{ jenkins_image_scanning.scanning_policies.max_high_vulns }} ]]; then
        error "Too many HIGH vulnerabilities ($high_count > {{ jenkins_image_scanning.scanning_policies.max_high_vulns }}) - deployment blocked by policy"
        block_deployment=true
    fi
{% endif %}

{% if jenkins_image_scanning.scanning_policies.max_medium_vulns is defined %}
    if [[ $medium_count -gt {{ jenkins_image_scanning.scanning_policies.max_medium_vulns }} ]]; then
        warn "High number of MEDIUM vulnerabilities ($medium_count > {{ jenkins_image_scanning.scanning_policies.max_medium_vulns }}) - consider remediation"
    fi
{% endif %}

    if [[ "$block_deployment" == "true" ]]; then
        return 1
    fi
    
    return 0
}

# Function to generate SBOM
generate_sbom() {
    local image="$1"
    local sbom_file="$2"
    
{% if jenkins_image_scanning.sbom.enabled %}
    info "Generating SBOM for $image"
    
    local sbom_cmd="trivy image --format {{ jenkins_image_scanning.sbom.format }}"
    sbom_cmd+=" --output $sbom_file"
    sbom_cmd+=" $image"
    
    if $sbom_cmd 2>>"$LOG_FILE"; then
        success "SBOM generated: $sbom_file"
    else
        warn "SBOM generation failed for $image"
    fi
{% else %}
    info "SBOM generation disabled"
{% endif %}
}

# Function to update vulnerability database
update_vuln_db() {
    info "Updating vulnerability database..."
    
    if trivy image --download-db-only --timeout "$SCAN_TIMEOUT" 2>>"$LOG_FILE"; then
        success "Vulnerability database updated"
    else
        warn "Failed to update vulnerability database"
    fi
}

# Function to scan all Jenkins images
scan_all_images() {
    local container_runtime="{{ jenkins_container_runtime }}"
    local images=()
    
    info "Discovering Jenkins-related images..."
    
    case "$container_runtime" in
        "docker")
            mapfile -t images < <(docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "(jenkins|openjdk|maven|python|node)" | head -20)
            ;;
        "podman")
            mapfile -t images < <(podman images --format "{{.Repository}}:{{.Tag}}" | grep -E "(jenkins|openjdk|maven|python|node)" | head -20)
            ;;
        *)
            error "Unsupported container runtime: $container_runtime"
            ;;
    esac
    
    if [[ ${#images[@]} -eq 0 ]]; then
        warn "No Jenkins-related images found"
        return 0
    fi
    
    info "Found ${#images[@]} images to scan"
    
    local failed_scans=0
    local total_scans=0
    
    for image in "${images[@]}"; do
        if [[ -z "$image" || "$image" == "<none>:<none>" ]]; then
            continue
        fi
        
        local safe_image_name=$(echo "$image" | tr '/:' '_')
        local results_file="$RESULTS_DIR/scan-${safe_image_name}-$(date +%Y%m%d-%H%M%S).json"
        local sbom_file="$RESULTS_DIR/sbom-${safe_image_name}-$(date +%Y%m%d-%H%M%S).json"
        
        info "Processing image: $image"
        
        if scan_with_trivy "$image" "$results_file"; then
            if analyze_scan_results "$results_file" "$image"; then
                success "Image passed security scan: $image"
            else
                error "Image failed security policies: $image"
                ((failed_scans++))
            fi
            
            # Generate SBOM
            generate_sbom "$image" "$sbom_file"
        else
            error "Scan failed for image: $image"
            ((failed_scans++))
        fi
        
        ((total_scans++))
    done
    
    # Summary
    info "Scan Summary:"
    info "  Total images scanned: $total_scans"
    info "  Failed scans: $failed_scans"
    info "  Success rate: $(( (total_scans - failed_scans) * 100 / total_scans ))%"
    
    if [[ $failed_scans -gt 0 ]] && [[ "$SCHEDULED_MODE" == "false" ]]; then
        error "$failed_scans image(s) failed security validation"
        return 1
    fi
    
    return 0
}

# Function to generate scan report
generate_report() {
    local report_file="$RESULTS_DIR/security-report-$(date +%Y%m%d-%H%M%S).html"
    
    info "Generating security report: $report_file"
    
    cat > "$report_file" << EOF
<!DOCTYPE html>
<html>
<head>
    <title>Jenkins Container Security Report</title>
    <meta charset="UTF-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: #f5f5f5; padding: 20px; border-radius: 5px; }
        .critical { color: #d32f2f; }
        .high { color: #f57c00; }
        .medium { color: #fbc02d; }
        .low { color: #388e3c; }
        .success { color: #4caf50; }
        table { border-collapse: collapse; width: 100%; margin: 20px 0; }
        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <div class="header">
        <h1>🔒 Jenkins Container Security Report</h1>
        <p><strong>Generated:</strong> $(date)</p>
        <p><strong>Scanner:</strong> $SCANNER</p>
        <p><strong>Scan Mode:</strong> $([ "$SCHEDULED_MODE" == "true" ] && echo "Scheduled" || echo "Manual")</p>
    </div>
    
    <h2>📊 Scan Results</h2>
    <p>Detailed scan results are available in: <code>$RESULTS_DIR</code></p>
    
    <h2>🔍 Security Policies</h2>
    <ul>
        <li>Block Critical Vulnerabilities: {{ jenkins_image_scanning.scanning_policies.block_critical }}</li>
        <li>Max High Vulnerabilities: {{ jenkins_image_scanning.scanning_policies.max_high_vulns | default('Unlimited') }}</li>
        <li>Max Medium Vulnerabilities: {{ jenkins_image_scanning.scanning_policies.max_medium_vulns | default('Unlimited') }}</li>
    </ul>
    
    <h2>📈 Recommendations</h2>
    <ul>
        <li>Update base images regularly</li>
        <li>Apply security patches promptly</li>
        <li>Review and minimize installed packages</li>
        <li>Use distroless or minimal base images where possible</li>
    </ul>
    
    <p><em>For detailed vulnerability information, review the JSON scan results in the results directory.</em></p>
</body>
</html>
EOF

    success "Security report generated: $report_file"
}

# Main execution
main() {
    log "Starting Jenkins security scan..."
    
    # Check prerequisites
    if ! command -v trivy >/dev/null 2>&1; then
        error "Trivy scanner not found. Please install trivy."
    fi
    
    if ! command -v jq >/dev/null 2>&1; then
        error "jq not found. Please install jq for JSON processing."
    fi
    
    # Update vulnerability database if scheduled mode
    if [[ "$SCHEDULED_MODE" == "true" ]]; then
        update_vuln_db
    fi
    
    # Perform scans
    if [[ $# -eq 0 ]]; then
        # Scan all images
        scan_all_images
    else
        # Scan specific image
        local image="$1"
        local safe_image_name=$(echo "$image" | tr '/:' '_')
        local results_file="$RESULTS_DIR/scan-${safe_image_name}-$(date +%Y%m%d-%H%M%S).json"
        local sbom_file="$RESULTS_DIR/sbom-${safe_image_name}-$(date +%Y%m%d-%H%M%S).json"
        
        if scan_with_trivy "$image" "$results_file"; then
            analyze_scan_results "$results_file" "$image"
            generate_sbom "$image" "$sbom_file"
        fi
    fi
    
    # Generate report
    generate_report
    
    success "Jenkins security scan completed"
}

# Trap errors
trap 'error "Script failed at line $LINENO"' ERR

# Execute main function
main "$@"