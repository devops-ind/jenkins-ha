#!/bin/bash
# Jenkins Blue-Green Health Check Script
# Generated by Ansible for {{ ansible_hostname }}

set -euo pipefail

# Configuration
JENKINS_HOME="{{ jenkins_home_dir }}"
CONTAINER_RUNTIME="{{ jenkins_container_runtime }}"
LOG_FILE="${JENKINS_HOME}/logs/health-check.log"

# Ensure log directory exists
mkdir -p "${JENKINS_HOME}/logs"

# Logging function
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*" | tee -a "${LOG_FILE}"
}

# Health check function for a specific environment
check_environment() {
    local team="$1"
    local environment="$2"
    local port="$3"
    local container_name="jenkins-${team}-${environment}"
    
    log "Checking health for ${container_name}"
    
    # Check container status
    local container_status
    if [ "${CONTAINER_RUNTIME}" = "docker" ]; then
        if ! docker ps --format "table {{ '{{.Names}}' }}\t{{ '{{.Status}}' }}" | grep -q "${container_name}.*Up"; then
            log "WARNING: Container ${container_name} is not running"
            return 1
        fi
        container_status=$(docker inspect --format '{{ '{{.State.Status}}' }}' "${container_name}" 2>/dev/null || echo "not_found")
    else
        if ! podman ps --format "table {{ '{{.Names}}' }}\t{{ '{{.Status}}' }}" | grep -q "${container_name}.*Up"; then
            log "WARNING: Container ${container_name} is not running"
            return 1
        fi
        container_status=$(podman inspect --format '{{ '{{.State.Status}}' }}' "${container_name}" 2>/dev/null || echo "not_found")
    fi
    
    if [ "${container_status}" != "running" ]; then
        log "WARNING: Container ${container_name} status: ${container_status}"
        return 1
    fi
    
    # Check HTTP endpoint
    local http_status
    if http_status=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${port}/api/json" 2>/dev/null); then
        if [ "${http_status}" = "200" ] || [ "${http_status}" = "403" ]; then
            log "OK: ${container_name} is healthy (HTTP ${http_status})"
            return 0
        else
            log "WARNING: ${container_name} returned HTTP ${http_status}"
            return 1
        fi
    else
        log "WARNING: ${container_name} HTTP check failed"
        return 1
    fi
}

# Check all environments for a team
check_team() {
    local team="$1"
    local team_port="$2"
    local active_env="$3"
    
    log "=== Checking team: ${team} ==="
    
    local blue_healthy=false
    local green_healthy=false
    
    # Check blue environment
    if check_environment "${team}" "blue" "${team_port}"; then
        blue_healthy=true
    fi
    
    # Check green environment (use internal port for inactive)
    local green_port
    if [ "${active_env}" = "green" ]; then
        green_port="${team_port}"
    else
        green_port="8080"  # Internal port
    fi
    
    if check_environment "${team}" "green" "${green_port}"; then
        green_healthy=true
    fi
    
    # Report status
    log "Team ${team} status:"
    log "  Blue environment: $([ "${blue_healthy}" = "true" ] && echo "HEALTHY" || echo "UNHEALTHY")"
    log "  Green environment: $([ "${green_healthy}" = "true" ] && echo "HEALTHY" || echo "UNHEALTHY")"
    log "  Active environment: ${active_env}"
    
    # Check if active environment is healthy
    if [ "${active_env}" = "blue" ] && [ "${blue_healthy}" = "false" ]; then
        log "CRITICAL: Active environment (blue) for team ${team} is unhealthy!"
        return 1
    elif [ "${active_env}" = "green" ] && [ "${green_healthy}" = "false" ]; then
        log "CRITICAL: Active environment (green) for team ${team} is unhealthy!"
        return 1
    fi
    
    log "Active environment for team ${team} is healthy"
    return 0
}

# Get container metrics
get_container_metrics() {
    local container_name="$1"
    
    if [ "${CONTAINER_RUNTIME}" = "docker" ]; then
        if docker ps --format "table {{ '{{.Names}}' }}" | grep -q "${container_name}"; then
            local stats
            stats=$(docker stats --no-stream --format "table {{ '{{.CPUPerc}}' }}\t{{ '{{.MemUsage}}' }}" "${container_name}" 2>/dev/null | tail -n 1)
            log "  ${container_name}: ${stats}"
        fi
    else
        if podman ps --format "table {{ '{{.Names}}' }}" | grep -q "${container_name}"; then
            local stats
            stats=$(podman stats --no-stream --format "table {{ '{{.CPUPerc}}' }}\t{{ '{{.MemUsage}}' }}" "${container_name}" 2>/dev/null | tail -n 1)
            log "  ${container_name}: ${stats}"
        fi
    fi
}

# Main health check function
main_health_check() {
    log "=== Jenkins Blue-Green Health Check Started ==="
    log "Container Runtime: ${CONTAINER_RUNTIME}"
    
    local overall_status=0
    
    # Check each team
    {% for team in jenkins_teams %}
    if ! check_team "{{ team.name }}" "{{ team.port }}" "{{ team.active_environment }}"; then
        overall_status=1
    fi
    {% endfor %}
    
    # Display container metrics
    log "=== Container Resource Usage ==="
    {% for team in jenkins_teams %}
    get_container_metrics "jenkins-{{ team.name }}-blue"
    get_container_metrics "jenkins-{{ team.name }}-green"
    {% endfor %}
    
    log "=== Health Check Completed ==="
    
    if [ ${overall_status} -eq 0 ]; then
        log "Overall status: ALL SYSTEMS HEALTHY"
    else
        log "Overall status: ISSUES DETECTED"
    fi
    
    return ${overall_status}
}

# Usage function
usage() {
    echo "Usage: $0 [team] [environment]"
    echo ""
    echo "Check all teams and environments:"
    echo "  $0"
    echo ""
    echo "Check specific team:"
    echo "  $0 devops"
    echo ""
    echo "Check specific environment:"
    echo "  $0 devops blue"
    echo ""
    echo "Available teams: {% for team in jenkins_teams %}{{ team.name }}{% if not loop.last %}, {% endif %}{% endfor %}"
}

# Main execution
main() {
    if [ $# -eq 0 ]; then
        # Check all teams
        main_health_check
    elif [ $# -eq 1 ]; then
        # Check specific team
        local team="$1"
        {% for team in jenkins_teams %}
        if [ "${team}" = "{{ team.name }}" ]; then
            check_team "{{ team.name }}" "{{ team.port }}" "{{ team.active_environment }}"
            exit $?
        fi
        {% endfor %}
        log "ERROR: Unknown team '${team}'"
        usage
        exit 1
    elif [ $# -eq 2 ]; then
        # Check specific team and environment
        local team="$1"
        local environment="$2"
        {% for team in jenkins_teams %}
        if [ "${team}" = "{{ team.name }}" ]; then
            check_environment "{{ team.name }}" "${environment}" "{{ team.port }}"
            exit $?
        fi
        {% endfor %}
        log "ERROR: Unknown team '${team}'"
        usage
        exit 1
    else
        usage
        exit 1
    fi
}

# Execute main function with all arguments
main "$@"