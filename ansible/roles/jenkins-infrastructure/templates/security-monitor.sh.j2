#!/bin/bash
# Jenkins Container Security Monitoring Script
# Generated by Ansible - DO NOT EDIT MANUALLY

set -euo pipefail

# Configuration
CONTAINER_RUNTIME="{{ jenkins_container_runtime }}"
LOG_FILE="/var/log/jenkins/security/monitor.log"
ALERT_LOG="/var/log/jenkins/security/alerts.log"
MONITOR_INTERVAL="{{ jenkins_runtime_security.resource_monitoring.cpu_threshold | default(60) }}"
CPU_THRESHOLD="{{ jenkins_runtime_security.resource_monitoring.cpu_threshold }}"
MEMORY_THRESHOLD="{{ jenkins_runtime_security.resource_monitoring.memory_threshold }}"
DISK_THRESHOLD="{{ jenkins_runtime_security.resource_monitoring.disk_threshold }}"

# Ensure log directories exist
mkdir -p "$(dirname "$LOG_FILE")"
mkdir -p "$(dirname "$ALERT_LOG")"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Alert function
alert() {
    local level="$1"
    local message="$2"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $message" | tee -a "$ALERT_LOG"
    
    # Send to syslog for centralized alerting
    logger -t "jenkins-security" -p "user.${level}" "$message"
}

# Function to get Jenkins containers
get_jenkins_containers() {
    case "$CONTAINER_RUNTIME" in
        "docker")
            docker ps --format "{{.Names}}" --filter "label=com.company.service=jenkins"
            ;;
        "podman")
            podman ps --format "{{.Names}}" --filter "label=com.company.service=jenkins"
            ;;
        *)
            echo "Unsupported container runtime: $CONTAINER_RUNTIME" >&2
            return 1
            ;;
    esac
}

# Function to get container stats
get_container_stats() {
    local container="$1"
    
    case "$CONTAINER_RUNTIME" in
        "docker")
            docker stats --no-stream --format "{{.CPUPerc}},{{.MemUsage}},{{.NetIO}},{{.BlockIO}}" "$container"
            ;;
        "podman")
            podman stats --no-stream --format "{{.CPUPerc}},{{.MemUsage}},{{.NetIO}},{{.BlockIO}}" "$container"
            ;;
    esac
}

# Function to check container security compliance
check_security_compliance() {
    local container="$1"
    local issues=0
    
    log "Checking security compliance for $container"
    
    # Check if running as root
    case "$CONTAINER_RUNTIME" in
        "docker")
            local user=$(docker inspect --format='{{.Config.User}}' "$container")
            ;;
        "podman")
            local user=$(podman inspect --format='{{.Config.User}}' "$container")
            ;;
    esac
    
    if [[ -z "$user" || "$user" == "0" || "$user" == "root" ]]; then
        alert "warning" "Container $container is running as root"
        ((issues++))
    fi
    
    # Check for privileged mode
    case "$CONTAINER_RUNTIME" in
        "docker")
            local privileged=$(docker inspect --format='{{.HostConfig.Privileged}}' "$container")
            ;;
        "podman")
            local privileged=$(podman inspect --format='{{.HostConfig.Privileged}}' "$container")
            ;;
    esac
    
    if [[ "$privileged" == "true" ]]; then
        alert "critical" "Container $container is running in privileged mode"
        ((issues++))
    fi
    
    # Check for host network mode
    case "$CONTAINER_RUNTIME" in
        "docker")
            local network_mode=$(docker inspect --format='{{.HostConfig.NetworkMode}}' "$container")
            ;;
        "podman")
            local network_mode=$(podman inspect --format='{{.HostConfig.NetworkMode}}' "$container")
            ;;
    esac
    
    if [[ "$network_mode" == "host" ]]; then
        alert "warning" "Container $container is using host networking"
        ((issues++))
    fi
    
    # Check for read-only root filesystem
    case "$CONTAINER_RUNTIME" in
        "docker")
            local readonly_root=$(docker inspect --format='{{.HostConfig.ReadonlyRootfs}}' "$container")
            ;;
        "podman")
            local readonly_root=$(podman inspect --format='{{.HostConfig.ReadonlyRootfs}}' "$container")
            ;;
    esac
    
    if [[ "$readonly_root" != "true" ]]; then
        alert "info" "Container $container does not have read-only root filesystem"
    fi
    
    return $issues
}

# Function to monitor resource usage
monitor_resources() {
    local container="$1"
    local stats
    
    stats=$(get_container_stats "$container") || return 1
    
    # Parse stats (format: CPU%,MemUsage,NetIO,BlockIO)
    IFS=',' read -ra STATS <<< "$stats"
    local cpu_pct="${STATS[0]%\%}"  # Remove % symbol
    local mem_usage="${STATS[1]}"
    
    # Extract memory percentage
    local mem_used=$(echo "$mem_usage" | cut -d'/' -f1)
    local mem_total=$(echo "$mem_usage" | cut -d'/' -f2)
    
    # Convert memory to MB for calculation
    local mem_used_mb
    local mem_total_mb
    
    if [[ "$mem_used" =~ ([0-9.]+)([KMGT]?)iB ]]; then
        local value="${BASH_REMATCH[1]}"
        local unit="${BASH_REMATCH[2]}"
        case "$unit" in
            "K") mem_used_mb=$(echo "$value / 1024" | bc -l) ;;
            "M") mem_used_mb="$value" ;;
            "G") mem_used_mb=$(echo "$value * 1024" | bc -l) ;;
            "T") mem_used_mb=$(echo "$value * 1024 * 1024" | bc -l) ;;
            *) mem_used_mb="$value" ;;
        esac
    fi
    
    if [[ "$mem_total" =~ ([0-9.]+)([KMGT]?)iB ]]; then
        local value="${BASH_REMATCH[1]}"
        local unit="${BASH_REMATCH[2]}"
        case "$unit" in
            "K") mem_total_mb=$(echo "$value / 1024" | bc -l) ;;
            "M") mem_total_mb="$value" ;;
            "G") mem_total_mb=$(echo "$value * 1024" | bc -l) ;;
            "T") mem_total_mb=$(echo "$value * 1024 * 1024" | bc -l) ;;
            *) mem_total_mb="$value" ;;
        esac
    fi
    
    local mem_pct
    if [[ -n "$mem_used_mb" && -n "$mem_total_mb" && "$mem_total_mb" != "0" ]]; then
        mem_pct=$(echo "scale=1; $mem_used_mb * 100 / $mem_total_mb" | bc -l)
    else
        mem_pct="0"
    fi
    
    log "Container $container - CPU: ${cpu_pct}%, Memory: ${mem_pct}%"
    
    # Check thresholds and alert
    if (( $(echo "$cpu_pct >= $CPU_THRESHOLD" | bc -l) )); then
        alert "warning" "High CPU usage in $container: ${cpu_pct}% (threshold: $CPU_THRESHOLD%)"
    fi
    
    if (( $(echo "$mem_pct >= $MEMORY_THRESHOLD" | bc -l) )); then
        alert "warning" "High memory usage in $container: ${mem_pct}% (threshold: $MEMORY_THRESHOLD%)"
    fi
}

# Function to check disk usage
check_disk_usage() {
    local usage_pct
    
    # Check Jenkins home directory disk usage
    usage_pct=$(df "{{ jenkins_home_dir }}" | awk 'NR==2 {print $5}' | sed 's/%//')
    
    log "Disk usage for Jenkins home: ${usage_pct}%"
    
    if [[ $usage_pct -ge $DISK_THRESHOLD ]]; then
        alert "critical" "High disk usage in Jenkins home directory: ${usage_pct}% (threshold: $DISK_THRESHOLD%)"
    fi
    
    # Check shared workspace disk usage
    if [[ -d "{{ jenkins_shared_workspace }}" ]]; then
        usage_pct=$(df "{{ jenkins_shared_workspace }}" | awk 'NR==2 {print $5}' | sed 's/%//')
        log "Disk usage for shared workspace: ${usage_pct}%"
        
        if [[ $usage_pct -ge $DISK_THRESHOLD ]]; then
            alert "warning" "High disk usage in shared workspace: ${usage_pct}% (threshold: $DISK_THRESHOLD%)"
        fi
    fi
}

# Function to check container health
check_container_health() {
    local container="$1"
    local health_status
    
    case "$CONTAINER_RUNTIME" in
        "docker")
            health_status=$(docker inspect --format='{{.State.Health.Status}}' "$container" 2>/dev/null || echo "unknown")
            ;;
        "podman")
            health_status=$(podman inspect --format='{{.State.Health.Status}}' "$container" 2>/dev/null || echo "unknown")
            ;;
    esac
    
    log "Container $container health status: $health_status"
    
    case "$health_status" in
        "unhealthy")
            alert "critical" "Container $container is unhealthy"
            ;;
        "starting")
            log "Container $container is starting up"
            ;;
        "healthy")
            log "Container $container is healthy"
            ;;
        *)
            alert "warning" "Container $container has unknown health status: $health_status"
            ;;
    esac
}

# Function to scan for security vulnerabilities in running containers
scan_running_containers() {
    log "Scanning running containers for vulnerabilities..."
    
    local containers
    containers=$(get_jenkins_containers)
    
    for container in $containers; do
        # Get image name
        case "$CONTAINER_RUNTIME" in
            "docker")
                local image=$(docker inspect --format='{{.Config.Image}}' "$container")
                ;;
            "podman")
                local image=$(podman inspect --format='{{.Config.Image}}' "$container")
                ;;
        esac
        
        log "Quick vulnerability check for $container (image: $image)"
        
        # Run quick scan (if trivy is available)
        if command -v trivy >/dev/null 2>&1; then
            local scan_result
            scan_result=$(trivy image --severity HIGH,CRITICAL --quiet --format json "$image" 2>/dev/null || echo '{"Results":[]}')
            
            local vuln_count
            vuln_count=$(echo "$scan_result" | jq '[.Results[]?.Vulnerabilities[]?] | length' 2>/dev/null || echo "0")
            
            if [[ $vuln_count -gt 0 ]]; then
                alert "warning" "Container $container has $vuln_count HIGH/CRITICAL vulnerabilities"
            else
                log "Container $container passed vulnerability check"
            fi
        fi
    done
}

# Main monitoring function
main_monitor() {
    log "Starting Jenkins security monitoring"
    
    local containers
    containers=$(get_jenkins_containers)
    
    if [[ -z "$containers" ]]; then
        log "No Jenkins containers found"
        return 0
    fi
    
    log "Monitoring containers: $containers"
    
    # Check each container
    for container in $containers; do
        log "Monitoring container: $container"
        
        # Check if container is running
        case "$CONTAINER_RUNTIME" in
            "docker")
                if ! docker ps -q --filter "name=$container" | grep -q .; then
                    alert "critical" "Container $container is not running"
                    continue
                fi
                ;;
            "podman")
                if ! podman ps -q --filter "name=$container" | grep -q .; then
                    alert "critical" "Container $container is not running"
                    continue
                fi
                ;;
        esac
        
        # Monitor resources
        monitor_resources "$container" || alert "warning" "Failed to get resource stats for $container"
        
        # Check health
        check_container_health "$container"
        
        # Check security compliance
        check_security_compliance "$container" || alert "info" "Security compliance issues found in $container"
    done
    
    # Check disk usage
    check_disk_usage
    
    # Periodic vulnerability scanning (every 6 hours)
    local hour=$(date +%H)
    if [[ $((hour % 6)) -eq 0 ]] && [[ $(date +%M) -lt 10 ]]; then
        scan_running_containers
    fi
    
    log "Security monitoring cycle completed"
}

# Handle different execution modes
case "${1:-monitor}" in
    "monitor")
        main_monitor
        ;;
    "scan")
        scan_running_containers
        ;;
    "compliance")
        containers=$(get_jenkins_containers)
        for container in $containers; do
            check_security_compliance "$container"
        done
        ;;
    "resources")
        containers=$(get_jenkins_containers)
        for container in $containers; do
            monitor_resources "$container"
        done
        ;;
    *)
        echo "Usage: $0 [monitor|scan|compliance|resources]"
        exit 1
        ;;
esac