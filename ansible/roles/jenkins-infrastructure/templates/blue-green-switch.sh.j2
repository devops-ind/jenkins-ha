#!/bin/bash
# Jenkins Blue-Green Environment Switch Script
# Generated by Ansible - Blue-Green Deployment

set -euo pipefail

# Configuration
JENKINS_HOME="{{ jenkins_home_dir }}"
STATE_FILE="$JENKINS_HOME/blue-green/state.json"
LOG_FILE="$JENKINS_HOME/blue-green/logs/switch.log"
CONTAINER_RUNTIME="{{ jenkins_container_runtime }}"
BLUE_CONTAINER="{{ jenkins_blue_container_name }}"
GREEN_CONTAINER="{{ jenkins_green_container_name }}"
BLUE_PORT="{{ jenkins_blue_port }}"
GREEN_PORT="{{ jenkins_green_port }}"
HAPROXY_BACKEND_FILE="{{ jenkins_load_balancer_backend_file }}"
VIP="{{ jenkins_vip | default(ansible_default_ipv4.address) }}"
JENKINS_PORT="{{ jenkins_master_port }}"
HEALTH_CHECK_RETRIES="{{ jenkins_blue_green_health_check_retries }}"
HEALTH_CHECK_DELAY="{{ jenkins_blue_green_health_check_delay }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo -e "[$timestamp] ${level}: $message"
    echo "[$timestamp] ${level}: $message" >> "$LOG_FILE"
}

# Error handling
error_exit() {
    log "${RED}ERROR${NC}" "$1"
    exit 1
}

# Success message
success() {
    log "${GREEN}SUCCESS${NC}" "$1"
}

# Warning message
warning() {
    log "${YELLOW}WARNING${NC}" "$1"
}

# Info message
info() {
    log "${BLUE}INFO${NC}" "$1"
}

# Check if state file exists
check_state_file() {
    if [[ ! -f "$STATE_FILE" ]]; then
        error_exit "Blue-Green state file not found: $STATE_FILE"
    fi
}

# Read current environment from state file
get_current_environment() {
    check_state_file
    jq -r '.current_environment' "$STATE_FILE" 2>/dev/null || echo "blue"
}

# Get target environment
get_target_environment() {
    local current=$(get_current_environment)
    if [[ "$current" == "blue" ]]; then
        echo "green"
    else
        echo "blue"
    fi
}

# Health check function
health_check() {
    local env="$1"
    local port="$2"
    local retries="${3:-$HEALTH_CHECK_RETRIES}"
    local delay="${4:-$HEALTH_CHECK_DELAY}"
    
    info "Performing health check for $env environment (port $port)"
    
    for ((i=1; i<=retries; i++)); do
        if curl -sf "http://localhost:${port}{{ jenkins_context_path | default('') }}/login" >/dev/null; then
            success "$env environment health check passed"
            return 0
        fi
        
        if [[ $i -lt $retries ]]; then
            warning "$env environment health check failed (attempt $i/$retries), retrying in ${delay}s..."
            sleep "$delay"
        fi
    done
    
    error_exit "$env environment health check failed after $retries attempts"
}

# Container status check
check_container_status() {
    local container="$1"
    
    if [[ "$CONTAINER_RUNTIME" == "docker" ]]; then
        docker inspect --format='{{ '{{.State.Status}}' }}' "$container" 2>/dev/null || echo "not-found"
    else
        podman inspect --format='{{ '{{.State.Status}}' }}' "$container" 2>/dev/null || echo "not-found"
    fi
}

# Update load balancer configuration
update_load_balancer() {
    local target_env="$1"
    local target_port="$2"
    local target_container="$3"
    
    info "Updating load balancer configuration for $target_env environment"
    
    # Create temporary backend configuration
    local temp_backend=$(mktemp)
    
    cat > "$temp_backend" << EOF
# Jenkins Blue-Green Load Balancer Backend Configuration
# Auto-generated by blue-green-switch.sh
# Last updated: $(date -Iseconds)

backend jenkins_backend
    balance roundrobin
    option httpchk GET {{ jenkins_context_path | default('') }}/login
    http-check expect status 200
    timeout connect 5s
    timeout server 30s
    timeout check 10s
    retries 3
    option redispatch
    option httplog
    
    # Active environment server - $target_env
    server ${target_env}-active {{ ansible_default_ipv4.address }}:${target_port} check weight 100 cookie ${target_env}
EOF
    
    # Backup existing configuration
    if [[ -f "$HAPROXY_BACKEND_FILE" ]]; then
        cp "$HAPROXY_BACKEND_FILE" "${HAPROXY_BACKEND_FILE}.backup.$(date +%s)"
    fi
    
    # Update backend configuration
    sudo cp "$temp_backend" "$HAPROXY_BACKEND_FILE"
    rm "$temp_backend"
    
    # Reload HAProxy
    info "Reloading HAProxy configuration"
    if command -v systemctl >/dev/null; then
        sudo systemctl reload haproxy
    else
        sudo service haproxy reload
    fi
    
    # Wait for reload
    sleep 5
    
    # Verify load balancer is working
    info "Verifying load balancer routing to $target_env environment"
    for ((i=1; i<=5; i++)); do
        if curl -sf "http://${VIP}:${JENKINS_PORT}{{ jenkins_context_path | default('') }}/login" >/dev/null; then
            success "Load balancer successfully routing to $target_env environment"
            return 0
        fi
        
        if [[ $i -lt 5 ]]; then
            warning "Load balancer verification failed (attempt $i/5), retrying in 10s..."
            sleep 10
        fi
    done
    
    error_exit "Load balancer verification failed after 5 attempts"
}

# Update state file
update_state() {
    local new_current="$1"
    local new_target="$2"
    
    info "Updating blue-green state file"
    
    # Backup current state
    cp "$STATE_FILE" "${STATE_FILE}.backup.$(date +%s)"
    
    # Update state using jq
    jq --arg current "$new_current" \
       --arg target "$new_target" \
       --arg timestamp "$(date -Iseconds)" \
       '.current_environment = $current | .target_environment = $target | .last_deployment = $timestamp' \
       "$STATE_FILE" > "${STATE_FILE}.tmp"
    
    mv "${STATE_FILE}.tmp" "$STATE_FILE"
    
    success "State file updated: current=$new_current, target=$new_target"
}

# Main switch function
switch_environment() {
    local current_env=$(get_current_environment)
    local target_env=$(get_target_environment)
    local current_port target_port current_container target_container
    
    # Set environment variables
    if [[ "$current_env" == "blue" ]]; then
        current_port="$BLUE_PORT"
        target_port="$GREEN_PORT"
        current_container="$BLUE_CONTAINER"
        target_container="$GREEN_CONTAINER"
    else
        current_port="$GREEN_PORT"
        target_port="$BLUE_PORT"
        current_container="$GREEN_CONTAINER"
        target_container="$BLUE_CONTAINER"
    fi
    
    info "Starting blue-green environment switch"
    info "Current environment: $current_env ($current_container:$current_port)"
    info "Target environment: $target_env ($target_container:$target_port)"
    
    # Check current environment status
    local current_status=$(check_container_status "$current_container")
    info "Current environment container status: $current_status"
    
    # Check target environment status
    local target_status=$(check_container_status "$target_container")
    info "Target environment container status: $target_status"
    
    if [[ "$target_status" != "running" ]]; then
        error_exit "Target environment ($target_env) container is not running: $target_status"
    fi
    
    # Perform health check on target environment
    health_check "$target_env" "$target_port"
    
    # Update load balancer configuration
    update_load_balancer "$target_env" "$target_port" "$target_container"
    
    # Update state file
    update_state "$target_env" "$current_env"
    
    success "Environment switch completed successfully!"
    success "Active environment is now: $target_env"
    success "Load balancer URL: http://${VIP}:${JENKINS_PORT}{{ jenkins_context_path | default('') }}"
    success "Direct access URL: http://{{ ansible_default_ipv4.address }}:${target_port}{{ jenkins_context_path | default('') }}"
}

# Status function
show_status() {
    check_state_file
    
    local current_env=$(get_current_environment)
    local target_env=$(get_target_environment)
    
    echo -e "${BLUE}=== Jenkins Blue-Green Deployment Status ===${NC}"
    echo ""
    echo "Current Active Environment: $current_env"
    echo "Next Target Environment: $target_env"
    echo ""
    
    # Blue environment status
    echo -e "${BLUE}BLUE Environment:${NC}"
    echo "  Container: $BLUE_CONTAINER"
    echo "  Port: $BLUE_PORT"
    echo "  Status: $(check_container_status "$BLUE_CONTAINER")"
    echo "  URL: http://{{ ansible_default_ipv4.address }}:${BLUE_PORT}{{ jenkins_context_path | default('') }}"
    echo ""
    
    # Green environment status
    echo -e "${GREEN}GREEN Environment:${NC}"
    echo "  Container: $GREEN_CONTAINER"
    echo "  Port: $GREEN_PORT"
    echo "  Status: $(check_container_status "$GREEN_CONTAINER")"
    echo "  URL: http://{{ ansible_default_ipv4.address }}:${GREEN_PORT}{{ jenkins_context_path | default('') }}"
    echo ""
    
    # Load balancer status
    echo -e "${YELLOW}Load Balancer:${NC}"
    echo "  VIP: $VIP:$JENKINS_PORT"
    echo "  Backend File: $HAPROXY_BACKEND_FILE"
    echo "  Active Environment: $current_env"
    echo ""
    
    # Recent switch history
    if [[ -f "$LOG_FILE" ]]; then
        echo -e "${YELLOW}Recent Switch History:${NC}"
        tail -5 "$LOG_FILE" | grep "SUCCESS.*Switched\|ROLLBACK" || echo "  No recent switches found"
    fi
}

# Health check for both environments
health_check_all() {
    echo -e "${BLUE}=== Jenkins Blue-Green Health Check ===${NC}"
    echo ""
    
    # Check blue environment
    echo -e "${BLUE}Checking BLUE environment...${NC}"
    if curl -sf "http://localhost:${BLUE_PORT}{{ jenkins_context_path | default('') }}/login" >/dev/null; then
        echo -e "  Status: ${GREEN}HEALTHY${NC}"
    else
        echo -e "  Status: ${RED}UNHEALTHY${NC}"
    fi
    
    # Check green environment
    echo -e "${GREEN}Checking GREEN environment...${NC}"
    if curl -sf "http://localhost:${GREEN_PORT}{{ jenkins_context_path | default('') }}/login" >/dev/null; then
        echo -e "  Status: ${GREEN}HEALTHY${NC}"
    else
        echo -e "  Status: ${RED}UNHEALTHY${NC}"
    fi
    
    # Check load balancer
    echo -e "${YELLOW}Checking Load Balancer...${NC}"
    if curl -sf "http://${VIP}:${JENKINS_PORT}{{ jenkins_context_path | default('') }}/login" >/dev/null; then
        echo -e "  Status: ${GREEN}HEALTHY${NC}"
    else
        echo -e "  Status: ${RED}UNHEALTHY${NC}"
    fi
}

# Usage function
usage() {
    echo "Usage: $0 {switch|status|health|help}"
    echo ""
    echo "Commands:"
    echo "  switch  - Switch between blue and green environments"
    echo "  status  - Show current blue-green deployment status"
    echo "  health  - Check health of all environments"
    echo "  help    - Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 switch              # Switch from current to target environment"
    echo "  $0 status              # Show deployment status"
    echo "  $0 health              # Check health of all environments"
}

# Main script logic
main() {
    case "${1:-}" in
        switch)
            switch_environment
            ;;
        status)
            show_status
            ;;
        health)
            health_check_all
            ;;
        help|--help|-h)
            usage
            ;;
        *)
            echo "Error: Invalid command '${1:-}'"
            echo ""
            usage
            exit 1
            ;;
    esac
}

# Create log directory if it doesn't exist
mkdir -p "$(dirname "$LOG_FILE")"

# Run main function
main "$@"