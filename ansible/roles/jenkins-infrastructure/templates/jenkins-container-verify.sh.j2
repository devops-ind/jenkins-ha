#!/bin/bash

# Jenkins Container Verification Script
# Verifies all team containers are operational before systemd service starts
# Generated by Ansible

set -euo pipefail

CONTAINER_RUNTIME="{{ jenkins_container_runtime }}"
LOG_FILE="{{ jenkins_home_dir }}/logs/container-verify.log"

# Function to log messages
log_message() {
    local message="$(date '+%Y-%m-%d %H:%M:%S') - $1"
    echo "$message"
    echo "$message" >> "$LOG_FILE" 2>/dev/null || echo "$message" >> /dev/null
    # Fix log file ownership if we're root
    if [ "$(id -u)" -eq 0 ]; then
        chown {{ jenkins_user }}:{{ jenkins_group }} "$LOG_FILE" 2>/dev/null || true
    fi
}

# Create log directory and set proper ownership
mkdir -p "$(dirname "$LOG_FILE")"
chown {{ jenkins_user }}:{{ jenkins_group }} "$(dirname "$LOG_FILE")" 2>/dev/null || true

log_message "üîç Starting Jenkins container verification..."

# Overall verification status
OVERALL_STATUS=0

# Verify each team's containers
{% for team in jenkins_teams %}
log_message "Verifying team: {{ team.name }}"

# Check active environment container
ACTIVE_CONTAINER="jenkins-{{ team.name }}-{{ team.active_environment }}"

if [ "$CONTAINER_RUNTIME" = "docker" ]; then
    CONTAINER_STATUS=$(docker inspect "$ACTIVE_CONTAINER" --format='{{ '{{.State.Status}}' }}' 2>/dev/null || echo "not_found")
else
    CONTAINER_STATUS=$(podman inspect "$ACTIVE_CONTAINER" --format='{{ '{{.State.Status}}' }}' 2>/dev/null || echo "not_found")
fi

if [ "$CONTAINER_STATUS" = "running" ]; then
    log_message "‚úÖ {{ team.name }} ({{ team.active_environment }}): RUNNING"
    
    # Quick HTTP check
    if curl -s -f --max-time 5 "http://localhost:{{ team.port }}/login" > /dev/null; then
        log_message "‚úÖ {{ team.name }} HTTP: OK"
    else
        log_message "‚ö†Ô∏è  {{ team.name }} HTTP: Not ready yet"
        # Don't fail verification for HTTP - containers might still be starting
    fi
else
    log_message "‚ùå {{ team.name }} ({{ team.active_environment }}): $CONTAINER_STATUS"
    OVERALL_STATUS=1
fi

{% endfor %}

# Check container runtime connectivity
if [ "$CONTAINER_RUNTIME" = "docker" ]; then
    if docker info > /dev/null 2>&1; then
        log_message "‚úÖ Docker runtime: OK"
    else
        log_message "‚ùå Docker runtime: FAILED"
        OVERALL_STATUS=1
    fi
else
    if podman info > /dev/null 2>&1; then
        log_message "‚úÖ Podman runtime: OK"
    else
        log_message "‚ùå Podman runtime: FAILED"
        OVERALL_STATUS=1
    fi
fi

# Check network
if [ "$CONTAINER_RUNTIME" = "docker" ]; then
    if docker network inspect {{ jenkins_network_name }} > /dev/null 2>&1; then
        log_message "‚úÖ Jenkins network: OK"
    else
        log_message "‚ùå Jenkins network: MISSING"
        OVERALL_STATUS=1
    fi
else
    if podman network inspect {{ jenkins_network_name }} > /dev/null 2>&1; then
        log_message "‚úÖ Jenkins network: OK"
    else
        log_message "‚ùå Jenkins network: MISSING"
        OVERALL_STATUS=1
    fi
fi

# Final result
if [ $OVERALL_STATUS -eq 0 ]; then
    log_message "‚úÖ All Jenkins containers verified successfully"
    echo "VERIFICATION_SUCCESS"
else
    log_message "‚ùå Jenkins container verification FAILED"
    echo "VERIFICATION_FAILED"
fi

exit $OVERALL_STATUS