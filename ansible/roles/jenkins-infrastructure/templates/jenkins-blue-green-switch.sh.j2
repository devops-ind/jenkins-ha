#!/bin/bash
# Jenkins Blue-Green Environment Switching Script
# Generated by Ansible for {{ ansible_hostname }}

set -euo pipefail

# Configuration
JENKINS_HOME="{{ jenkins_home_dir }}"
CONTAINER_RUNTIME="{{ jenkins_container_runtime }}"
NETWORK_NAME="{{ jenkins_network_name }}"
LOG_FILE="${JENKINS_HOME}/logs/blue-green-switch.log"

# Ensure log directory exists
mkdir -p "${JENKINS_HOME}/logs"

# Logging function
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*" | tee -a "${LOG_FILE}"
}

# Health check function
health_check() {
    local team="$1"
    local environment="$2"
    local port="$3"
    local max_attempts=30
    local attempt=1
    
    log "Performing health check for jenkins-${team}-${environment}"
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f -s "http://localhost:${port}/login" > /dev/null 2>&1; then
            log "Health check passed for jenkins-${team}-${environment}"
            return 0
        fi
        log "Health check attempt ${attempt}/${max_attempts} failed for jenkins-${team}-${environment}"
        sleep 10
        ((attempt++))
    done
    
    log "Health check failed for jenkins-${team}-${environment} after ${max_attempts} attempts"
    return 1
}

# Container control functions
start_container() {
    local container_name="$1"
    local team="$2"
    local port="$3"
    local agent_port="$4"
    
    log "Starting container: ${container_name}"
    
    if [ "${CONTAINER_RUNTIME}" = "docker" ]; then
        # Update port mappings for active environment
        docker container update --publish-rm "${port}:8080" "${container_name}" 2>/dev/null || true
        docker container update --publish-rm "${agent_port}:50000" "${container_name}" 2>/dev/null || true
        docker container update --publish-add "${port}:8080" "${container_name}"
        docker container update --publish-add "${agent_port}:50000" "${container_name}"
        docker start "${container_name}"
        
        # Update labels
        docker container update --label active=true "${container_name}"
    else
        # Podman approach - stop/start with new port mapping
        podman stop "${container_name}" 2>/dev/null || true
        podman start "${container_name}"
        
        # Add port mapping
        podman port "${container_name}" "${port}:8080" 2>/dev/null || true
        podman port "${container_name}" "${agent_port}:50000" 2>/dev/null || true
    fi
    
    log "Container ${container_name} started successfully"
}

stop_container() {
    local container_name="$1"
    local port="$2"
    local agent_port="$3"
    
    log "Stopping container: ${container_name}"
    
    if [ "${CONTAINER_RUNTIME}" = "docker" ]; then
        # Remove port mappings
        docker container update --publish-rm "${port}:8080" "${container_name}" 2>/dev/null || true
        docker container update --publish-rm "${agent_port}:50000" "${container_name}" 2>/dev/null || true
        docker stop "${container_name}"
        
        # Update labels  
        docker container update --label active=false "${container_name}"
    else
        podman stop "${container_name}"
    fi
    
    log "Container ${container_name} stopped successfully"
}

# Main switching function
switch_environment() {
    local team="$1"
    local target_env="$2"
    
    if [ "${target_env}" != "blue" ] && [ "${target_env}" != "green" ]; then
        log "ERROR: Invalid target environment '${target_env}'. Must be 'blue' or 'green'"
        exit 1
    fi
    
    # Determine current and target environments
    local current_env
    if [ "${target_env}" = "blue" ]; then
        current_env="green"
    else
        current_env="blue"
    fi
    
    local current_container="jenkins-${team}-${current_env}"
    local target_container="jenkins-${team}-${target_env}"
    
    {% for team in jenkins_teams %}
    if [ "${team}" = "{{ team.name }}" ]; then
        local team_port="{{ team.port }}"
        local team_agent_port="{{ team.agent_port }}"
        
        log "Starting blue-green switch for team '${team}'"
        log "Current: ${current_container}, Target: ${target_container}"
        
        # Step 1: Start target environment without external ports
        log "Step 1: Starting target environment ${target_container}"
        if [ "${CONTAINER_RUNTIME}" = "docker" ]; then
            docker start "${target_container}" || {
                log "ERROR: Failed to start ${target_container}"
                exit 1
            }
        else
            podman start "${target_container}" || {
                log "ERROR: Failed to start ${target_container}"
                exit 1
            }
        fi
        
        # Step 2: Health check target environment
        log "Step 2: Performing health check on target environment"
        if ! health_check "${team}" "${target_env}" "8080"; then
            log "ERROR: Health check failed for ${target_container}"
            # Stop the failed target container
            if [ "${CONTAINER_RUNTIME}" = "docker" ]; then
                docker stop "${target_container}" 2>/dev/null || true
            else
                podman stop "${target_container}" 2>/dev/null || true
            fi
            exit 1
        fi
        
        # Step 3: Switch traffic (stop current, configure target ports)
        log "Step 3: Switching traffic from ${current_container} to ${target_container}"
        
        # Stop current environment
        stop_container "${current_container}" "${team_port}" "${team_agent_port}"
        
        # Start target environment with external ports
        start_container "${target_container}" "${team}" "${team_port}" "${team_agent_port}"
        
        # Step 4: Final health check
        log "Step 4: Final health check after switch"
        if ! health_check "${team}" "${target_env}" "${team_port}"; then
            log "ERROR: Final health check failed. Rolling back..."
            
            # Rollback
            stop_container "${target_container}" "${team_port}" "${team_agent_port}"
            start_container "${current_container}" "${team}" "${team_port}" "${team_agent_port}"
            
            log "Rollback completed"
            exit 1
        fi
        
        log "Blue-green switch completed successfully for team '${team}'"
        log "Active environment: ${target_env}"
        log "URL: http://$(hostname -I | awk '{print $1}'):${team_port}"
        
        return 0
    fi
    {% endfor %}
    
    log "ERROR: Unknown team '${team}'"
    exit 1
}

# Usage function
usage() {
    echo "Usage: $0 <team> <environment>"
    echo "Teams: {% for team in jenkins_teams %}{{ team.name }}{% if not loop.last %}, {% endif %}{% endfor %}"
    echo "Environments: blue, green"
    echo ""
    echo "Examples:"
    echo "  $0 devops blue    # Switch devops team to blue environment"
    echo "  $0 qa green       # Switch qa team to green environment"
}

# Main execution
main() {
    if [ $# -ne 2 ]; then
        usage
        exit 1
    fi
    
    local team="$1"
    local environment="$2"
    
    log "=== Blue-Green Switch Started ==="
    log "Team: ${team}"
    log "Target Environment: ${environment}"
    log "Container Runtime: ${CONTAINER_RUNTIME}"
    
    switch_environment "${team}" "${environment}"
    
    log "=== Blue-Green Switch Completed ==="
}

# Execute main function with all arguments
main "$@"