---
# Jenkins Infrastructure - Blue-Green Multi-Team Master Container Configuration

- name: Create team-specific Jenkins directories
  file:
    path: "{{ jenkins_home_dir }}/{{ item.name }}"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0755'
    recurse: yes
  loop: "{{ jenkins_teams }}"
  tags: ['master', 'directories', 'blue-green']

- name: Create blue-green environment directories for each team
  file:
    path: "{{ jenkins_home_dir }}/{{ item.0.name }}/{{ item.1 }}"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0755'
    recurse: yes
  with_nested:
    - "{{ jenkins_teams }}"
    - ['blue', 'green']
  tags: ['master', 'directories', 'blue-green']

- name: Create Jenkins volumes for blue-green environments
  community.docker.docker_volume:
    name: "jenkins-{{ item.0.name }}-{{ item.1 }}-home"
    driver: "local"
    state: present
  with_nested:
    - "{{ jenkins_teams }}"
    - ['blue', 'green']
  when: jenkins_container_runtime == 'docker'
  tags: ['master', 'volumes', 'docker']

- name: Create Jenkins volumes for blue-green environments (Podman)
  containers.podman.podman_volume:
    name: "jenkins-{{ item.0.name }}-{{ item.1 }}-home"
    driver: "local"
    state: present
  with_nested:
    - "{{ jenkins_teams }}"
    - ['blue', 'green']
  when: jenkins_container_runtime == 'podman'
  tags: ['master', 'volumes', 'podman']

- name: Create Jenkins shared volumes for teams
  community.docker.docker_volume:
    name: "jenkins-{{ item.name }}-shared"
    driver: "local"
    state: present
  loop: "{{ jenkins_teams }}"
  when: jenkins_container_runtime == 'docker'
  tags: ['master', 'volumes', 'docker']

- name: Create Jenkins shared volumes for teams (Podman)
  containers.podman.podman_volume:
    name: "jenkins-{{ item.name }}-shared"
    driver: "local"
    state: present
  loop: "{{ jenkins_teams }}"
  when: jenkins_container_runtime == 'podman'
  tags: ['master', 'volumes', 'podman']

# Deploy Blue Environment Containers
- name: Deploy Jenkins Blue Environment (Docker)
  community.docker.docker_container:
    name: "jenkins-{{ item.name }}-blue"
    image: "{{ harbor_registry_url | default('docker.io') }}/{{ harbor_project | default('jenkins') }}/jenkins:{{ jenkins_master_image_tag | default('lts') }}"
    state: "{{ 'started' if item.active_environment == 'blue' else 'stopped' }}"
    restart_policy: "{{ jenkins_restart_policy }}"
    networks:
      - name: "{{ jenkins_network_name }}"
    ports:
      - "{{ item.port }}:{{ jenkins_port }}"
      - "{{ item.agent_port }}:{{ jenkins_agent_port }}"
    volumes:
      - "jenkins-{{ item.name }}-blue-home:{{ jenkins_home_dir }}"
      - "jenkins-{{ item.name }}-shared:{{ shared_storage_path | default('/shared/jenkins') }}"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env:
      JAVA_OPTS: "{{ jenkins_master_java_opts }}"
      JENKINS_OPTS: "--httpPort={{ jenkins_port }}"
      CASC_JENKINS_CONFIG: "/var/jenkins_home/casc_configs"
      JENKINS_TEAM: "{{ item.name }}"
      JENKINS_ENVIRONMENT: "blue"
    memory: "{{ item.memory }}"
    cpus: "{{ item.cpu_limit }}"
    log_driver: "{{ jenkins_log_driver }}"
    log_options:
      max-size: "{{ jenkins_log_max_size }}"
      max-file: "{{ jenkins_log_max_files }}"
    labels:
      service: "jenkins-master"
      team: "{{ item.name }}"
      environment: "blue"
      active: "{{ 'true' if item.active_environment == 'blue' else 'false' }}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:{{ jenkins_port }}/login"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  loop: "{{ jenkins_teams }}"
  when: jenkins_container_runtime == 'docker'
  register: jenkins_blue_docker
  tags: ['master', 'containers', 'docker', 'blue']

# Deploy Green Environment Containers
- name: Deploy Jenkins Green Environment (Docker)
  community.docker.docker_container:
    name: "jenkins-{{ item.name }}-green"
    image: "{{ harbor_registry_url | default('docker.io') }}/{{ harbor_project | default('jenkins') }}/jenkins:{{ jenkins_master_image_tag | default('lts') }}"
    state: "{{ 'started' if item.active_environment == 'green' else 'stopped' }}"
    restart_policy: "{{ jenkins_restart_policy }}"
    networks:
      - name: "{{ jenkins_network_name }}"
    # Green environment uses different internal ports to avoid conflicts
    ports: []  # No external ports for inactive environment
    volumes:
      - "jenkins-{{ item.name }}-green-home:{{ jenkins_home_dir }}"
      - "jenkins-{{ item.name }}-shared:{{ shared_storage_path | default('/shared/jenkins') }}"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env:
      JAVA_OPTS: "{{ jenkins_master_java_opts }}"
      JENKINS_OPTS: "--httpPort={{ jenkins_port }}"
      CASC_JENKINS_CONFIG: "/var/jenkins_home/casc_configs"
      JENKINS_TEAM: "{{ item.name }}"
      JENKINS_ENVIRONMENT: "green"
    memory: "{{ item.memory }}"
    cpus: "{{ item.cpu_limit }}"
    log_driver: "{{ jenkins_log_driver }}"
    log_options:
      max-size: "{{ jenkins_log_max_size }}"
      max-file: "{{ jenkins_log_max_files }}"
    labels:
      service: "jenkins-master"
      team: "{{ item.name }}"
      environment: "green"
      active: "{{ 'true' if item.active_environment == 'green' else 'false' }}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:{{ jenkins_port }}/login"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  loop: "{{ jenkins_teams }}"
  when: jenkins_container_runtime == 'docker'
  register: jenkins_green_docker
  tags: ['master', 'containers', 'docker', 'green']

# Podman Blue Environment
- name: Deploy Jenkins Blue Environment (Podman)
  containers.podman.podman_container:
    name: "jenkins-{{ item.name }}-blue"
    image: "{{ harbor_registry_url | default('docker.io') }}/{{ harbor_project | default('jenkins') }}/jenkins:{{ jenkins_master_image_tag | default('lts') }}"
    state: "{{ 'started' if item.active_environment == 'blue' else 'stopped' }}"
    restart_policy: "{{ jenkins_restart_policy }}"
    network: "{{ jenkins_network_name }}"
    ports:
      - "{{ item.port }}:{{ jenkins_port }}"
      - "{{ item.agent_port }}:{{ jenkins_agent_port }}"
    volumes:
      - "jenkins-{{ item.name }}-blue-home:{{ jenkins_home_dir }}"
      - "jenkins-{{ item.name }}-shared:{{ shared_storage_path | default('/shared/jenkins') }}"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env:
      JAVA_OPTS: "{{ jenkins_master_java_opts }}"
      JENKINS_OPTS: "--httpPort={{ jenkins_port }}"
      CASC_JENKINS_CONFIG: "/var/jenkins_home/casc_configs"
      JENKINS_TEAM: "{{ item.name }}"
      JENKINS_ENVIRONMENT: "blue"
    memory: "{{ item.memory }}"
    cpus: "{{ item.cpu_limit }}"
    log_driver: "{{ jenkins_log_driver }}"
    log_options:
      max_size: "{{ jenkins_log_max_size }}"
    labels:
      service: "jenkins-master"
      team: "{{ item.name }}"
      environment: "blue"
      active: "{{ 'true' if item.active_environment == 'blue' else 'false' }}"
    healthcheck: "curl -f http://localhost:{{ jenkins_port }}/login || exit 1"
    healthcheck_interval: 30s
    healthcheck_timeout: 10s
    healthcheck_retries: 3
    healthcheck_start_period: 60s
  loop: "{{ jenkins_teams }}"
  when: jenkins_container_runtime == 'podman'
  register: jenkins_blue_podman
  tags: ['master', 'containers', 'podman', 'blue']

# Podman Green Environment
- name: Deploy Jenkins Green Environment (Podman)
  containers.podman.podman_container:
    name: "jenkins-{{ item.name }}-green"
    image: "{{ harbor_registry_url | default('docker.io') }}/{{ harbor_project | default('jenkins') }}/jenkins:{{ jenkins_master_image_tag | default('lts') }}"
    state: "{{ 'started' if item.active_environment == 'green' else 'stopped' }}"
    restart_policy: "{{ jenkins_restart_policy }}"
    network: "{{ jenkins_network_name }}"
    ports: []  # No external ports for inactive environment
    volumes:
      - "jenkins-{{ item.name }}-green-home:{{ jenkins_home_dir }}"
      - "jenkins-{{ item.name }}-shared:{{ shared_storage_path | default('/shared/jenkins') }}"
      - "/var/run/docker.sock:/var/run/docker.sock"
    env:
      JAVA_OPTS: "{{ jenkins_master_java_opts }}"
      JENKINS_OPTS: "--httpPort={{ jenkins_port }}"
      CASC_JENKINS_CONFIG: "/var/jenkins_home/casc_configs"
      JENKINS_TEAM: "{{ item.name }}"
      JENKINS_ENVIRONMENT: "green"
    memory: "{{ item.memory }}"
    cpus: "{{ item.cpu_limit }}"
    log_driver: "{{ jenkins_log_driver }}"
    log_options:
      max_size: "{{ jenkins_log_max_size }}"
    labels:
      service: "jenkins-master"
      team: "{{ item.name }}"
      environment: "green"
      active: "{{ 'true' if item.active_environment == 'green' else 'false' }}"
    healthcheck: "curl -f http://localhost:{{ jenkins_port }}/login || exit 1"
    healthcheck_interval: 30s
    healthcheck_timeout: 10s
    healthcheck_retries: 3
    healthcheck_start_period: 60s
  loop: "{{ jenkins_teams }}"
  when: jenkins_container_runtime == 'podman'
  register: jenkins_green_podman
  tags: ['master', 'containers', 'podman', 'green']

# Health checks for active environments
- name: Wait for active Jenkins environments to be ready
  uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ item.port }}/login"
    method: GET
    status_code: 200
  loop: "{{ jenkins_teams }}"
  retries: 30
  delay: 10
  tags: ['master', 'health-check']

# Create load balancer configuration for blue-green routing
- name: Create HAProxy configuration directory
  file:
    path: /etc/haproxy/conf.d
    state: directory
    owner: root
    group: root
    mode: '0755'
  tags: ['master', 'haproxy', 'blue-green']

- name: Create HAProxy configuration for blue-green routing
  template:
    src: haproxy-jenkins-blue-green.conf.j2
    dest: "/etc/haproxy/conf.d/jenkins-{{ item.name }}.cfg"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ jenkins_teams }}"
  notify: reload haproxy
  tags: ['master', 'haproxy', 'blue-green']

- name: Create HAProxy main configuration
  template:
    src: haproxy-main.cfg.j2
    dest: "/etc/haproxy/haproxy.cfg"
    owner: root
    group: root
    mode: '0644'
    backup: yes
  notify: reload haproxy
  tags: ['master', 'haproxy', 'blue-green']

# Monitoring and logging
- name: Create Jenkins scripts directory
  file:
    path: "{{ jenkins_home_dir }}/scripts"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0755'
  tags: ['master', 'directories', 'scripts']

- name: Create monitoring scripts for blue-green environments
  template:
    src: "{{ item.src }}"
    dest: "{{ jenkins_home_dir }}/scripts/{{ item.dest }}"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0755'
  loop:
    - { src: 'jenkins-blue-green-healthcheck.sh.j2', dest: 'blue-green-healthcheck.sh' }
    - { src: 'jenkins-blue-green-switch.sh.j2', dest: 'blue-green-switch.sh' }
    - { src: 'jenkins-team-monitor.sh.j2', dest: 'team-monitor.sh' }
  tags: ['master', 'scripts', 'monitoring']

# Display deployment status
- name: Display Jenkins Blue-Green Multi-Team Deployment Status
  debug:
    msg: |
      Jenkins Blue-Green Multi-Team Deployment Status:
      
      {% for team in jenkins_teams %}
      Team: {{ team.name | upper }}
        Active Environment: {{ team.active_environment | upper }}
        URL: http://{{ ansible_default_ipv4.address }}:{{ team.port }}
        Agent Port: {{ team.agent_port }}
        Blue Container: jenkins-{{ team.name }}-blue ({{ 'RUNNING' if team.active_environment == 'blue' else 'STOPPED' }})
        Green Container: jenkins-{{ team.name }}-green ({{ 'RUNNING' if team.active_environment == 'green' else 'STOPPED' }})
        Memory: {{ team.memory }}
        CPU: {{ team.cpu_limit }}
      
      {% endfor %}
      Runtime: {{ jenkins_container_runtime }}
      Network: {{ jenkins_network_name }}
      Shared Storage: {{ shared_storage_path | default('/shared/jenkins') }}
      Blue-Green Enabled: {{ jenkins_blue_green_enabled }}
  tags: ['master', 'info']