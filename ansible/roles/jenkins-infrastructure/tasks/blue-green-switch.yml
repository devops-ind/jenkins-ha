---
# Jenkins Blue-Green Environment Switching Tasks
# Handles seamless switching between blue and green environments

- name: Load current blue-green deployment state
  slurp:
    src: "{{ jenkins_home_dir }}/blue-green/state.json"
  register: bg_state_raw
  failed_when: false
  tags: ['blue-green', 'switch', 'state']

- name: Parse blue-green deployment state
  set_fact:
    bg_state: "{{ bg_state_raw.content | b64decode | from_json }}"
  when: bg_state_raw is succeeded and bg_state_raw.content is defined
  tags: ['blue-green', 'switch', 'state']

- name: Set default blue-green state if not found
  set_fact:
    bg_state:
      current_environment: "{{ jenkins_current_environment }}"
      target_environment: "{{ jenkins_target_environment }}"
      environments:
        blue:
          container_name: "{{ jenkins_blue_container_name }}"
          port: "{{ jenkins_blue_port }}"
        green:
          container_name: "{{ jenkins_green_container_name }}"
          port: "{{ jenkins_green_port }}"
  when: bg_state is not defined
  tags: ['blue-green', 'switch', 'state']

- name: Determine target environment for switching
  set_fact:
    switch_from_env: "{{ bg_state.current_environment }}"
    switch_to_env: "{{ 'green' if bg_state.current_environment == 'blue' else 'blue' }}"
    switch_from_container: "{{ jenkins_blue_container_name if bg_state.current_environment == 'blue' else jenkins_green_container_name }}"
    switch_to_container: "{{ jenkins_green_container_name if bg_state.current_environment == 'blue' else jenkins_blue_container_name }}"
    switch_from_port: "{{ jenkins_blue_port if bg_state.current_environment == 'blue' else jenkins_green_port }}"
    switch_to_port: "{{ jenkins_green_port if bg_state.current_environment == 'blue' else jenkins_blue_port }}"
  tags: ['blue-green', 'switch', 'determine']

- name: Display switching information
  debug:
    msg: |
      === Jenkins Blue-Green Environment Switch ===
      
      Switching FROM: {{ switch_from_env }} ({{ switch_from_container }}) - Port {{ switch_from_port }}
      Switching TO: {{ switch_to_env }} ({{ switch_to_container }}) - Port {{ switch_to_port }}
      
      Switch initiated at: {{ ansible_date_time.iso8601 }}
      Switch timeout: {{ jenkins_blue_green_switch_timeout }}s
  tags: ['blue-green', 'switch', 'info']

- name: Create pre-switch backup
  include_tasks: blue-green-backup.yml
  when: jenkins_pre_deployment_backup | default(true) | bool
  tags: ['blue-green', 'switch', 'backup']

- name: Verify target environment health before switching
  uri:
    url: "http://{{ ansible_default_ipv4.address }}:{{ switch_to_port }}{{ jenkins_context_path | default('') }}/api/json"
    method: GET
    status_code: 200
    timeout: "{{ jenkins_health_check_timeout }}"
    return_content: yes
  register: target_env_health
  retries: "{{ jenkins_blue_green_health_check_retries }}"
  delay: "{{ jenkins_blue_green_health_check_delay }}"
  failed_when: false
  tags: ['blue-green', 'switch', 'health-check']

- name: Abort switch if target environment is unhealthy
  fail:
    msg: |
      Target environment {{ switch_to_env }} ({{ switch_to_container }}) is not healthy!
      Health check URL: http://{{ ansible_default_ipv4.address }}:{{ switch_to_port }}{{ jenkins_context_path | default('') }}/api/json
      Status: {{ target_env_health.status | default('unknown') }}
      
      Switch aborted to prevent service disruption.
  when: target_env_health is failed
  tags: ['blue-green', 'switch', 'health-check']

- name: Update load balancer backend configuration
  template:
    src: jenkins-backend.cfg.j2
    dest: "{{ jenkins_load_balancer_backend_file }}"
    owner: root
    group: root
    mode: '0644'
    backup: yes
  vars:
    jenkins_active_port: "{{ switch_to_port }}"
    jenkins_active_environment: "{{ switch_to_env }}"
    jenkins_active_container: "{{ switch_to_container }}"
  notify: 
    - reload haproxy
  tags: ['blue-green', 'switch', 'load-balancer']

- name: Wait for load balancer configuration reload
  wait_for:
    timeout: 10
  tags: ['blue-green', 'switch', 'load-balancer']

- name: Verify load balancer is routing to new environment
  uri:
    url: "http://{{ jenkins_vip | default(ansible_default_ipv4.address) }}:{{ jenkins_master_port }}{{ jenkins_context_path | default('') }}/api/json"
    method: GET
    status_code: 200
    timeout: "{{ jenkins_health_check_timeout }}"
    return_content: yes
  register: lb_health_check
  retries: 5
  delay: 10
  failed_when: false
  tags: ['blue-green', 'switch', 'load-balancer-verify']

- name: Parse Jenkins API response to verify environment
  set_fact:
    jenkins_api_response: "{{ lb_health_check.content | from_json }}"
  when: lb_health_check is succeeded and lb_health_check.content is defined
  tags: ['blue-green', 'switch', 'load-balancer-verify']

- name: Rollback on load balancer verification failure
  include_tasks: blue-green-rollback.yml
  vars:
    rollback_reason: "Load balancer health check failed"
    rollback_from_env: "{{ switch_to_env }}"
    rollback_to_env: "{{ switch_from_env }}"
  when: 
    - jenkins_auto_rollback_enabled | default(true) | bool
    - lb_health_check is failed
  tags: ['blue-green', 'switch', 'rollback']

- name: Fail deployment if load balancer check failed and rollback disabled
  fail:
    msg: |
      Load balancer health check failed after environment switch!
      Load balancer URL: http://{{ jenkins_vip | default(ansible_default_ipv4.address) }}:{{ jenkins_master_port }}{{ jenkins_context_path | default('') }}/api/json
      Status: {{ lb_health_check.status | default('unknown') }}
      
      Automatic rollback is disabled. Manual intervention required.
  when: 
    - not (jenkins_auto_rollback_enabled | default(true) | bool)
    - lb_health_check is failed
  tags: ['blue-green', 'switch', 'rollback']

- name: Update blue-green state after successful switch
  template:
    src: blue-green-state.json.j2
    dest: "{{ jenkins_home_dir }}/blue-green/state.json"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0644'
    backup: yes
  vars:
    jenkins_current_environment: "{{ switch_to_env }}"
    jenkins_target_environment: "{{ switch_from_env }}"
    deployment_timestamp: "{{ ansible_date_time.iso8601 }}"
  when: lb_health_check is succeeded
  tags: ['blue-green', 'switch', 'state']

- name: Create network alias for active environment
  community.docker.docker_container:
    name: "{{ switch_to_container }}"
    networks:
      - name: "{{ jenkins_network_name }}"
        aliases:
          - "{{ jenkins_active_network_alias }}"
          - "{{ jenkins_blue_network_alias if switch_to_env == 'blue' else jenkins_green_network_alias }}"
    networks_cli_compatible: yes
  when: jenkins_container_runtime == 'docker'
  tags: ['blue-green', 'switch', 'network-alias']

- name: Remove network alias from previous active environment
  community.docker.docker_container:
    name: "{{ switch_from_container }}"
    networks:
      - name: "{{ jenkins_network_name }}"
        aliases:
          - "{{ jenkins_blue_network_alias if switch_from_env == 'blue' else jenkins_green_network_alias }}"
    networks_cli_compatible: yes
  when: jenkins_container_runtime == 'docker'
  ignore_errors: yes
  tags: ['blue-green', 'switch', 'network-alias']

- name: Run post-deployment verification tests
  include_tasks: blue-green-verification.yml
  when: jenkins_post_deployment_verification | default(true) | bool
  vars:
    verification_env: "{{ switch_to_env }}"
    verification_port: "{{ switch_to_port }}"
    verification_container: "{{ switch_to_container }}"
  tags: ['blue-green', 'switch', 'verification']

- name: Log successful environment switch
  lineinfile:
    path: "{{ jenkins_home_dir }}/blue-green/logs/switch.log"
    line: "{{ ansible_date_time.iso8601 }} - SUCCESS: Switched from {{ switch_from_env }} to {{ switch_to_env }} ({{ switch_from_container }} -> {{ switch_to_container }})"
    create: yes
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0644'
  when: lb_health_check is succeeded
  tags: ['blue-green', 'switch', 'logging']

- name: Generate environment switch completion report
  debug:
    msg: |
      === Jenkins Blue-Green Environment Switch COMPLETED ===
      
      Switch Result: {{ 'SUCCESS' if lb_health_check is succeeded else 'FAILED' }}
      Switch Duration: {{ ((ansible_date_time.epoch | int) - (ansible_date_time.epoch | int)) }}s (calculated at runtime)
      
      Previous Active: {{ switch_from_env }} ({{ switch_from_container }}) - Port {{ switch_from_port }}
      New Active: {{ switch_to_env }} ({{ switch_to_container }}) - Port {{ switch_to_port }}
      
      Load Balancer Status: {{ 'UPDATED' if lb_health_check is succeeded else 'FAILED' }}
      Active Environment URL: http://{{ jenkins_vip | default(ansible_default_ipv4.address) }}:{{ jenkins_master_port }}{{ jenkins_context_path | default('') }}
      Direct Access URL: http://{{ ansible_default_ipv4.address }}:{{ switch_to_port }}{{ jenkins_context_path | default('') }}
      
      Post-Deployment Verification: {{ 'ENABLED' if jenkins_post_deployment_verification | default(true) | bool else 'DISABLED' }}
      Auto-Rollback: {{ 'ENABLED' if jenkins_auto_rollback_enabled | default(true) | bool else 'DISABLED' }}
      
      Next switch will be: {{ switch_to_env }} -> {{ switch_from_env }}
  tags: ['blue-green', 'switch', 'info']