---
# Default variables for jenkins-infrastructure role

# Core Jenkins Configuration
jenkins_enabled: true
jenkins_version: "2.426.1"
jenkins_user: "jenkins"
jenkins_group: "jenkins"
jenkins_uid: 1000
jenkins_gid: 1000
jenkins_home_dir: "/var/jenkins"
jenkins_port: 8080
jenkins_agent_port: 50000
jenkins_context_path: ""

# Jenkins Master Configuration
jenkins_master_memory: "2g"
jenkins_master_cpu_limit: "1.0"
jenkins_master_image_tag: "latest"
jenkins_master_java_opts: "-Djenkins.install.runSetupWizard=false -Dhudson.DNSMultiCast.disabled=true"

# Multi-Team Jenkins Configuration
jenkins_teams:
  - name: "devops"
    port: 8080
    agent_port: 50000
    memory: "3g"
    cpu_limit: "2.0"
    active_environment: "blue"  # blue or green
  - name: "developer"
    port: 8081
    agent_port: 50001
    memory: "2g" 
    cpu_limit: "1.5"
    active_environment: "blue"
  - name: "qa"
    port: 8082
    agent_port: 50002
    memory: "2g"
    cpu_limit: "1.0"
    active_environment: "blue"

# Blue-Green Deployment Configuration
jenkins_blue_green_enabled: true
jenkins_blue_green_switch_enabled: false  # Set to true during deployment switches

# Jenkins Dynamic Agent Configuration
jenkins_dynamic_agent_memory: "2g"
jenkins_dynamic_agent_cpu_limit: "1.0"
jenkins_dynamic_agent_image_tag: "latest"
jenkins_dynamic_agent_max_instances: 10
jenkins_ha_mode: "active-passive"
jenkins_vip: ""
jenkins_cluster_name: "jenkins-ha-cluster"

# Container Runtime Configuration
jenkins_container_runtime: "podman"  # podman or docker
jenkins_restart_policy: "unless-stopped"
jenkins_log_driver: "journald"
jenkins_log_max_size: "10m"
jenkins_log_max_files: "3"

# Network Configuration
jenkins_network_name: "jenkins-network"
jenkins_network_driver: "bridge"
jenkins_network_subnet: "172.20.0.0/16"
jenkins_network_gateway: "172.20.0.1"

# Volume Configuration
jenkins_volumes:
  - name: "jenkins-home"
    type: "named"
    driver: "local"
  - name: "jenkins-shared"
    type: "bind"
    source: "{{ shared_storage_path | default('/shared/jenkins') }}"
  - name: "docker-sock"
    type: "bind"
    source: "/var/run/docker.sock"

# Service Configuration (Docker Compose is now the default)
jenkins_systemd_enabled: false
jenkins_compose_enabled: true
jenkins_run_validation: true
jenkins_systemd_restart: "always"
jenkins_systemd_restart_sec: 30

# Dynamic Agent Memory and Resource Configuration
jenkins_dind_agent_memory: 2048
jenkins_maven_agent_memory: 4096
jenkins_maven_agent_heap: "3g"
jenkins_python_agent_memory: 2048
jenkins_nodejs_agent_memory: 3072

# Shared workspace for dynamic agents
jenkins_shared_workspace: "{{ shared_storage_path | default('/shared/jenkins') }}/workspace"

# Build Tools Versions for Dynamic Agents
maven_version: "3.9.6"
python_version: "3.11"
nodejs_version: "18"
default_jdk_version: "11"

# Security Configuration
jenkins_security_enabled: true
jenkins_csrf_protection: true
jenkins_agent_protocols: ["JNLP4-connect", "Ping"]

# Container Security Configuration
jenkins_container_security:
  # Security constraints
  no_new_privileges: true
  read_only_root_filesystem: true
  run_as_non_root: true
  run_as_user: "{{ jenkins_uid }}"
  run_as_group: "{{ jenkins_gid }}"
  
  # Security options
  security_opt:
    - "no-new-privileges:true"
    - "apparmor=docker-default"
  
  # Capability drops (remove all capabilities by default)
  cap_drop:
    - "ALL"
  
  # Only add required capabilities back
  cap_add:
    - "SETGID"
    - "SETUID"
    - "CHOWN"
    - "DAC_OVERRIDE"
    - "NET_BIND_SERVICE"
  
  # Resource limits
  memory_limit: "{{ jenkins_master_memory }}"
  memory_reservation: "{{ (jenkins_master_memory | regex_replace('g', '') | int * 0.8) | int }}g"
  cpu_limit: "{{ jenkins_master_cpu_limit }}"
  cpu_reservation: "{{ jenkins_master_cpu_limit | float * 0.5 }}"
  
  # Network security
  network_mode: "bridge"  # Avoid host networking
  publish_ports: true     # Explicitly publish required ports only
  
  # File system security
  tmpfs:
    - "/tmp:noexec,nosuid,size=100m"
    - "/var/tmp:noexec,nosuid,size=50m"
  
  # Mount security
  mount_propagation: "private"
  read_only_paths:
    - "/sys"
    - "/proc/sys"
    - "/proc/sysrq-trigger"
    - "/proc/latency_stats"
    - "/proc/acpi"
    - "/proc/timer_stats"
    - "/proc/scsi"
  
  # Environment variable filtering (prevent sensitive data leakage)
  env_whitelist:
    - "JAVA_OPTS"
    - "JENKINS_OPTS"
    - "TZ"
    - "PATH"
    - "HOME"
    - "USER"

# Container Image Scanning Configuration
jenkins_image_scanning:
  enabled: true
  scanner: "trivy"  # trivy, clair, or anchore
  
  # Trivy configuration
  trivy:
    severity_levels: ["HIGH", "CRITICAL"]
    fail_on_severity: "HIGH"
    ignore_unfixed: false
    scan_timeout: "5m"
    scan_on_build: true
    scan_on_deploy: true
    
  # Vulnerability database update frequency
  vuln_db_update_frequency: "daily"
  
  # Image scanning policies
  scanning_policies:
    # Block deployment if critical vulnerabilities found
    block_critical: true
    # Maximum allowed high severity vulnerabilities
    max_high_vulns: 5
    # Maximum allowed medium severity vulnerabilities  
    max_medium_vulns: 20
    # Age threshold for vulnerability data (days)
    vuln_data_max_age: 7
    
  # Scanning exclusions (use carefully)
  scan_exclusions: []
  
  # SBOM (Software Bill of Materials) generation
  sbom:
    enabled: true
    format: "spdx-json"
    include_dependencies: true

# Container Runtime Security
jenkins_runtime_security:
  # Enable security monitoring
  security_monitoring: true
  
  # Audit logging
  audit_logs:
    enabled: true
    log_level: "INFO"
    log_format: "json"
    max_log_size: "100MB"
    max_log_files: 10
    
  # Resource monitoring thresholds
  resource_monitoring:
    cpu_threshold: 80  # Alert if CPU usage > 80%
    memory_threshold: 85  # Alert if memory usage > 85%
    disk_threshold: 90  # Alert if disk usage > 90%
    
  # Network security
  network_policies:
    # Restrict outbound connections
    egress_rules:
      - protocol: "tcp"
        port: 443
        description: "HTTPS outbound"
      - protocol: "tcp" 
        port: 80
        description: "HTTP outbound (limit to specific hosts)"
      - protocol: "tcp"
        port: 22
        description: "SSH for git operations"
    
    # Allow inbound connections
    ingress_rules:
      - protocol: "tcp"
        port: "{{ jenkins_port }}"
        description: "Jenkins web interface"
      - protocol: "tcp"
        port: "{{ jenkins_agent_port }}"
        description: "Jenkins agent connections"

# Image Build Configuration
jenkins_images_build_dir: "/tmp/jenkins-images"
jenkins_images_push: true
jenkins_images_force_rebuild: false
jenkins_images_cleanup: true

# Resource Limits
jenkins_master_resources:
  memory: "{{ jenkins_master_memory }}"
  cpu: "{{ jenkins_master_cpu_limit }}"
  
jenkins_dynamic_agent_resources:
  memory: "{{ jenkins_dynamic_agent_memory }}"
  cpu: "{{ jenkins_dynamic_agent_cpu_limit }}"
  max_instances: "{{ jenkins_dynamic_agent_max_instances }}"

# Environment Variables
jenkins_env_vars:
  JAVA_OPTS: "{{ jenkins_master_java_opts }}"
  JENKINS_OPTS: "--httpPort={{ jenkins_port }} --prefix={{ jenkins_context_path }}"
  TZ: "{{ common_timezone | default('UTC') }}"
