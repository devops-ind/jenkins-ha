---
# Tasks for docker role

- name: Install Docker dependencies
  package:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
  when: ansible_os_family == "Debian"

- name: Add Docker GPG key
  shell: |
    curl -fsSL https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  args:
    creates: /usr/share/keyrings/docker-archive-keyring.gpg
  when: ansible_os_family == "Debian"

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch={{ ansible_architecture | regex_replace('x86_64', 'amd64') | regex_replace('aarch64', 'arm64') }} signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600
  when: ansible_os_family == "Debian"

- name: Remove conflicting moby-tini package
  apt:
    name: moby-tini
    state: absent
  when: ansible_os_family == "Debian"

- name: Install Docker CE packages
  apt:
    name:
      - docker-ce
      - docker-ce-cli  
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Install Docker CE (RedHat)
  package:
    name: docker-ce
    state: present
  when: ansible_os_family == "RedHat"

- name: Create Docker daemon configuration directory
  file:
    path: /etc/docker
    state: directory
    mode: '0755'

- name: Configure Docker daemon
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    backup: yes
  notify: restart docker

- name: Create Docker users
  user:
    name: "{{ item }}"
    groups: docker
    append: yes
    state: present
  loop: "{{ docker_users }}"

- name: Start and enable Docker service
  service:
    name: docker
    state: "{{ docker_service_state }}"
    enabled: "{{ docker_service_enabled }}"

- name: Install Docker Compose
  get_url:
    url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}"
    dest: "{{ docker_compose_path }}"
    mode: '0755'
  when: docker_compose_enabled

- name: Create Docker networks
  docker_network:
    name: "{{ item.name }}"
    driver: "{{ item.driver | default('bridge') }}"
    ipam_config: "{{ item.ipam_config | default(omit) }}"
  loop: "{{ docker_networks }}"

- name: Create Docker volumes
  docker_volume:
    name: "{{ item }}"
  loop: "{{ docker_volumes }}"

- name: Setup Docker log rotation
  template:
    src: docker-logrotate.j2
    dest: /etc/logrotate.d/docker
  when: docker_cleanup_enabled

# - name: Setup Docker cleanup cron job
#   cron:
#     name: "Docker system cleanup"
#     minute: "{{ docker_cleanup_cron.minute }}"
#     hour: "{{ docker_cleanup_cron.hour }}"
#     day: "{{ docker_cleanup_cron.day }}"
#     month: "{{ docker_cleanup_cron.month }}"
#     weekday: "{{ docker_cleanup_cron.weekday }}"
#     job: "/usr/bin/docker system prune -af --volumes > /dev/null 2>&1"
#   when: docker_cleanup_enabled

- name: Configure Docker socket permissions
  file:
    path: /var/run/docker.sock
    group: "{{ docker_socket_group }}"
    mode: '0660'

- name: Enable Docker audit logging
  lineinfile:
    path: /etc/audit/rules.d/docker.rules
    line: "-w /var/lib/docker -k docker"
    create: yes
  notify: restart auditd
  when: docker_enable_audit
