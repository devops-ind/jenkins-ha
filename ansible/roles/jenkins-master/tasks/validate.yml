---
# Jenkins Master - Input Validation and Prerequisites

- name: Validate jenkins_master_config is defined
  assert:
    that:
      - jenkins_master_config is defined
      - jenkins_master_config is mapping
    fail_msg: "jenkins_master_config must be defined as a dictionary"
    success_msg: "jenkins_master_config validation passed"
  tags: ['validate']

- name: Validate team configuration
  assert:
    that:
      - jenkins_master_config.team_name is defined
      - jenkins_master_config.team_name | length > 0
      - jenkins_master_config.active_environment is defined  
      - jenkins_master_config.active_environment in ['blue', 'green']
    fail_msg: "Team configuration must include team_name and valid active_environment (blue/green)"
    success_msg: "Team configuration validation passed"
  tags: ['validate']

- name: Validate port configuration
  assert:
    that:
      - jenkins_master_config.ports.web is defined
      - jenkins_master_config.ports.web | int > 1024
      - jenkins_master_config.ports.agent is defined  
      - jenkins_master_config.ports.agent | int > 1024
      - jenkins_master_config.ports.web != jenkins_master_config.ports.agent
    fail_msg: "Port configuration must include unique web and agent ports > 1024"
    success_msg: "Port configuration validation passed"
  tags: ['validate']

- name: Validate container runtime
  assert:
    that:
      - jenkins_master_container_runtime == 'docker'
    fail_msg: "Container runtime must be 'docker'"
    success_msg: "Container runtime validation passed"
  tags: ['validate']

- name: Validate resource configuration for all teams
  assert:
    that:
      - item.resources.memory is defined
      - item.resources.cpu is defined
      - item.resources.memory | regex_search('[0-9]+[gm]')
      - item.resources.cpu | string | float > 0
    fail_msg: "Resource configuration for {{ item.team_name }} must include valid memory (e.g., '2g') and CPU (e.g., '1.0')"
    success_msg: "Resource configuration validation passed for {{ item.team_name }}"
  loop: "{{ jenkins_effective_config }}"
  loop_control:
    label: "{{ item.team_name }}"
  tags: ['validate']

- name: Validate port conflicts between teams
  assert:
    that:
      - jenkins_effective_config | map(attribute='ports.web') | list | unique | length == jenkins_effective_config | length
      - jenkins_effective_config | map(attribute='ports.agent') | list | unique | length == jenkins_effective_config | length
    fail_msg: |
      Port conflicts detected between teams:
      Web ports: {{ jenkins_effective_config | map(attribute='ports.web') | list }}
      Agent ports: {{ jenkins_effective_config | map(attribute='ports.agent') | list }}
      All ports must be unique across teams.
    success_msg: "No port conflicts detected between teams"
  when: jenkins_effective_config | length > 1
  tags: ['validate']

- name: Check Docker availability
  command: "docker --version"
  register: docker_check
  failed_when: false
  changed_when: false
  tags: ['validate']

- name: Validate Docker is available
  assert:
    that:
      - docker_check.rc == 0
    fail_msg: "Docker is not available"
    success_msg: "Docker is available"
  tags: ['validate']