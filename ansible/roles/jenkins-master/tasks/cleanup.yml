---
# Jenkins Master - Cleanup and Maintenance Tasks

- name: Stop and remove old Jenkins containers
  block:
    - name: Get list of old Jenkins containers
      shell: "docker ps -aq --filter 'name=jenkins-*' --filter 'status=exited'"
      register: old_containers
      changed_when: false
    
    - name: Remove old Jenkins containers
      shell: "docker rm -f {{ old_containers.stdout_lines | join(' ') }}"
      when: old_containers.stdout_lines | length > 0
      register: container_removal
      changed_when: container_removal.rc == 0
  when: jenkins_master_cleanup_containers | default(false)
  tags: ['cleanup', 'containers']

- name: Clean up unused volumes
  block:
    - name: Get list of unused Jenkins volumes
      shell: "docker volume ls --filter 'dangling=true' --filter 'name=jenkins-*' -q"
      register: unused_volumes
      changed_when: false
    
    - name: Remove unused Jenkins volumes
      shell: "docker volume rm {{ unused_volumes.stdout_lines | join(' ') }}"
      when: unused_volumes.stdout_lines | length > 0
      register: volume_removal
      changed_when: volume_removal.rc == 0
  when: jenkins_master_cleanup_volumes | default(false)
  tags: ['cleanup', 'volumes']

- name: Remove old Jenkins images
  command: "docker image prune -f"
  when: jenkins_master_cleanup_images | default(false)
  register: image_cleanup
  changed_when: "'Total reclaimed space' in image_cleanup.stdout"
  tags: ['cleanup', 'images']

- name: Clean up old log files for each team
  find:
    paths: "{{ jenkins_home_dir }}/{{ item.team_name }}"
    patterns: "*.log*"
    age: "{{ jenkins_master_log_retention_days | default(30) }}d"
    recurse: yes
  register: old_logs_results
  loop: "{{ jenkins_effective_config }}"
  loop_control:
    label: "{{ item.team_name }}"
  when: jenkins_master_cleanup_logs | default(false)
  tags: ['cleanup', 'logs']

- name: Remove old log files for all teams
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ old_logs_results.results | default([]) | selectattr('files', 'defined') | map(attribute='files') | list | flatten }}"
  when: 
    - jenkins_master_cleanup_logs | default(false)
    - old_logs_results is defined
    - old_logs_results.results is defined
  tags: ['cleanup', 'logs']

- name: Display cleanup summary
  debug:
    msg: |
      Jenkins Cleanup Summary:
      
      Images Cleaned: {{ 'Yes' if jenkins_master_cleanup_images else 'Skipped' }}
      Containers Cleaned: {{ 'Yes' if jenkins_master_cleanup_containers else 'Skipped' }}
      Volumes Cleaned: {{ 'Yes' if jenkins_master_cleanup_volumes else 'Skipped' }}
      Logs Cleaned: {{ old_logs_results.results | default([]) | selectattr('files', 'defined') | map(attribute='files') | list | flatten | length }} files removed
      Teams Processed: {{ jenkins_effective_config | length }}
      
      {% if image_cleanup.stdout is defined %}
      {{ image_cleanup.stdout }}
      {% endif %}
  when: jenkins_master_cleanup_enabled | default(false)
  tags: ['cleanup', 'summary']