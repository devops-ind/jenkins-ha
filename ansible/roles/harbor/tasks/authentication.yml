---
# Harbor Authentication and User Management Tasks

- name: Wait for Harbor to be ready
  uri:
    url: "{{ harbor_api_base_url }}/systeminfo"
    method: GET
    validate_certs: "{{ harbor_ssl_verify | default(true) }}"
    timeout: 30
  register: harbor_health_check
  until: harbor_health_check.status == 200
  retries: 30
  delay: 10
  tags: ['harbor', 'auth', 'health-check']

- name: Get Harbor admin authentication token
  uri:
    url: "{{ harbor_api_base_url }}/users/current"
    method: GET
    user: "admin"
    password: "{{ vault_harbor_admin_password }}"
    force_basic_auth: yes
    validate_certs: "{{ harbor_ssl_verify | default(true) }}"
  register: harbor_admin_auth
  tags: ['harbor', 'auth', 'admin']

- name: Create Harbor service users
  uri:
    url: "{{ harbor_api_base_url }}/users"
    method: POST
    user: "admin"
    password: "{{ vault_harbor_admin_password }}"
    force_basic_auth: yes
    body_format: json
    body:
      username: "{{ item.username }}"
      email: "{{ item.email }}"
      password: "{{ item.password }}"
      realname: "{{ item.realname }}"
      comment: "{{ item.comment | default('Created by Ansible') }}"
    status_code: [201, 409]  # 409 = user already exists
    validate_certs: "{{ harbor_ssl_verify | default(true) }}"
  loop: "{{ harbor_service_users }}"
  register: harbor_users_created
  tags: ['harbor', 'auth', 'users']

- name: Update Harbor service user passwords
  uri:
    url: "{{ harbor_api_base_url }}/users/{{ item.user_id | default(item.username) }}/password"
    method: PUT
    user: "admin"
    password: "{{ vault_harbor_admin_password }}"
    force_basic_auth: yes
    body_format: json
    body:
      old_password: "{{ item.old_password | default('') }}"
      new_password: "{{ item.password }}"
    status_code: [200, 400, 403]  # 400/403 may occur if password is already set
    validate_certs: "{{ harbor_ssl_verify | default(true) }}"
  loop: "{{ harbor_service_users }}"
  when: harbor_force_password_update | default(false)
  tags: ['harbor', 'auth', 'password-update']

- name: Create Harbor robot accounts for Jenkins
  uri:
    url: "{{ harbor_api_base_url }}/robots"
    method: POST
    user: "admin"
    password: "{{ vault_harbor_admin_password }}"
    force_basic_auth: yes
    body_format: json
    body:
      name: "{{ item.name }}"
      description: "{{ item.description }}"
      duration: "{{ item.duration | default(harbor_robot_token_duration) }}"
      level: "{{ item.level | default('project') }}"
      disable: false
      permissions:
        - kind: "project"
          namespace: "{{ item.project }}"
          access:
            - action: "pull"
              resource: "repository"
            - action: "push"
              resource: "repository"
            - action: "delete"
              resource: "artifact"
            - action: "read"
              resource: "helm-chart"
            - action: "create"
              resource: "helm-chart-version"
            - action: "delete"
              resource: "helm-chart-version"
            - action: "list"
              resource: "tag"
    status_code: [201, 409]
    validate_certs: "{{ harbor_ssl_verify | default(true) }}"
  loop: "{{ harbor_robot_accounts }}"
  register: harbor_robots_created
  tags: ['harbor', 'auth', 'robots']

- name: Save robot account credentials
  copy:
    content: |
      # Harbor Robot Account Credentials
      # Generated on {{ ansible_date_time.iso8601 }}
      
      {% for robot in harbor_robots_created.results %}
      {% if robot.status == 201 and robot.json is defined %}
      Robot: {{ robot.json.name }}
      Token: {{ robot.json.token }}
      Secret: {{ robot.json.secret }}
      Expires: {{ robot.json.expires_at }}
      ---
      {% endif %}
      {% endfor %}
    dest: "{{ harbor_config_dir }}/robot-credentials.txt"
    mode: '0600'
    owner: root
    group: root
  become: yes
  when: harbor_robots_created.changed
  tags: ['harbor', 'auth', 'robots']

- name: Configure Harbor LDAP authentication
  uri:
    url: "{{ harbor_api_base_url }}/configurations"
    method: PUT
    user: "admin"
    password: "{{ vault_harbor_admin_password }}"
    force_basic_auth: yes
    body_format: json
    body:
      auth_mode: "ldap_auth"
      ldap_url: "{{ vault_ldap_server }}"
      ldap_base_dn: "{{ vault_ldap_user_search_base }}"
      ldap_uid: "uid"
      ldap_search_dn: "{{ vault_ldap_bind_dn }}"
      ldap_search_password: "{{ vault_ldap_bind_password }}"
      ldap_filter: "(objectClass=person)"
      ldap_scope: 2  # LDAP_SCOPE_SUBTREE
      ldap_timeout: 5
      ldap_verify_cert: true
      ldap_group_base_dn: "{{ vault_ldap_group_search_base }}"
      ldap_group_filter: "(objectClass=groupOfNames)"
      ldap_group_gid: "cn"
      ldap_group_scope: 2
    validate_certs: "{{ harbor_ssl_verify | default(true) }}"
  when: 
    - harbor_ldap_enabled | default(false)
    - vault_ldap_server is defined
  tags: ['harbor', 'auth', 'ldap']

- name: Configure Harbor OIDC authentication
  uri:
    url: "{{ harbor_api_base_url }}/configurations"
    method: PUT
    user: "admin"
    password: "{{ vault_harbor_admin_password }}"
    force_basic_auth: yes
    body_format: json
    body:
      auth_mode: "oidc_auth"
      oidc_name: "{{ harbor_oidc_name }}"
      oidc_endpoint: "{{ harbor_oidc_endpoint }}"
      oidc_client_id: "{{ vault_harbor_oidc_client_id }}"
      oidc_client_secret: "{{ vault_harbor_oidc_client_secret }}"
      oidc_scope: "{{ harbor_oidc_scope }}"
      oidc_verify_cert: true
      oidc_auto_onboard: "{{ harbor_oidc_auto_onboard | default(false) }}"
      oidc_user_claim: "{{ harbor_oidc_user_claim | default('name') }}"
      oidc_groups_claim: "{{ harbor_oidc_groups_claim | default('groups') }}"
      oidc_admin_group: "{{ harbor_oidc_admin_group | default('harbor-admins') }}"
    validate_certs: "{{ harbor_ssl_verify | default(true) }}"
  when: 
    - harbor_oidc_enabled | default(false)
    - vault_harbor_oidc_client_id is defined
  tags: ['harbor', 'auth', 'oidc']

- name: Configure Harbor security settings
  uri:
    url: "{{ harbor_api_base_url }}/configurations"
    method: PUT
    user: "admin"
    password: "{{ vault_harbor_admin_password }}"
    force_basic_auth: yes
    body_format: json
    body:
      # Security settings
      token_expiration: "{{ harbor_token_expiration }}"
      robot_token_duration: "{{ harbor_robot_token_duration }}"
      
      # Self-registration settings
      self_registration: "{{ harbor_self_registration | default(false) }}"
      
      # Project creation restriction
      project_creation_restriction: "{{ harbor_project_creation_restriction | default('adminonly') }}"
      
      # Quota settings
      count_per_project: "{{ harbor_count_per_project | default(10000) }}"
      storage_per_project: "{{ harbor_storage_per_project | default('100GB') }}"
      
      # Scan settings
      scan_all_policy: "{{ harbor_scan_all_policy }}"
      
      # Notification settings
      email_from: "{{ harbor_email_from | default('harbor@company.com') }}"
      email_host: "{{ vault_email_smtp_host }}"
      email_port: "{{ vault_email_smtp_port }}"
      email_username: "{{ vault_email_smtp_username }}"
      email_password: "{{ vault_email_smtp_password }}"
      email_ssl: "{{ harbor_email_ssl | default(true) }}"
      email_insecure: "{{ harbor_email_insecure | default(false) }}"
    validate_certs: "{{ harbor_ssl_verify | default(true) }}"
  tags: ['harbor', 'auth', 'security-settings']

- name: Test Harbor authentication with service accounts
  uri:
    url: "{{ harbor_api_base_url }}/users/current"
    method: GET
    user: "{{ item.username }}"
    password: "{{ item.password }}"
    force_basic_auth: yes
    validate_certs: "{{ harbor_ssl_verify | default(true) }}"
  loop: "{{ harbor_service_users }}"
  register: harbor_auth_test
  failed_when: harbor_auth_test.status != 200
  tags: ['harbor', 'auth', 'test']

- name: Create Harbor webhook configurations
  uri:
    url: "{{ harbor_api_base_url }}/projects/{{ item.project_id }}/webhook/policies"
    method: POST
    user: "admin"
    password: "{{ vault_harbor_admin_password }}"
    force_basic_auth: yes
    body_format: json
    body:
      name: "{{ item.name }}"
      description: "{{ item.description }}"
      targets:
        - type: "http"
          address: "{{ item.webhook_url }}"
          auth_header: "{{ item.auth_header | default('') }}"
          skip_cert_verify: "{{ item.skip_cert_verify | default(false) }}"
      event_types: "{{ item.event_types }}"
      enabled: true
    status_code: [201, 409]
    validate_certs: "{{ harbor_ssl_verify | default(true) }}"
  loop: "{{ harbor_webhooks }}"
  when: harbor_webhooks is defined and harbor_webhooks | length > 0
  tags: ['harbor', 'auth', 'webhooks']

- name: Display Harbor authentication status
  debug:
    msg: |
      Harbor Authentication Configuration:
      
      Admin Authentication: {{ 'Success' if harbor_admin_auth.status == 200 else 'Failed' }}
      Service Users Created: {{ harbor_users_created.results | selectattr('status', 'equalto', 201) | list | length }}
      Robot Accounts Created: {{ harbor_robots_created.results | selectattr('status', 'equalto', 201) | list | length }}
      
      Authentication Methods:
      - LDAP: {{ 'Enabled' if harbor_ldap_enabled | default(false) else 'Disabled' }}
      - OIDC: {{ 'Enabled' if harbor_oidc_enabled | default(false) else 'Disabled' }}
      - Local Database: Enabled
      
      Security Settings:
      - Token Expiration: {{ harbor_token_expiration }} minutes
      - Robot Token Duration: {{ harbor_robot_token_duration }} days
      - Self Registration: {{ 'Enabled' if harbor_self_registration | default(false) else 'Disabled' }}
      - Project Creation: {{ harbor_project_creation_restriction | default('adminonly') }}
  tags: ['harbor', 'auth', 'info']