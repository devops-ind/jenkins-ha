---
# Tasks for harbor role

- name: Create Harbor system user
  user:
    name: harbor
    system: yes
    shell: /bin/false
    home: "{{ harbor_data_dir }}"
    create_home: no
  become: yes
  tags: ['harbor', 'users']

- name: Create Harbor directories
  file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
    owner: "{{ item.owner | default('harbor') }}"
    group: "{{ item.group | default('harbor') }}"
  loop:
    - { path: "{{ harbor_install_dir }}", mode: '0755', owner: 'root', group: 'root' }
    - { path: "{{ harbor_data_dir }}", mode: '0755' }
    - { path: "{{ harbor_log_dir }}", mode: '0755' }
    - { path: "{{ harbor_data_dir }}/registry", mode: '0755' }
    - { path: "{{ harbor_data_dir }}/database", mode: '0700' }
    - { path: "{{ harbor_data_dir }}/redis", mode: '0755' }
    - { path: "{{ harbor_ssl_dir }}", mode: '0755', owner: 'root', group: 'root' }
    - { path: "{{ harbor_config_dir }}", mode: '0755', owner: 'root', group: 'root' }
    - { path: "{{ harbor_backup_dir }}", mode: '0755' }
  become: yes
  tags: ['harbor', 'directories']

- name: Install Harbor dependencies
  package:
    name: "{{ item }}"
    state: present
  loop:
    - docker-compose
    - python3-docker
    - python3-requests
    - openssl
    - curl
    - jq
  become: yes
  tags: ['harbor', 'dependencies']

- name: Download Harbor installer
  get_url:
    url: "{{ harbor_download_url }}"
    dest: "/tmp/harbor-installer-{{ harbor_version }}.tgz"
    mode: '0644'
    checksum: "{{ harbor_installer_checksum | default(omit) }}"
    timeout: 300
  register: harbor_download
  tags: ['harbor', 'download']

- name: Extract Harbor installer
  unarchive:
    src: "/tmp/harbor-installer-{{ harbor_version }}.tgz"
    dest: "{{ harbor_install_dir }}"
    remote_src: yes
    extra_opts: [--strip-components=1]
    owner: root
    group: root
  when: harbor_download.changed
  become: yes
  tags: ['harbor', 'install']

# SSL/TLS Certificate setup
- name: Include SSL certificate tasks
  include_tasks: ssl-setup.yml
  when: harbor_ssl_enabled | default(true)
  tags: ['harbor', 'ssl']

# Security configuration
- name: Include security hardening tasks
  include_tasks: security-hardening.yml
  tags: ['harbor', 'security']

- name: Generate Harbor configuration
  template:
    src: harbor.yml.j2
    dest: "{{ harbor_install_dir }}/harbor.yml"
    backup: yes
    mode: '0644'
    owner: root
    group: root
  become: yes
  notify: restart harbor
  tags: ['harbor', 'config']

- name: Generate Harbor environment file
  template:
    src: harbor.env.j2
    dest: "{{ harbor_config_dir }}/harbor.env"
    mode: '0600'
    owner: root
    group: root
  become: yes
  tags: ['harbor', 'config']

- name: Check if Harbor is already installed
  stat:
    path: "{{ harbor_install_dir }}/common/config"
  register: harbor_installed
  tags: ['harbor', 'install']

- name: Validate Harbor configuration
  command: "{{ harbor_install_dir }}/prepare"
  args:
    chdir: "{{ harbor_install_dir }}"
  environment:
    HARBOR_CONFIG_FILE: "{{ harbor_install_dir }}/harbor.yml"
  become: yes
  when: not harbor_installed.stat.exists
  tags: ['harbor', 'install']

- name: Run Harbor installer with security features
  command: >
    {{ harbor_install_dir }}/install.sh
    --with-trivy
    --with-notary
    {% if harbor_metrics_enabled | default(true) %}--with-metrics{% endif %}
  args:
    chdir: "{{ harbor_install_dir }}"
  environment:
    HARBOR_CONFIG_FILE: "{{ harbor_install_dir }}/harbor.yml"
  become: yes
  when: not harbor_installed.stat.exists
  register: harbor_install_result
  tags: ['harbor', 'install']

# Post-installation configuration
- name: Include post-installation tasks
  include_tasks: post-install.yml
  when: harbor_install_result.changed or harbor_force_config | default(false)
  tags: ['harbor', 'post-install']

# Authentication and user management
- name: Include authentication tasks
  include_tasks: authentication.yml
  tags: ['harbor', 'auth']

# Project and RBAC setup
- name: Include project management tasks
  include_tasks: projects.yml
  tags: ['harbor', 'projects']

# Backup configuration
- name: Include backup tasks
  include_tasks: backup.yml
  when: harbor_backup_enabled | default(true)
  tags: ['harbor', 'backup']

# Monitoring setup
- name: Include monitoring tasks
  include_tasks: monitoring.yml
  when: harbor_monitoring_enabled | default(true)
  tags: ['harbor', 'monitoring']

- name: Wait for Harbor to be ready
  uri:
    url: "http://{{ harbor_hostname }}:{{ harbor_port }}/api/v2.0/systeminfo"
    method: GET
    status_code: 200
  register: harbor_health
  until: harbor_health.status == 200
  retries: 30
  delay: 10
  when: harbor_install_result.changed or not harbor_installed.stat.exists

- name: Login to Harbor API
  uri:
    url: "http://{{ harbor_hostname }}:{{ harbor_port }}/c/login"
    method: POST
    body_format: form-urlencoded
    body:
      principal: admin
      password: "{{ harbor_admin_password }}"
    status_code: 200
  register: harbor_login
  no_log: true

- name: Create Harbor projects
  uri:
    url: "http://{{ harbor_hostname }}:{{ harbor_port }}/api/v2.0/projects"
    method: POST
    headers:
      Content-Type: "application/json"
      Cookie: "{{ harbor_login.set_cookie }}"
    body_format: json
    body:
      project_name: "{{ item.name }}"
      public: "{{ item.public }}"
      metadata:
        auto_scan: "{{ item.auto_scan | string | lower }}"
        prevent_vul: "{{ item.prevent_vul | string | lower }}"
    status_code: [201, 409]  # 409 if project already exists
  loop: "{{ harbor_projects }}"
  no_log: true

- name: Create Harbor users
  uri:
    url: "http://{{ harbor_hostname }}:{{ harbor_port }}/api/v2.0/users"
    method: POST
    headers:
      Content-Type: "application/json"
      Cookie: "{{ harbor_login.set_cookie }}"
    body_format: json
    body:
      username: "{{ item.username }}"
      email: "{{ item.email }}"
      password: "{{ item.password }}"
      realname: "{{ item.realname }}"
    status_code: [201, 409]  # 409 if user already exists
  loop: "{{ harbor_users }}"
  no_log: true

- name: Configure Harbor scan policy
  uri:
    url: "http://{{ harbor_hostname }}:{{ harbor_port }}/api/v2.0/system/scanAll/schedule"
    method: PUT
    headers:
      Content-Type: "application/json"
      Cookie: "{{ harbor_login.set_cookie }}"
    body_format: json
    body:
      schedule:
        type: "{{ harbor_scan_all_policy.type }}"
        cron: "0 {{ harbor_scan_all_policy.parameter.daily_time.split(':')[1] }} {{ harbor_scan_all_policy.parameter.daily_time.split(':')[0] }} * * *"
    status_code: 200
  when: harbor_scan_all_policy is defined
  no_log: true

- name: Setup Harbor logrotate
  template:
    src: harbor-logrotate.j2
    dest: /etc/logrotate.d/harbor

- name: Create Harbor systemd service
  template:
    src: harbor.service.j2
    dest: /etc/systemd/system/harbor.service
  notify:
    - reload systemd
    - restart harbor

- name: Enable Harbor service
  systemd:
    name: harbor
    enabled: yes
    daemon_reload: yes

- name: Configure Docker to trust Harbor registry
  template:
    src: docker-daemon-harbor.json.j2
    dest: /etc/docker/daemon.json
    backup: yes
  notify: restart docker
  when: not harbor_ssl_enabled
