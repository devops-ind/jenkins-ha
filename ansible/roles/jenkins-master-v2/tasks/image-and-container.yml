---
# Simplified Jenkins Master - Combined Image Building and Container Deployment
# Consolidates: custom-image-build.yml (287 lines) + container.yml (12 lines) + volumes.yml (26 lines) + volumes/docker.yml (33 lines) + containers/docker.yml (109 lines)
# Total: ~467 lines â†’ ~200 lines (57% reduction)

# ====================================
# VOLUME MANAGEMENT PHASE
# ====================================

- name: Create Docker volumes for Jenkins teams
  block:
    - name: Create Jenkins volumes for blue-green environments
      community.docker.docker_volume:
        name: "jenkins-{{ item.0.team_name }}-{{ item.1 }}-home"
        driver: "local"
        state: present
        labels:
          team: "{{ item.0.team_name }}"
          environment: "{{ item.1 }}"
          managed_by: "ansible"
      with_nested:
        - "{{ jenkins_teams_config }}"
        - ['blue', 'green']
      loop_control:
        label: "{{ item.0.team_name }}-{{ item.1 }}"

    - name: Create Jenkins shared volumes for teams
      community.docker.docker_volume:
        name: "jenkins-{{ item.team_name }}-shared"
        driver: "local"
        state: present
        labels:
          team: "{{ item.team_name }}"
          type: "shared"
          managed_by: "ansible"
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}-shared"
  tags: ['volumes', 'docker']

# ====================================
# CUSTOM IMAGE BUILDING PHASE
# ====================================

- name: Build custom Jenkins images for teams
  block:
    - name: Create custom image build directories
      file:
        path: "{{ jenkins_master_custom_build_dir }}/{{ item.0.team_name }}/{{ item.1 }}"
        state: directory
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_user }}"
        mode: '0755'
        recurse: yes
      with_nested:
        - "{{ jenkins_teams_config }}"
        - ["casc-configs", "seed-jobs", "scripts"]
      loop_control:
        label: "{{ item.0.team_name }}/{{ item.1 }}"

    - name: Generate team-specific Dockerfiles
      template:
        src: Dockerfile.team-custom.j2
        dest: "{{ jenkins_master_custom_build_dir }}/{{ item.team_name }}/Dockerfile"
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_user }}"
        mode: '0644'
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}"
      vars:
        jenkins_current_team: "{{ item }}"

    - name: Generate team-specific plugins list
      template:
        src: team-plugins.txt.j2
        dest: "{{ jenkins_master_custom_build_dir }}/{{ item.team_name }}/plugins.txt"
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_user }}"
        mode: '0644'
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}"
      vars:
        jenkins_current_team: "{{ item }}"
      when: jenkins_master_team_plugins_enabled | default(true)

    - name: Generate team-specific JCasC configurations
      template:
        src: casc-config-team.yml.j2
        dest: "{{ jenkins_master_custom_build_dir }}/{{ item.team_name }}/casc-configs/jenkins.yml"
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_user }}"
        mode: '0644'
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}"
      vars:
        jenkins_current_team: "{{ item }}"
      when: jenkins_master_team_configs_enabled | default(true)

    - name: Build custom Jenkins images
      community.docker.docker_image:
        name: "{{ jenkins_master_custom_image_prefix }}-{{ item.team_name }}"
        tag: "{{ jenkins_master_image_tag }}"
        source: build
        build:
          path: "{{ jenkins_master_custom_build_dir }}/{{ item.team_name }}"
          dockerfile: Dockerfile
          pull: yes
        state: present
        force_source: "{{ jenkins_master_force_custom_rebuild | default(false) }}"
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ jenkins_master_custom_image_prefix }}-{{ item.team_name }}:{{ jenkins_master_image_tag }}"
      register: custom_image_build
  when: jenkins_master_build_custom_images | default(true)
  tags: ['custom-images', 'build']

# ====================================
# CONTAINER DEPLOYMENT PHASE
# ====================================

- name: Deploy Jenkins blue-green containers
  block:
    - name: Deploy Jenkins Blue Environment containers
      community.docker.docker_container:
        name: "jenkins-{{ item.team_name }}-blue"
        image: "{{ _jenkins_image }}"
        state: "{{ 'started' if item.active_environment == 'blue' else 'stopped' }}"
        restart_policy: "{{ jenkins_master_restart_policy }}"
        networks:
          - name: "{{ jenkins_master_network_name }}"
        ports: "{{ _blue_ports if item.active_environment == 'blue' else [] }}"
        volumes: "{{ _blue_volumes }}"
        env: "{{ _jenkins_env_vars | combine({'JENKINS_ENVIRONMENT': 'blue', 'JENKINS_TEAM': item.team_name}) }}"
        memory: "{{ item.resources.memory }}"
        cpus: "{{ item.resources.cpu }}"
        log_driver: "{{ jenkins_master_log_driver }}"
        log_options: "{{ _log_options }}"
        labels:
          service: "jenkins-master"
          managed_by: "ansible"
          team: "{{ item.team_name }}"
          environment: "blue"
          active: "{{ (item.active_environment == 'blue') | string }}"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:{{ jenkins_master_port }}/login"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 60s
      vars:
        _jenkins_env_vars: "{{ jenkins_master_env_vars | combine(item.env_vars | default({})) }}"
        _jenkins_image: >-
          {%- if jenkins_master_build_custom_images | default(true) -%}
            {{ jenkins_master_custom_image_prefix }}-{{ item.team_name }}:{{ jenkins_master_image_tag }}
          {%- else -%}
            {{ jenkins_master_image_registry }}/{{ jenkins_master_image_name }}:{{ jenkins_master_image_tag }}
          {%- endif -%}
        _blue_ports:
          - "{{ item.ports.web | string }}:{{ jenkins_master_port | string }}"
          - "{{ item.ports.agent | string }}:{{ jenkins_jnlp_port | string }}"
        _blue_volumes:
          - "jenkins-{{ item.team_name }}-blue-home:{{ jenkins_master_container_home }}"
          - "jenkins-{{ item.team_name }}-shared:{{ jenkins_master_shared_path }}"
          - "{{ jenkins_master_socket_path_docker }}:{{ jenkins_master_socket_path_docker }}:ro"
        _log_options: "{{ {'max-size': jenkins_master_log_max_size, 'max-file': jenkins_master_log_max_files} if jenkins_master_log_driver == 'json-file' else {} }}"
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "jenkins-{{ item.team_name }}-blue"
      register: jenkins_blue_containers

    - name: Deploy Jenkins Green Environment containers
      community.docker.docker_container:
        name: "jenkins-{{ item.team_name }}-green"
        image: "{{ _jenkins_image }}"
        state: "{{ 'started' if item.active_environment == 'green' else 'stopped' }}"
        restart_policy: "{{ jenkins_master_restart_policy }}"
        networks:
          - name: "{{ jenkins_master_network_name }}"
        ports: "{{ _green_ports if item.active_environment == 'green' else [] }}"
        volumes: "{{ _green_volumes }}"
        env: "{{ _jenkins_env_vars | combine({'JENKINS_ENVIRONMENT': 'green', 'JENKINS_TEAM': item.team_name}) }}"
        memory: "{{ item.resources.memory }}"
        cpus: "{{ item.resources.cpu }}"
        log_driver: "{{ jenkins_master_log_driver }}"
        log_options: "{{ _log_options }}"
        labels:
          service: "jenkins-master"
          managed_by: "ansible"
          team: "{{ item.team_name }}"
          environment: "green"
          active: "{{ (item.active_environment == 'green') | string }}"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:{{ jenkins_master_port }}/login"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 60s
      vars:
        _jenkins_env_vars: "{{ jenkins_master_env_vars | combine(item.env_vars | default({})) }}"
        _jenkins_image: >-
          {%- if jenkins_master_build_custom_images | default(true) -%}
            {{ jenkins_master_custom_image_prefix }}-{{ item.team_name }}:{{ jenkins_master_image_tag }}
          {%- else -%}
            {{ jenkins_master_image_registry }}/{{ jenkins_master_image_name }}:{{ jenkins_master_image_tag }}
          {%- endif -%}
        _green_ports:
          - "{{ item.ports.web | string }}:{{ jenkins_master_port | string }}"
          - "{{ item.ports.agent | string }}:{{ jenkins_jnlp_port | string }}"
        _green_volumes:
          - "jenkins-{{ item.team_name }}-green-home:{{ jenkins_master_container_home }}"
          - "jenkins-{{ item.team_name }}-shared:{{ jenkins_master_shared_path }}"
          - "{{ jenkins_master_socket_path_docker }}:{{ jenkins_master_socket_path_docker }}:ro"
        _log_options: "{{ {'max-size': jenkins_master_log_max_size, 'max-file': jenkins_master_log_max_files} if jenkins_master_log_driver == 'json-file' else {} }}"
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "jenkins-{{ item.team_name }}-green"
      register: jenkins_green_containers

    - name: Wait for containers to be operational
      pause:
        seconds: "{{ jenkins_master_startup_wait_time }}"
  tags: ['containers', 'deploy']

- name: Image and container deployment phase complete
  debug:
    msg: |
      ====================================
      Image and Container Deployment Complete
      ====================================
      Custom Images Built: {{ jenkins_teams_config | length if jenkins_master_build_custom_images else 0 }}
      Blue Containers: {{ jenkins_blue_containers.results | selectattr('changed', 'equalto', true) | list | length }}
      Green Containers: {{ jenkins_green_containers.results | selectattr('changed', 'equalto', true) | list | length }}
      Active Environments: {{ jenkins_teams_config | selectattr('active_environment', 'defined') | map(attribute='active_environment') | list | join(', ') }}
      ====================================
  tags: ['images', 'containers']