---
# Blue-Green Deployment Synchronization Fix
# Ensures Jenkins containers and HAProxy configuration are synchronized
# when team active_environment settings change

- name: Blue-Green deployment synchronization
  debug:
    msg: |
      ====================================================
      Blue-Green Deployment Synchronization
      ====================================================
      Ensuring Jenkins containers match team active_environment settings
      and HAProxy configuration is updated accordingly.
      ====================================================

- name: Detect environment changes for teams
  block:
    - name: Get current running Jenkins containers
      command: docker ps --filter "name=jenkins-" --format "{% raw %}{{.Names}}{% endraw %}"
      register: current_containers
      changed_when: false
      failed_when: false
      
    - name: Determine expected active containers based on team configuration
      set_fact:
        expected_active_containers: >
          {%- set containers = [] -%}
          {%- for team in jenkins_teams_config -%}
            {%- set _ = containers.append('jenkins-' + team.team_name + '-' + (team.active_environment | default('blue'))) -%}
          {%- endfor -%}
          {{ containers }}
          
    - name: Identify containers that need to be started
      set_fact:
        containers_to_start: >
          {%- set to_start = [] -%}
          {%- for expected in expected_active_containers -%}
            {%- if expected not in (current_containers.stdout_lines | default([])) -%}
              {%- set _ = to_start.append(expected) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ to_start }}
          
    - name: Identify containers that need to be stopped  
      set_fact:
        containers_to_stop: >
          {%- set to_stop = [] -%}
          {%- for team in jenkins_teams_config -%}
            {%- set inactive_env = 'green' if (team.active_environment | default('blue')) == 'blue' else 'blue' -%}
            {%- set inactive_container = 'jenkins-' + team.team_name + '-' + inactive_env -%}
            {%- if inactive_container in (current_containers.stdout_lines | default([])) -%}
              {%- set _ = to_stop.append(inactive_container) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ to_stop }}
          
    - name: Display synchronization plan
      debug:
        msg: |
          Synchronization Plan:
          Expected Active: {{ expected_active_containers | join(', ') }}
          Currently Running: {{ current_containers.stdout_lines | default([]) | join(', ') }}
          Containers to Start: {{ containers_to_start | join(', ') if containers_to_start else 'None' }}
          Containers to Stop: {{ containers_to_stop | join(', ') if containers_to_stop else 'None' }}
  tags: ['blue-green', 'sync']
  
- name: Execute container synchronization
  block:
    - name: Stop inactive environment containers
      community.docker.docker_container:
        name: "{{ item }}"
        state: stopped
        force_kill: yes
      loop: "{{ containers_to_stop }}"
      when: containers_to_stop | length > 0
      register: containers_stopped
      
    - name: Start active environment containers that are not running
      community.docker.docker_container:
        name: "jenkins-{{ item.team_name }}-{{ item.active_environment | default('blue') }}"
        image: "{{ _jenkins_image }}"
        state: started
        restart_policy: "{{ jenkins_master_restart_policy }}"
        networks:
          - name: "{{ jenkins_master_network_name }}"
        ports: "{{ _active_ports }}"
        volumes: "{{ _active_volumes }}"
        env: "{{ _jenkins_env_vars | combine({'JENKINS_ENVIRONMENT': item.active_environment | default('blue'), 'JENKINS_TEAM': item.team_name}) }}"
        memory: "{{ item.resources.memory }}"
        cpus: "{{ item.resources.cpu }}"
        log_driver: "{{ jenkins_master_log_driver }}"
        log_options: "{{ _log_options }}"
        labels:
          service: "jenkins-master"
          managed_by: "ansible"
          team: "{{ item.team_name }}"
          environment: "{{ item.active_environment | default('blue') }}"
          active: "true"
          deployment_mode: "resource-optimized"
          sync_timestamp: "{{ ansible_date_time.epoch }}"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:{{ jenkins_master_port }}/login"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 60s
      vars:
        _jenkins_env_vars: "{{ jenkins_master_env_vars | combine(item.env_vars | default({})) }}"
        _jenkins_image: >
          {%- if jenkins_master_build_custom_images | default(true) -%}
            {{ jenkins_master_custom_image_prefix }}-{{ item.team_name }}:{{ jenkins_master_image_tag }}
          {%- else -%}
            {{ jenkins_master_image_registry }}/{{ jenkins_master_image_name }}:{{ jenkins_master_image_tag }}
          {%- endif -%}
        _active_ports:
          - "{% if item.active_environment | default('blue') == 'blue' %}{{ item.ports.web }}{% else %}{{ item.ports.web + 100 }}{% endif %}:{{ jenkins_master_port }}"
          - "{% if item.active_environment | default('blue') == 'blue' %}{{ item.ports.agent }}{% else %}{{ item.ports.agent + 100 }}{% endif %}:{{ jenkins_jnlp_port }}"
        _active_volumes:
          # MAIN JENKINS HOME: Environment-specific base with smart sharing via symlinks
          - "jenkins-{{ item.team_name }}-{{ item.active_environment | default('blue') }}-home:{{ jenkins_master_container_home }}"
          # SHARED STORAGE ACCESS: Mount shared storage to allow data synchronization
          - "{{ shared_storage_path | default('/opt/jenkins-shared') }}:/shared:rw"
          # DOCKER SOCKET: Read-only access for Docker-in-Docker agents
          - "{{ jenkins_master_socket_path_docker }}:{{ jenkins_master_socket_path_docker }}:ro"
        _log_options: "{{ {'max-size': jenkins_master_log_max_size, 'max-file': jenkins_master_log_max_files} if jenkins_master_log_driver == 'json-file' else {} }}"
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "jenkins-{{ item.team_name }}-{{ item.active_environment | default('blue') }}"
      when: "'jenkins-' + item.team_name + '-' + (item.active_environment | default('blue')) in containers_to_start"
      register: containers_started
      
    - name: Wait for newly started containers to be operational
      pause:
        seconds: "{{ jenkins_master_startup_wait_time }}"
      when: (containers_started.results | selectattr('changed', 'equalto', true) | list | length) > 0
        
  tags: ['blue-green', 'sync', 'containers']
  
- name: Verify synchronization success
  block:
    - name: Get final container status
      command: docker ps --filter "name=jenkins-" --format "{% raw %}{{.Names}}\t{{.Status}}\t{{.Ports}}{% endraw %}"
      register: final_containers
      changed_when: false
      
    - name: Verify each team has correct active environment running
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:{% if item.active_environment | default('blue') == 'blue' %}{{ item.ports.web }}{% else %}{{ item.ports.web + 100 }}{% endif %}/login"
        method: GET
        status_code: [200, 403]
        timeout: 10
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}-{{ item.active_environment | default('blue') }}"
      register: container_health_checks
      failed_when: false
      
    - name: Display synchronization results
      debug:
        msg: |
          ====================================================
          Blue-Green Synchronization Results
          ====================================================
          
          Final Container Status:
          {{ final_containers.stdout }}
          
          Health Check Results:
          {% for result in container_health_checks.results %}
          • {{ jenkins_teams_config[loop.index0].team_name }} ({{ jenkins_teams_config[loop.index0].active_environment | default('blue') }}): {% if result.status is defined and result.status in [200, 403] %}✅ HEALTHY{% else %}❌ FAILED{% endif %}
          {% endfor %}
          
          Synchronization Status: {% if (container_health_checks.results | selectattr('status', 'defined') | selectattr('status', 'in', [200, 403]) | list | length) == (jenkins_teams_config | length) %}✅ SUCCESS{% else %}⚠️  PARTIAL{% endif %}
          ====================================================
          
    - name: Trigger HAProxy configuration update
      set_fact:
        jenkins_containers_synchronized: true
        sync_timestamp: "{{ ansible_date_time.epoch }}"
      notify: 
        - restart haproxy container
        - wait for haproxy ready
        
  tags: ['blue-green', 'sync', 'verify']
  
- name: Blue-Green synchronization complete
  debug:
    msg: |
      ====================================================
      Blue-Green Deployment Synchronization Complete
      ====================================================
      
      Teams synchronized: {{ jenkins_teams_config | length }}
      Containers stopped: {{ containers_stopped.results | selectattr('changed', 'equalto', true) | list | length if containers_stopped is defined else 0 }}
      Containers started: {{ containers_started.results | selectattr('changed', 'equalto', true) | list | length if containers_started is defined else 0 }}
      
      Next: HAProxy configuration will be updated automatically
      ====================================================
  tags: ['blue-green', 'sync']