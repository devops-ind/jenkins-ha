---
# Shared Storage Integration for Jenkins HA
# Synchronizes data between container volumes and shared storage
# Ensures consistency across blue-green environments

- name: Shared storage integration for Jenkins teams
  block:
    - name: Determine storage configuration
      set_fact:
        # Storage availability checks
        shared_storage_available: "{{ shared_storage_enabled | default(false) }}"
        backup_storage_available: "{{ backup_storage_enabled | default(true) }}"
        
        # Storage path selection based on preference
        primary_storage_path: "{{ shared_storage_path if storage_preference == 'shared' else backup_storage_path }}"
        fallback_storage_path: "{{ backup_storage_path if storage_preference == 'shared' else shared_storage_path }}"
      
    - name: Test shared storage accessibility
      stat:
        path: "{{ shared_storage_path }}"
      register: shared_storage_stat
      when: shared_storage_enabled | default(false)
      failed_when: false
      
    - name: Test backup storage accessibility  
      stat:
        path: "{{ backup_storage_path }}"
      register: backup_storage_stat
      failed_when: false
      
    - name: Create backup storage directory if needed
      file:
        path: "{{ backup_storage_path }}"
        state: directory
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_group }}"
        mode: '0755'
      become: yes
      when: 
        - backup_storage_enabled | default(true)
        - backup_storage_stat is defined
        - not (backup_storage_stat.stat.exists | default(false))
    
    - name: Determine final storage path
      set_fact:
        storage_path: |-
          {%- if storage_preference == 'auto' -%}
            {%- if shared_storage_enabled and (shared_storage_stat.stat.exists | default(false)) and (shared_storage_stat.stat.isdir | default(false)) and (shared_storage_stat.stat.writeable | default(false)) -%}
              {{ shared_storage_path }}
            {%- elif backup_storage_enabled -%}
              {{ backup_storage_path }}
            {%- else -%}
              {{ backup_storage_path }}
            {%- endif -%}
          {%- elif storage_preference == 'shared' -%}
            {%- if shared_storage_enabled and (shared_storage_stat.stat.exists | default(false)) -%}
              {{ shared_storage_path }}
            {%- elif storage_fallback_enabled and backup_storage_enabled -%}
              {{ backup_storage_path }}
            {%- else -%}
              {{ shared_storage_path }}
            {%- endif -%}
          {%- else -%}
            {{ backup_storage_path }}
          {%- endif -%}

    - name: Determine storage type
      set_fact:
        storage_type: "{{ 'shared' if storage_path == shared_storage_path else 'backup' }}"
    
    - name: Display storage configuration
      debug:
        msg: |
          ==========================================
          Jenkins Storage Configuration
          ==========================================
          Storage Preference: {{ storage_preference }}
          Selected Storage Type: {{ storage_type }}
          Selected Storage Path: {{ storage_path }}
          Fallback Enabled: {{ storage_fallback_enabled | default(true) }}
          
          Storage Status:
          {% if shared_storage_enabled | default(false) %}
          • Shared Storage: {{ 'Available' if (shared_storage_stat.stat.exists | default(false)) else 'Not Available' }} ({{ shared_storage_path }})
          {% endif %}
          • Backup Storage: {{ 'Available' if (backup_storage_stat.stat.exists | default(false)) else 'Will be created' }} ({{ backup_storage_path }})
          ==========================================

    - name: Create scripts directory
      file:
        path: "/var/jenkins/scripts"
        state: directory
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_group }}"
        mode: '0755'
      become: yes

    - name: Create data synchronization scripts for teams
      template:
        src: sync-jenkins-data.sh.j2
        dest: "/var/jenkins/scripts/sync-{{ item.team_name }}-data.sh"
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_group }}"
        mode: '0755'
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}"
      tags: ['sync-scripts']

    - name: Perform initial data synchronization from containers to shared storage
      block:
        - name: Create initial sync scripts for teams
          template:
            src: initial-sync.sh.j2
            dest: "/tmp/initial-sync-{{ item.team_name }}.sh"
            owner: "{{ jenkins_user }}"
            group: "{{ jenkins_group }}"
            mode: '0755'
          loop: "{{ jenkins_teams_config }}"
          loop_control:
            label: "{{ item.team_name }}"
          become: yes
          when: sync_enabled | default(true)

        - name: Execute initial data synchronization for each team
          command: "/tmp/initial-sync-{{ item.team_name }}.sh"
          loop: "{{ jenkins_teams_config }}"
          loop_control:
            label: "{{ item.team_name }}-{{ item.active_environment | default('blue') }}"
          register: initial_sync_results
          become: yes
          when: sync_enabled | default(true)
          failed_when: false  # Don't fail deployment if sync fails
          
        - name: Cleanup initial sync scripts
          file:
            path: "/tmp/initial-sync-{{ item.team_name }}.sh"
            state: absent
          loop: "{{ jenkins_teams_config }}"
          loop_control:
            label: "{{ item.team_name }}"
          become: yes
          when: sync_enabled | default(true)

        - name: Display initial synchronization results
          debug:
            msg: |
              ====================================
              Initial Data Synchronization Results
              ====================================
              {% for result in initial_sync_results.results %}
              {{ result.item.team_name }}: {{ 'Completed' if result.rc == 0 else 'Failed (non-blocking)' }}
              {% endfor %}
              ====================================
              Note: Sync failures are non-blocking and won't prevent deployment
          tags: ['sync-status']
          when: initial_sync_results is defined

    - name: Setup continuous data synchronization (cron-based)
      cron:
        name: "Jenkins {{ item.team_name }} data sync"
        minute: "{{ sync_interval | default('*/5') }}"
        job: "/var/jenkins/scripts/sync-{{ item.team_name }}-data.sh"
        user: "{{ jenkins_user }}"
        state: present
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}"
      when: sync_enabled | default(true)
      tags: ['sync-cron']

    - name: Create shared storage health monitor script
      template:
        src: monitor-shared-storage.sh.j2
        dest: "/var/jenkins/scripts/monitor-shared-storage.sh"
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_group }}"
        mode: '0755'
      tags: ['health-monitor']

    - name: Setup shared storage health monitoring
      cron:
        name: "Jenkins shared storage health check"
        minute: "*/{{ storage_health_check_interval | default(60) // 60 }}"  # Convert seconds to minutes
        job: "/var/jenkins/scripts/monitor-shared-storage.sh"
        user: "{{ jenkins_user }}"
        state: present
      when: storage_monitoring_enabled | default(true)
      tags: ['health-cron']

    - name: Create data consistency validation script
      template:
        src: validate-data-consistency.sh.j2
        dest: "/var/jenkins/scripts/validate-{{ item.team_name }}-consistency.sh"
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_group }}"
        mode: '0755'
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}"
      tags: ['validation-scripts']

    - name: Test storage integration
      command: "test -w {{ storage_path }}/{{ item.team_name }}"
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}"
      register: storage_tests
      changed_when: false
      failed_when: false
      tags: ['integration-test']

    - name: Display storage integration status
      debug:
        msg: |
          ====================================================
          Jenkins Storage Integration Status
          ====================================================
          Storage Type: {{ storage_type | upper }}
          Storage Path: {{ storage_path }}
          Sync Enabled: {{ sync_enabled | default(true) }}
          Sync Interval: {{ sync_interval | default('*/5') }} minutes
          Health Monitoring: {{ storage_monitoring_enabled | default(true) }}
          
          Configuration:
          • Storage Preference: {{ storage_preference }}
          • Fallback Enabled: {{ storage_fallback_enabled | default(true) }}
          {% if shared_storage_enabled | default(false) %}
          • Shared Storage: {{ shared_storage_path }} ({{ 'Active' if storage_type == 'shared' else 'Available' if (shared_storage_stat.stat.exists | default(false)) else 'Not Available' }})
          {% endif %}
          • Backup Storage: {{ backup_storage_path }} ({{ 'Active' if storage_type == 'backup' else 'Available' }})
          
          Team Integration Status:
          {% for team in jenkins_teams_config %}
          • {{ team.team_name }}: {{ 'Accessible' if storage_tests.results[loop.index0].rc == 0 else 'Issues Detected' }}
          {% endfor %}
          
          Data Types Synchronized:
          ✅ jobs (job configurations)
          ✅ workspace (build workspaces) 
          ✅ builds (build artifacts and history)
          ✅ userContent (user-uploaded content)
          ✅ secrets (encrypted credentials)
          
          Excluded (Environment-Specific):
          ❌ plugins (isolated for safe upgrades)
          ❌ logs (environment-specific logging)
          ❌ war (Jenkins runtime isolation)
          ====================================================
      tags: ['integration-status']

  when: shared_storage_enabled | default(false) or backup_storage_enabled | default(true)
  tags: ['storage-integration']