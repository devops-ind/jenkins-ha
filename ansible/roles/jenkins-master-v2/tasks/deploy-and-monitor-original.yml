---
# Simplified Jenkins Master - Combined Blue-Green Deployment and Health Monitoring
# Consolidates: blue-green.yml (79 lines) + health-check.yml (58 lines) + cleanup.yml (79 lines)
# Total: ~216 lines → ~150 lines (31% reduction)

# ====================================
# DEBUG: VERIFICATION HOST RESOLUTION
# ====================================

- name: Debug verification host resolution
  debug:
    msg: |
      ═══════════════════════════════════════════════════════════════════
      JENKINS VERIFICATION HOST DEBUG
      ═══════════════════════════════════════════════════════════════════
      deployment_mode: {{ deployment_mode | default('UNDEFINED') }}
      deployment_environment: {{ deployment_environment | default('UNDEFINED') }}
      ansible_virtualization_type: {{ ansible_virtualization_type | default('UNDEFINED') }}
      ansible_connection: {{ ansible_connection | default('UNDEFINED') }}
      ansible_default_ipv4.address: {{ ansible_default_ipv4.address | default('UNDEFINED') }}
      inventory_hostname: {{ inventory_hostname | default('UNDEFINED') }}
      ansible_host: {{ hostvars[inventory_hostname]['ansible_host'] | default('UNDEFINED') }}
      ───────────────────────────────────────────────────────────────────
      RESOLVED jenkins_verification_host: {{ jenkins_verification_host }}
      ═══════════════════════════════════════════════════════════════════
  tags: ['always', 'debug']

# ====================================
# BLUE-GREEN DEPLOYMENT MANAGEMENT
# ====================================

- name: Generate blue-green management scripts
  block:
    - name: Create blue-green state tracking files
      template:
        src: blue-green-state.json.j2
        dest: "{{ jenkins_home_dir }}/{{ item.team_name }}/blue-green-state.json"
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_user }}"
        mode: '0644'
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}"
      vars:
        jenkins_master_config: "{{ item }}"

    - name: Generate team-specific blue-green management scripts
      template:
        src: "{{ item.template }}"
        dest: "{{ jenkins_home_dir }}/scripts/{{ item.name }}-{{ item.team_name }}.sh"
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_user }}"
        mode: '0755'
      loop: >-
        {%- set script_templates = [
          {'template': 'blue-green-switch.sh.j2', 'name': 'blue-green-switch'},
          {'template': 'zero-downtime-blue-green-switch.sh.j2', 'name': 'zero-downtime-blue-green-switch'},
          {'template': 'blue-green-healthcheck.sh.j2', 'name': 'blue-green-healthcheck'},
          {'template': 'health-monitor.sh.j2', 'name': 'health-monitor'}
        ] -%}
        {%- set result = [] -%}
        {%- for team in jenkins_teams_config -%}
          {%- for script in script_templates -%}
            {%- set _ = result.append(team | combine({'template': script.template, 'name': script.name})) -%}
          {%- endfor -%}
        {%- endfor -%}
        {{ result }}
      loop_control:
        label: "{{ item.team_name }}-{{ item.name }}"
      vars:
        jenkins_current_team: "{{ item }}"
  tags: ['blue-green', 'scripts']

# ====================================
# HEALTH MONITORING AND VALIDATION
# ====================================

- name: Comprehensive health monitoring for all teams
  block:
    - name: Debug container status before health check
      shell: |
        echo "=== JENKINS CONTAINER DEBUG ==="
        docker ps -a --filter "name=jenkins-{{ item.team_name }}" --format "table {% raw %}{{.Names}}\t{{.Status}}\t{{.Ports}}{% endraw %}"
        
        echo "=== DETAILED CONTAINER INSPECT ==="
        docker inspect "jenkins-{{ item.team_name }}-{{ item.active_environment }}" --format='{% raw %}
        State: {{.State.Status}}
        Health: {{.State.Health.Status}}
        RestartCount: {{.RestartCount}}
        ExitCode: {{.State.ExitCode}}
        Error: {{.State.Error}}
        Ports: {{range $p, $conf := .NetworkSettings.Ports}}{{$p}} -> {{(index $conf 0).HostPort}} {{end}}
        {% endraw %}' 2>/dev/null || echo "Container not found or inspect failed"
        
        echo "=== PORT CHECK ==="
        if command -v netstat >/dev/null 2>&1; then
          netstat -tuln | grep ":{{ item.ports.web }}" || echo "Port {{ item.ports.web }} not listening"
        elif command -v ss >/dev/null 2>&1; then
          ss -tuln | grep ":{{ item.ports.web }}" || echo "Port {{ item.ports.web }} not listening"
        else
          echo "No netstat or ss available"
        fi
        
        echo "=== CONTAINER LOGS (last 20 lines) ==="
        docker logs --tail 20 "jenkins-{{ item.team_name }}-{{ item.active_environment }}" 2>&1 || echo "No logs available"
        
        echo "=== JAVA PROCESS CHECK ==="
        docker exec "jenkins-{{ item.team_name }}-{{ item.active_environment }}" ps aux 2>/dev/null | grep -E "(java|jenkins)" || echo "No java process found or container not accessible"
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}:{{ item.ports.web }}"
      register: container_debug
      failed_when: false

    - name: Display container debug info
      debug:
        msg: "{{ container_debug.results | map(attribute='stdout_lines') | list }}"

    - name: Test basic connectivity to Jenkins ports
      shell: |
        echo "=== TESTING CONNECTIVITY ==="
        echo "Configured Host: {{ jenkins_verification_host }}"
        echo "Port: {{ item.ports.web }}"
        echo "Full URL: http://{{ jenkins_verification_host }}:{{ item.ports.web }}/login"
        
        # Test multiple hosts to find what works
        for test_host in "{{ jenkins_verification_host }}" "localhost" "127.0.0.1" "{{ ansible_default_ipv4.address | default('localhost') }}"; do
          echo "=== TESTING HOST: $test_host ==="
          
          # Test if port is reachable
          if command -v nc >/dev/null 2>&1; then
            echo "Testing with netcat..."
            timeout 5 nc -z "$test_host" {{ item.ports.web }} && echo "✅ Port $test_host:{{ item.ports.web }} reachable" || echo "❌ Port $test_host:{{ item.ports.web }} NOT reachable"
          fi
          
          # Try curl to see what we get
          echo "Testing with curl..."
          curl_result=$(curl -s --connect-timeout 5 --max-time 10 "http://$test_host:{{ item.ports.web }}/login" 2>&1)
          if echo "$curl_result" | grep -qi "jenkins\|login\|authentication\|hudson\|<title>"; then
            echo "✅ Jenkins responding on $test_host:{{ item.ports.web }}"
            echo "Response preview: $(echo "$curl_result" | head -3 | tr '\n' ' ')"
          else
            echo "❌ No Jenkins response from $test_host:{{ item.ports.web }}"
            echo "Curl result (first 200 chars): $(echo "$curl_result" | head -c 200)"
            echo "Full curl result: $curl_result"
          fi
          echo "---"
        done
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}:{{ item.ports.web }}"
      register: connectivity_test
      failed_when: false

    - name: Display connectivity test results
      debug:
        msg: "{{ connectivity_test.results | map(attribute='stdout_lines') | list }}"

    - name: Wait for Jenkins containers to fully initialize
      shell: |
        # Wait for Jenkins process to start inside container
        docker exec jenkins-{{ item.team_name }}-{{ item.active_environment }} sh -c "
          max_attempts=60
          attempt=0
          while [ \$attempt -lt \$max_attempts ]; do
            if pgrep -f 'jenkins.war' > /dev/null; then
              echo 'Jenkins process found'
              break
            fi
            echo \"Attempt \$((attempt + 1)): Waiting for Jenkins process...\"
            sleep 2
            attempt=\$((attempt + 1))
          done
          
          if [ \$attempt -eq \$max_attempts ]; then
            echo 'Jenkins process not found after waiting'
            exit 1
          fi
        "
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}-{{ item.active_environment }}"
      register: jenkins_process_wait
      failed_when: false

    - name: Display Jenkins process wait results
      debug:
        msg: "{{ jenkins_process_wait.results | map(attribute='stdout_lines') | list }}"

    - name: Streamlined Jenkins health checks
      import_tasks: streamlined-health-checks.yml

    # Streamlined health checks completed above - no additional tests needed

  tags: ['health', 'verify']

# Health checks completed - streamlined version removes redundant tests
      uri:
        url: "http://localhost:{% if item.active_environment | default('blue') == 'blue' %}{{ item.ports.web }}{% else %}{{ item.ports.web + 100 }}{% endif %}/api/json"
        method: GET
        status_code: [200, 403]
        timeout: 15
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}-api@localhost"
      register: jenkins_api_health
      when: >
        jenkins_api_health_primary.results is defined and
        jenkins_api_health_primary.results[loop.index0] is defined and
        jenkins_api_health_primary.results[loop.index0].status | default(0) not in [200, 403]
      failed_when: false

    - name: Verify container health status
      command: "docker inspect jenkins-{{ item.team_name }}-{{ item.active_environment }} --format='{{ '{{' }}.State.Health.Status{{ '}}' }}'"
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "jenkins-{{ item.team_name }}-{{ item.active_environment }}"
      register: container_health_status
      failed_when: false
      changed_when: false

    - name: Validate overall deployment health
      block:
        - name: Check for successful web interface connections
          assert:
            that: >
              (jenkins_web_health_primary.results | default([]) |
               selectattr('status', 'defined') | selectattr('status', 'in', [200, 403]) | list | length) > 0 or
              (jenkins_web_health_fallback.results | default([]) |
               selectattr('status', 'defined') | selectattr('status', 'in', [200, 403]) | list | length) > 0 or
              (jenkins_web_health_container.results | default([]) |
               selectattr('status', 'defined') | selectattr('status', 'in', [200, 403]) | list | length) > 0
            fail_msg: |
              ❌ DEPLOYMENT HEALTH CHECK FAILED ❌
              
              No Jenkins instances are responding to HTTP requests.
              
              Primary host ({{ jenkins_verification_host }}) results:
              {% for result in jenkins_web_health_primary.results | default([]) %}
              • {{ jenkins_teams_config[loop.index0].team_name }}:{% if jenkins_teams_config[loop.index0].active_environment | default('blue') == 'blue' %}{{ jenkins_teams_config[loop.index0].ports.web }}{% else %}{{ jenkins_teams_config[loop.index0].ports.web + 100 }}{% endif %} - Status: {{ result.status | default('Connection failed') }}
              {% endfor %}
              
              Fallback (localhost) results:
              {% for result in jenkins_web_health_fallback.results | default([]) %}
              • {{ jenkins_teams_config[loop.index0].team_name }}:{% if jenkins_teams_config[loop.index0].active_environment | default('blue') == 'blue' %}{{ jenkins_teams_config[loop.index0].ports.web }}{% else %}{{ jenkins_teams_config[loop.index0].ports.web + 100 }}{% endif %} - Status: {{ result.status | default('Connection failed') }}
              {% endfor %}
              
              Container IP results:
              {% for result in jenkins_web_health_container.results | default([]) %}
              • {{ jenkins_teams_config[loop.index0].team_name }}:{% if jenkins_teams_config[loop.index0].active_environment | default('blue') == 'blue' %}{{ jenkins_teams_config[loop.index0].ports.web }}{% else %}{{ jenkins_teams_config[loop.index0].ports.web + 100 }}{% endif %} - Status: {{ result.status | default('Connection failed') }}
              {% endfor %}
              
              TROUBLESHOOTING:
              1. Check if Docker containers are running: docker ps --filter "name=jenkins"
              2. Check container logs: docker logs jenkins-{team}-{environment}
              3. Verify port mappings: docker port jenkins-{team}-{environment}
              4. Test direct container access: docker exec jenkins-{team}-{environment} curl -f http://localhost:{{ jenkins_master_port }}/login
              5. Check host networking: netstat -tuln | grep :{port}
            success_msg: |
              ✅ DEPLOYMENT HEALTH CHECK PASSED ✅
              
              At least one Jenkins instance is responding correctly.
        
        - name: Final deployment summary
          debug:
            msg: |
              ====================================================
              Jenkins Deployment Health Summary
              ====================================================
              {% for team in jenkins_teams_config %}
              Team: {{ team.team_name }}
              Environment: {{ team.active_environment }}
              Web URL: http://{{ jenkins_verification_host }}:{% if team.active_environment | default('blue') == 'blue' %}{{ team.ports.web }}{% else %}{{ team.ports.web + 100 }}{% endif %}
              Agent Port: {% if team.active_environment | default('blue') == 'blue' %}{{ team.ports.agent }}{% else %}{{ team.ports.agent + 100 }}{% endif %}
              Container: jenkins-{{ team.team_name }}-{{ team.active_environment }}
              Status: {% if container_health_status.results[loop.index0] is defined %}{{ container_health_status.results[loop.index0].stdout | default('unknown') }}{% else %}unknown{% endif %}
              
              {% endfor %}
              Access Commands:
              {% for team in jenkins_teams_config %}
              curl http://localhost:{% if team.active_environment | default('blue') == 'blue' %}{{ team.ports.web }}{% else %}{{ team.ports.web + 100 }}{% endif %}/login  # {{ team.team_name }} team
              {% endfor %}
              ====================================================
      rescue:
        - name: Display connectivity troubleshooting information
          debug:
            msg: |
              ====================================================
              CONNECTIVITY TROUBLESHOOTING INFORMATION
              ====================================================
              
              Container Debug Information:
              {{ container_debug.results | map(attribute='stdout_lines') | list }}
              
              Connectivity Test Results:
              {{ connectivity_test.results | map(attribute='stdout_lines') | list }}
              
              ====================================================
          failed_when: true
  tags: ['health', 'verify']

# ====================================
# CLEANUP OPERATIONS (OPTIONAL)
# ====================================

- name: Perform cleanup operations if enabled
  block:
    - name: Clean up stopped Jenkins containers
      shell: |
        OLD_CONTAINERS=$(docker ps -aq --filter 'name=jenkins-*' --filter 'status=exited')
        if [ -n "$OLD_CONTAINERS" ]; then
          docker rm -f $OLD_CONTAINERS
          echo "Removed containers: $OLD_CONTAINERS"
        else
          echo "No stopped containers to remove"
        fi
      register: container_cleanup
      when: jenkins_master_cleanup_containers | default(false)

    - name: Clean up unused Jenkins volumes
      shell: |
        UNUSED_VOLUMES=$(docker volume ls --filter 'dangling=true' --filter 'name=jenkins-*' -q)
        if [ -n "$UNUSED_VOLUMES" ]; then
          docker volume rm $UNUSED_VOLUMES
          echo "Removed volumes: $UNUSED_VOLUMES"
        else
          echo "No unused volumes to remove"
        fi
      register: volume_cleanup
      when: jenkins_master_cleanup_volumes | default(false)

    - name: Clean up old Jenkins images
      command: "docker image prune -f"
      register: image_cleanup
      when: jenkins_master_cleanup_images | default(false)

    - name: Remove old log files for teams
      find:
        paths: "{{ jenkins_home_dir }}/{{ item.team_name }}"
        patterns: "*.log*"
        age: "{{ jenkins_master_log_retention_days | default(30) }}d"
        recurse: yes
      register: old_logs_found
      loop: "{{ jenkins_teams_config }}"
      loop_control:
        label: "{{ item.team_name }}"
      when: jenkins_master_cleanup_logs | default(false)

    - name: Delete old log files
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_logs_found.results | default([]) | selectattr('files', 'defined') | map(attribute='files') | list | flatten }}"
      when: jenkins_master_cleanup_logs | default(false)
  when: jenkins_master_cleanup_enabled | default(false)
  tags: ['cleanup', 'maintenance']

# ====================================
# DEPLOYMENT STATUS SUMMARY
# ====================================

- name: Display comprehensive deployment and health status
  debug:
    msg: |
      ====================================================
      Jenkins Master v2 - Blue-Green Deployment Status
      ====================================================
      Deployment Mode: {{ jenkins_deployment_mode }}
      Total Teams: {{ jenkins_teams_config | length }}
      Container Runtime: {{ jenkins_master_container_runtime }}
      Network: {{ jenkins_master_network_name }}
      
      TEAM DEPLOYMENT STATUS:
      {% for team in jenkins_teams_config %}
      ┌─ {{ team.team_name | upper }} TEAM ────────────────────────────
      │ Active Environment: {{ team.active_environment | upper }}
      │ Web URL: http://{{ jenkins_verification_host }}:{% if team.active_environment | default('blue') == 'blue' %}{{ team.ports.web }}{% else %}{{ team.ports.web + 100 }}{% endif %}
      │ Agent Port: {% if team.active_environment | default('blue') == 'blue' %}{{ team.ports.agent }}{% else %}{{ team.ports.agent + 100 }}{% endif %}
      │ Blue Container: {{ 'RUNNING' if team.active_environment == 'blue' else 'STOPPED' }}
      │ Green Container: {{ 'RUNNING' if team.active_environment == 'green' else 'STOPPED' }}
      │ Resources: {{ team.resources.memory }} RAM, {{ team.resources.cpu }} CPU
      │ Management Scripts:
      │   • Switch: {{ jenkins_home_dir }}/scripts/blue-green-switch-{{ team.team_name }}.sh
      │   • Health: {{ jenkins_home_dir }}/scripts/blue-green-healthcheck-{{ team.team_name }}.sh
      │   • Monitor: {{ jenkins_home_dir }}/scripts/health-monitor-{{ team.team_name }}.sh
      └─────────────────────────────────────────────────────
      {% endfor %}
      
      HEALTH STATUS SUMMARY:
      {% if jenkins_web_health is defined and jenkins_web_health.results is defined %}
      {% for result in jenkins_web_health.results %}
      • {{ jenkins_teams_config[loop.index0].team_name }}: Web Interface {{ 'HEALTHY' if result.status is defined and result.status in [200, 403] else 'PENDING' }}
      {% endfor %}
      {% endif %}
      {% if jenkins_api_health is defined and jenkins_api_health.results is defined %}
      {% for result in jenkins_api_health.results %}
      • {{ jenkins_teams_config[loop.index0].team_name }}: API Endpoint {{ 'HEALTHY' if result.status is defined and result.status in [200, 403] else 'PENDING' }}
      {% endfor %}
      {% endif %}
      
      {% if jenkins_master_cleanup_enabled | default(false) %}
      CLEANUP SUMMARY:
      • Containers: {{ 'Cleaned' if jenkins_master_cleanup_containers else 'Skipped' }}
      • Volumes: {{ 'Cleaned' if jenkins_master_cleanup_volumes else 'Skipped' }}
      • Images: {{ 'Cleaned' if jenkins_master_cleanup_images else 'Skipped' }}
      • Logs: {{ 'Cleaned' if jenkins_master_cleanup_logs else 'Skipped' }}
      {% endif %}
      
      ====================================================
      NOTE: HTTP 403 responses are expected during initial 
      Jenkins setup before authentication is configured.
      ====================================================
  tags: ['deploy', 'monitor', 'summary']

- name: Blue-green deployment and monitoring phase complete
  debug:
    msg: |
      ====================================
      Blue-Green Deployment Complete
      ====================================
      Teams configured: {{ jenkins_teams_config | length }}
      Management scripts created: {{ jenkins_teams_config | length * 3 }}
      Health checks passed: {% if jenkins_web_health is defined and jenkins_web_health.results is defined %}{{ jenkins_web_health.results | selectattr('status', 'defined') | selectattr('status', 'in', [200, 403]) | list | length }}{% else %}Pending{% endif %}/{{ jenkins_teams_config | length }}
      ====================================
  tags: ['deploy', 'monitor']