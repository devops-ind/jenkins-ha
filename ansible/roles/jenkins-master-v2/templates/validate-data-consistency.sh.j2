#!/bin/bash
# Jenkins Data Consistency Validation Script for {{ item.team_name }}
# Validates consistency between container volumes and shared storage
# Generated by Ansible jenkins-master-v2 role

set -euo pipefail

TEAM_NAME="{{ item.team_name }}"
ACTIVE_ENV="{{ item.active_environment | default('blue') }}"
CONTAINER_NAME="jenkins-${TEAM_NAME}-${ACTIVE_ENV}"
STORAGE_PATH="{{ storage_path }}"
STORAGE_TYPE="{{ storage_type }}"
TEAM_STORAGE_PATH="${STORAGE_PATH}/${TEAM_NAME}"
LOG_FILE="/var/log/jenkins-${TEAM_NAME}-consistency.log"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

# Check if container is running
if ! docker ps --filter "name=${CONTAINER_NAME}" | grep -q "${CONTAINER_NAME}"; then
    log "‚ö†Ô∏è Container ${CONTAINER_NAME} not running, cannot validate consistency"
    exit 1
fi

# Check if storage is accessible
if [[ ! -d "$STORAGE_PATH" ]] || [[ ! -r "$STORAGE_PATH" ]]; then
    log "‚ùå Storage not accessible at $STORAGE_PATH"
    exit 1
fi

log "üîç Starting data consistency validation for ${TEAM_NAME} (${ACTIVE_ENV}) using ${STORAGE_TYPE} storage"

# Data types to validate
DATA_TYPES=("jobs" "workspace" "builds" "userContent" "secrets")

validate_data_type() {
    local data_type=$1
    local container_path="/var/jenkins_home/${data_type}"
    local storage_path="${TEAM_STORAGE_PATH}/${data_type}"
    local validation_errors=0
    
    log "üìÅ Validating ${data_type}..."
    
    # Check if paths exist
    if ! docker exec "${CONTAINER_NAME}" test -d "${container_path}"; then
        log "‚ö†Ô∏è Container path ${container_path} does not exist"
        return 0  # Not an error if directory doesn't exist yet
    fi
    
    if [[ ! -d "$storage_path" ]]; then
        log "‚ö†Ô∏è Storage path ${storage_path} does not exist"
        mkdir -p "$storage_path"
        log "‚úÖ Created missing storage directory: $storage_path"
        return 0
    fi
    
    # Get file counts
    local container_count
    local storage_count
    
    container_count=$(docker exec "${CONTAINER_NAME}" find "${container_path}" -type f | wc -l)
    storage_count=$(find "$storage_path" -type f | wc -l)
    
    log "üìä File counts - Container: $container_count, Storage: $storage_count"
    
    # Check for significant discrepancies
    local diff_threshold=10
    local diff=$((container_count - storage_count))
    
    if [[ $diff -lt 0 ]]; then
        diff=$((-diff))
    fi
    
    if [[ $diff -gt $diff_threshold ]]; then
        log "‚ö†Ô∏è Significant file count difference: $diff files (threshold: $diff_threshold)"
        ((validation_errors++))
    fi
    
    # Check recent modifications (files modified in last hour)
    local recent_container_files
    local recent_storage_files
    
    recent_container_files=$(docker exec "${CONTAINER_NAME}" find "${container_path}" -type f -mmin -60 | wc -l)
    recent_storage_files=$(find "$storage_path" -type f -mmin -60 | wc -l)
    
    log "üïê Recently modified files (last hour) - Container: $recent_container_files, Storage: $recent_storage_files"
    
    if [[ $recent_container_files -gt 0 ]] && [[ $recent_storage_files -eq 0 ]]; then
        log "‚ö†Ô∏è Recent modifications in container not reflected in storage"
        ((validation_errors++))
    fi
    
    # Sample file validation (check first few files for content consistency)
    local sample_files
    sample_files=($(docker exec "${CONTAINER_NAME}" find "${container_path}" -type f -name "*.xml" | head -3))
    
    for file in "${sample_files[@]}"; do
        if [[ -n "$file" ]]; then
            local filename
            filename=$(basename "$file")
            local storage_file
            storage_file=$(find "$storage_path" -name "$filename" | head -1)
            
            if [[ -n "$storage_file" ]]; then
                local container_size
                local storage_size
                
                container_size=$(docker exec "${CONTAINER_NAME}" stat -c%s "$file" 2>/dev/null || echo 0)
                storage_size=$(stat -c%s "$storage_file" 2>/dev/null || stat -f%z "$storage_file" 2>/dev/null || echo 0)
                
                if [[ "$container_size" != "$storage_size" ]]; then
                    log "‚ö†Ô∏è Size mismatch for $filename: container=${container_size}, storage=${storage_size}"
                    ((validation_errors++))
                fi
            else
                log "‚ö†Ô∏è File $filename exists in container but not in storage"
                ((validation_errors++))
            fi
        fi
    done
    
    if [[ $validation_errors -eq 0 ]]; then
        log "‚úÖ Data consistency validation passed for ${data_type}"
        return 0
    else
        log "‚ùå Data consistency validation failed for ${data_type} ($validation_errors issues)"
        return 1
    fi
}

# Validate each data type
validation_success=0
validation_total=${{ '{#' }}DATA_TYPES[@]}

for data_type in "${DATA_TYPES[@]}"; do
    if validate_data_type "$data_type"; then
        ((validation_success++))
    fi
done

# Generate consistency report
log "======================================"
log "Data Consistency Validation Report"
log "======================================"
log "Team: ${TEAM_NAME}"
log "Environment: ${ACTIVE_ENV}"
log "Container: ${CONTAINER_NAME}"
log "Storage Type: ${STORAGE_TYPE}"
log "Storage Path: ${TEAM_STORAGE_PATH}"
log "======================================"
log "Validation Results: ${validation_success}/${validation_total} passed"

if [[ $validation_success -eq $validation_total ]]; then
    log "üéâ All data consistency checks PASSED"
    exit 0
elif [[ $validation_success -gt 0 ]]; then
    log "‚ö†Ô∏è Partial data consistency validation (${validation_success}/${validation_total})"
    exit 1
else
    log "üî• All data consistency checks FAILED"
    exit 2
fi