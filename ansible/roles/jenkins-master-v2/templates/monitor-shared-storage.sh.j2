#!/bin/bash
# Jenkins Shared Storage Health Monitor
# Monitors shared storage accessibility and performance
# Generated by Ansible jenkins-master-v2 role

set -euo pipefail

STORAGE_PATH="{{ storage_path }}"
STORAGE_TYPE="{{ storage_type }}"
LOG_FILE="/var/log/jenkins-storage-health.log"
ALERT_THRESHOLD_MB="{{ storage_alert_threshold_mb | default(1000) }}"
TEAMS=({% for team in jenkins_teams_config %}"{{ team.team_name }}"{% if not loop.last %} {% endif %}{% endfor %})

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

# Health check function
check_storage_health() {
    local exit_code=0
    
    log "🔍 Starting ${STORAGE_TYPE} storage health check"
    
    # Check accessibility
    if [[ ! -d "$STORAGE_PATH" ]]; then
        log "❌ Storage directory $STORAGE_PATH does not exist"
        exit_code=1
    elif [[ ! -r "$STORAGE_PATH" ]]; then
        log "❌ Storage directory $STORAGE_PATH is not readable"
        exit_code=1
    elif [[ ! -w "$STORAGE_PATH" ]]; then
        log "❌ Storage directory $STORAGE_PATH is not writable"
        exit_code=1
    else
        log "✅ ${STORAGE_TYPE^} storage accessibility: OK"
    fi
    
    # Check available space
    if command -v df >/dev/null 2>&1; then
        local available_mb
        available_mb=$(df -BM "$STORAGE_PATH" | tail -1 | awk '{print $4}' | sed 's/M//')
        
        if [[ "$available_mb" -lt "$ALERT_THRESHOLD_MB" ]]; then
            log "⚠️ Low disk space: ${available_mb}MB available (threshold: ${ALERT_THRESHOLD_MB}MB)"
            exit_code=2
        else
            log "✅ Disk space: ${available_mb}MB available"
        fi
    fi
    
    # Check team directories
    for team in "${TEAMS[@]}"; do
        local team_path="${STORAGE_PATH}/${team}"
        if [[ ! -d "$team_path" ]]; then
            log "⚠️ Team directory missing: $team_path"
            mkdir -p "$team_path"/{jobs,workspace,builds,userContent,secrets}
            chown -R {{ jenkins_user }}:{{ jenkins_group }} "$team_path"
            log "✅ Created missing team directory: $team_path"
        else
            # Check subdirectories
            for subdir in jobs workspace builds userContent secrets; do
                if [[ ! -d "$team_path/$subdir" ]]; then
                    log "⚠️ Missing subdirectory: $team_path/$subdir"
                    mkdir -p "$team_path/$subdir"
                    chown -R {{ jenkins_user }}:{{ jenkins_group }} "$team_path/$subdir"
                fi
            done
            log "✅ Team directory structure: $team"
        fi
    done
    
    # Performance test (write/read test)
    local test_file="${STORAGE_PATH}/.health_check_$(date +%s)"
    local test_data="Jenkins ${STORAGE_TYPE} storage health check - $(date)"
    
    if echo "$test_data" > "$test_file" 2>/dev/null; then
        if [[ "$(cat "$test_file" 2>/dev/null)" == "$test_data" ]]; then
            log "✅ Write/Read test: OK"
            rm -f "$test_file"
        else
            log "❌ Read test failed"
            exit_code=1
        fi
    else
        log "❌ Write test failed"
        exit_code=1
    fi
    
    # Check mount status (if applicable)
    if [[ "$STORAGE_TYPE" == "shared" ]]; then
        {% if shared_storage_type == "nfs" %}
        if command -v findmnt >/dev/null 2>&1; then
            if findmnt "$STORAGE_PATH" >/dev/null 2>&1; then
                log "✅ NFS mount status: OK"
            else
                log "❌ NFS mount not found for $STORAGE_PATH"
                exit_code=1
            fi
        fi
        {% elif shared_storage_type == "glusterfs" %}
        if command -v findmnt >/dev/null 2>&1; then
            if findmnt -t fuse.glusterfs "$STORAGE_PATH" >/dev/null 2>&1; then
                log "✅ GlusterFS mount status: OK"
            else
                log "❌ GlusterFS mount not found for $STORAGE_PATH"
                exit_code=1
            fi
        fi
        {% endif %}
    else
        log "✅ Backup directory storage: No mount required"
    fi
    
    # Summary
    case $exit_code in
        0)
            log "🎉 ${STORAGE_TYPE^} storage health check: ALL CHECKS PASSED"
            ;;
        1)
            log "🔥 ${STORAGE_TYPE^} storage health check: CRITICAL ISSUES DETECTED"
            ;;
        2)
            log "⚠️ ${STORAGE_TYPE^} storage health check: WARNING CONDITIONS"
            ;;
    esac
    
    return $exit_code
}

# Run health check
check_storage_health

# Rotate log file if it gets too large (>10MB)
if [[ -f "$LOG_FILE" ]] && [[ $(stat -f%z "$LOG_FILE" 2>/dev/null || stat -c%s "$LOG_FILE" 2>/dev/null || echo 0) -gt 10485760 ]]; then
    mv "$LOG_FILE" "${LOG_FILE}.old"
    log "📜 Rotated log file due to size"
fi