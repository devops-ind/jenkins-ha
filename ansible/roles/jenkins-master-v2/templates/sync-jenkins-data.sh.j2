#!/bin/bash
# Jenkins Data Synchronization Script for {{ item.team_name }}
# Syncs data between active Jenkins container and shared storage
# Generated by Ansible jenkins-master-v2 role

set -euo pipefail

TEAM_NAME="{{ item.team_name }}"
ACTIVE_ENV="{{ item.active_environment | default('blue') }}"
CONTAINER_NAME="jenkins-${TEAM_NAME}-${ACTIVE_ENV}"
STORAGE_PATH="{{ storage_path }}"
STORAGE_TYPE="{{ storage_type }}"
TEAM_STORAGE_PATH="${STORAGE_PATH}/${TEAM_NAME}"
SYNC_METHOD="{{ sync_method | default('rsync') }}"
LOG_FILE="/var/log/jenkins-${TEAM_NAME}-sync.log"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

# Check if container is running
if ! docker ps --filter "name=${CONTAINER_NAME}" | grep -q "${CONTAINER_NAME}"; then
    log "‚ö†Ô∏è Container ${CONTAINER_NAME} not running, skipping sync"
    exit 0
fi

# Check if storage is accessible
if [[ ! -d "$STORAGE_PATH" ]] || [[ ! -w "$STORAGE_PATH" ]]; then
    log "‚ùå Storage not accessible at $STORAGE_PATH"
    exit 1
fi

log "üîÑ Starting data synchronization for ${TEAM_NAME} (${ACTIVE_ENV}) using ${STORAGE_TYPE} storage"

# Ensure team directories exist in storage
mkdir -p "${TEAM_STORAGE_PATH}"/{jobs,workspace,builds,userContent,secrets}

# Data types to sync (exclude plugins, logs, war for environment isolation)
DATA_TYPES=("jobs" "workspace" "builds" "userContent" "secrets")

sync_data() {
    local data_type=$1
    local container_path="/var/jenkins_home/${data_type}"
    local storage_path="${TEAM_STORAGE_PATH}/${data_type}"
    
    # Check if source exists in container
    if ! docker exec "${CONTAINER_NAME}" test -d "${container_path}"; then
        log "‚ö†Ô∏è Source ${container_path} does not exist in container, skipping ${data_type}"
        return 0
    fi
    
    log "üìÅ Syncing ${data_type}..."
    
    case "$SYNC_METHOD" in
        "rsync")
            # Use rsync for efficient synchronization
            docker exec "${CONTAINER_NAME}" find "${container_path}" -type f -newer "${container_path}/.last_sync" 2>/dev/null | head -10 | while read -r file; do
                if [[ -n "$file" ]]; then
                    log "  üìÑ Copying modified file: $(basename "$file")"
                fi
            done
            
            # Perform the sync via docker cp (rsync not available in Jenkins container)
            docker cp "${CONTAINER_NAME}:${container_path}/." "${storage_path}/" || {
                log "‚ùå Failed to sync ${data_type}"
                return 1
            }
            ;;
        "cp")
            # Simple copy method
            docker cp "${CONTAINER_NAME}:${container_path}/." "${storage_path}/" || {
                log "‚ùå Failed to sync ${data_type}"
                return 1
            }
            ;;
    esac
    
    # Update timestamp marker
    docker exec "${CONTAINER_NAME}" touch "${container_path}/.last_sync"
    
    # Set proper ownership
    chown -R {{ jenkins_user }}:{{ jenkins_group }} "${storage_path}"
    
    log "‚úÖ Successfully synced ${data_type}"
}

# Sync each data type
sync_success=0
sync_total=${{ '{#' }}DATA_TYPES[@]}

for data_type in "${DATA_TYPES[@]}"; do
    if sync_data "$data_type"; then
        ((sync_success++))
    fi
done

# Report results
if [[ $sync_success -eq $sync_total ]]; then
    log "üéâ Data synchronization completed successfully (${sync_success}/${sync_total})"
    exit 0
else
    log "‚ö†Ô∏è Partial synchronization completed (${sync_success}/${sync_total})"
    exit 1
fi