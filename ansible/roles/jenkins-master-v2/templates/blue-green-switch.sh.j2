#!/bin/bash
# Blue-Green Environment Switch Script for {{ item.team_name }}
# Generated by Ansible jenkins-master role

set -euo pipefail

TEAM_NAME="{{ item.team_name }}"
CONTAINER_RUNTIME="{{ jenkins_master_container_runtime }}"
WEB_PORT="{{ item.ports.web }}"
AGENT_PORT="{{ item.ports.agent }}"
JENKINS_HOME="{{ jenkins_home_dir }}"
STATE_FILE="${JENKINS_HOME}/${TEAM_NAME}/blue-green-state.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

get_current_environment() {
    if [[ -f "$STATE_FILE" ]]; then
        grep -o '"active_environment":\s*"[^"]*"' "$STATE_FILE" | cut -d'"' -f4
    else
        echo "blue"  # Default fallback
    fi
}

get_target_environment() {
    local current=$(get_current_environment)
    if [[ "$current" == "blue" ]]; then
        echo "green"
    else
        echo "blue"
    fi
}

health_check() {
    local environment=$1
    local container_name="jenkins-${TEAM_NAME}-${environment}"
    
    log "Performing health check for ${environment} environment..."
    
    # Check if container is running
    if ! $CONTAINER_RUNTIME inspect "$container_name" &>/dev/null; then
        error "Container $container_name does not exist"
        return 1
    fi
    
    local status=$($CONTAINER_RUNTIME inspect "$container_name" --format='{{ '{{' }}.State.Status{{ '}}' }}')
    if [[ "$status" != "running" ]]; then
        error "Container $container_name is not running (status: $status)"
        return 1
    fi
    
    # Check Jenkins web interface
    local max_attempts=30
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        local check_port=$WEB_PORT
        if [[ "$environment" == "green" ]]; then
            check_port=$((WEB_PORT + 100))
        fi
        
        if curl -f -s "http://localhost:${check_port}/login" &>/dev/null; then
            success "Jenkins web interface is accessible on port $check_port"
            return 0
        fi
        
        log "Attempt $attempt/$max_attempts: Jenkins not ready yet..."
        sleep 10
        ((attempt++))
    done
    
    error "Jenkins web interface failed health check after $max_attempts attempts"
    return 1
}

switch_environment() {
    local current_env=$(get_current_environment)
    local target_env=$(get_target_environment)
    
    log "Starting blue-green switch for team: $TEAM_NAME"
    log "Current environment: $current_env"
    log "Target environment: $target_env"
    
    # Step 1: Start target environment
    log "Starting $target_env environment..."
    $CONTAINER_RUNTIME start "jenkins-${TEAM_NAME}-${target_env}" || {
        error "Failed to start $target_env environment"
        return 1
    }
    
    # Step 2: Health check target environment
    if ! health_check "$target_env"; then
        error "Health check failed for $target_env environment"
        log "Rolling back..."
        $CONTAINER_RUNTIME stop "jenkins-${TEAM_NAME}-${target_env}"
        return 1
    fi
    
    # Step 3: Update port mappings for target environment
    log "Updating port mappings for $target_env environment..."
    $CONTAINER_RUNTIME stop "jenkins-${TEAM_NAME}-${target_env}"
    
    # Start with port mappings
    if [[ "$CONTAINER_RUNTIME" == "docker" ]]; then
        $CONTAINER_RUNTIME run -d --name "jenkins-${TEAM_NAME}-${target_env}-temp" \
            --network "{{ jenkins_master_network_name }}" \
            -p "${WEB_PORT}:{{ jenkins_master_port }}" \
            -p "${AGENT_PORT}:{{ jenkins_jnlp_port }}" \
            -v "jenkins-${TEAM_NAME}-${target_env}-home:{{ jenkins_master_container_home }}" \
            -v "jenkins-${TEAM_NAME}-shared:{{ jenkins_master_shared_path }}" \
            -v "/var/run/docker.sock:/var/run/docker.sock" \
            --restart "{{ jenkins_master_restart_policy }}" \
            "{{ jenkins_master_image_registry }}/{{ jenkins_master_image_name }}:{{ jenkins_master_image_tag }}"
    else
        $CONTAINER_RUNTIME run -d --name "jenkins-${TEAM_NAME}-${target_env}-temp" \
            --network "{{ jenkins_master_network_name }}" \
            -p "${WEB_PORT}:{{ jenkins_master_port }}" \
            -p "${AGENT_PORT}:{{ jenkins_jnlp_port }}" \
            -v "jenkins-${TEAM_NAME}-${target_env}-home:{{ jenkins_master_container_home }}" \
            -v "jenkins-${TEAM_NAME}-shared:{{ jenkins_master_shared_path }}" \
            -v "/var/run/docker.sock:/var/run/docker.sock" \
            --restart "{{ jenkins_master_restart_policy }}" \
            "{{ jenkins_master_image_registry }}/{{ jenkins_master_image_name }}:{{ jenkins_master_image_tag }}"
    fi
    
    # Health check new container
    if ! health_check "$target_env"; then
        error "Health check failed for new $target_env container"
        $CONTAINER_RUNTIME rm -f "jenkins-${TEAM_NAME}-${target_env}-temp"
        return 1
    fi
    
    # Step 4: Stop current environment and remove port mappings
    log "Stopping $current_env environment..."
    $CONTAINER_RUNTIME stop "jenkins-${TEAM_NAME}-${current_env}" || warn "Failed to stop $current_env container"
    
    # Step 5: Replace containers
    $CONTAINER_RUNTIME rm "jenkins-${TEAM_NAME}-${target_env}" 2>/dev/null || true
    $CONTAINER_RUNTIME rename "jenkins-${TEAM_NAME}-${target_env}-temp" "jenkins-${TEAM_NAME}-${target_env}"
    
    # Step 6: Update state file
    log "Updating state file..."
    cat > "$STATE_FILE" << EOF
{
    "team_name": "$TEAM_NAME",
    "active_environment": "$target_env",
    "previous_environment": "$current_env",
    "switch_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
    "switch_method": "script"
}
EOF
    
    # Step 7: Sync HAProxy configuration
    log "Synchronizing HAProxy configuration with new environment..."
    if command -v ansible-playbook >/dev/null 2>&1; then
        ansible-playbook -i "{{ ansible_inventory_sources | first }}" \
            "{{ playbook_dir }}/site.yml" \
            --tags sync-team-environments \
            --limit load_balancers \
            --become >/dev/null 2>&1 || warn "Failed to sync HAProxy - manual sync may be required"
    else
        warn "Ansible not available - HAProxy configuration sync skipped"
        warn "Manual HAProxy sync required: Run deployment playbook with --tags haproxy"
    fi
    
    success "Blue-green switch completed successfully!"
    log "New active environment: $target_env"
    log "Jenkins URL: http://$(hostname -I | awk '{print $1}'):${WEB_PORT}"
    
    return 0
}

rollback_environment() {
    local current_env=$(get_current_environment)
    local previous_env=$(get_target_environment)
    
    warn "Rolling back to $previous_env environment..."
    
    # This is essentially the same as switch_environment but with explicit rollback logging
    if switch_environment; then
        success "Rollback to $previous_env environment completed successfully!"
    else
        error "Rollback failed!"
        return 1
    fi
}

show_status() {
    local current_env=$(get_current_environment)
    local target_env=$(get_target_environment)
    
    echo -e "\n${BLUE}=== Blue-Green Status for $TEAM_NAME ===${NC}"
    echo -e "Active Environment: ${GREEN}$current_env${NC}"
    echo -e "Standby Environment: ${YELLOW}$target_env${NC}"
    echo -e "Web Port: $WEB_PORT"
    echo -e "Agent Port: $AGENT_PORT"
    echo -e "Container Runtime: $CONTAINER_RUNTIME"
    
    echo -e "\n${BLUE}=== Container Status ===${NC}"
    for env in blue green; do
        local container_name="jenkins-${TEAM_NAME}-${env}"
        if $CONTAINER_RUNTIME inspect "$container_name" &>/dev/null; then
            local status=$($CONTAINER_RUNTIME inspect "$container_name" --format='{{ '{{' }}.State.Status{{ '}}' }}')
            local active_marker=""
            [[ "$env" == "$current_env" ]] && active_marker=" (ACTIVE)"
            echo -e "$container_name: ${GREEN}$status${NC}$active_marker"
        else
            echo -e "$container_name: ${RED}not found${NC}"
        fi
    done
    
    echo -e "\n${BLUE}=== URLs ===${NC}"
    echo -e "Jenkins Web: http://$(hostname -I | awk '{print $1}'):${WEB_PORT}"
    echo -e "Agent Connection: $(hostname -I | awk '{print $1}'):${AGENT_PORT}"
}

main() {
    case "${1:-status}" in
        switch)
            switch_environment
            ;;
        rollback)
            rollback_environment
            ;;
        status)
            show_status
            ;;
        health)
            health_check "$(get_current_environment)"
            ;;
        *)
            echo "Usage: $0 {switch|rollback|status|health}"
            echo "  switch   - Switch to the other environment"
            echo "  rollback - Rollback to previous environment"
            echo "  status   - Show current status"
            echo "  health   - Check health of active environment"
            exit 1
            ;;
    esac
}

main "$@"