#!/bin/bash
# Initial Jenkins Data Sync Script for {{ item.team_name }}
# Generated by Ansible jenkins-master-v2 role

set -euo pipefail

# Set variables to avoid Jinja2 conflicts
CONTAINER_NAME="jenkins-{{ item.team_name }}-{{ item.active_environment | default('blue') }}"
STORAGE_PATH="{{ storage_path }}"
TEAM_NAME="{{ item.team_name }}"
ACTIVE_ENV="{{ item.active_environment | default('blue') }}"

echo "=== Initial Data Sync for ${TEAM_NAME} (${ACTIVE_ENV}) ==="

# Sync only if container is running and storage is accessible
if docker ps --filter "name=${CONTAINER_NAME}" | grep -q "${CONTAINER_NAME}"; then
  echo "‚úÖ Container ${CONTAINER_NAME} is running"
  echo "üîÑ Syncing ${TEAM_NAME} ${ACTIVE_ENV} environment data to {{ storage_type }} storage"
  
  # Create team directories in storage if they don't exist
  echo "üìÅ Creating storage directories..."
  mkdir -p "${STORAGE_PATH}/${TEAM_NAME}"/{jobs,workspace,builds,userContent,secrets}
  
  # Sync shared data types from container to storage
  echo "üì¶ Syncing data types..."
  for data_type in jobs workspace builds userContent secrets; do
    if docker exec "${CONTAINER_NAME}" test -d "/var/jenkins_home/${data_type}"; then
      echo "  üìÑ Syncing ${data_type}..."
      docker cp "${CONTAINER_NAME}:/var/jenkins_home/${data_type}/." "${STORAGE_PATH}/${TEAM_NAME}/${data_type}/"
      chown -R {{ jenkins_user }}:{{ jenkins_group }} "${STORAGE_PATH}/${TEAM_NAME}/${data_type}"
      echo "  ‚úÖ ${data_type} sync completed"
    else
      echo "  ‚ö†Ô∏è ${data_type} directory not found in container, skipping"
    fi
  done
  echo "üéâ Data sync completed for ${TEAM_NAME}"
  exit 0
else
  echo "‚ö†Ô∏è Container ${CONTAINER_NAME} not running, skipping sync"
  exit 1
fi