#!/bin/bash
# Blue-Green Monitoring Script for {{ item.team_name }}
# Generated by Ansible jenkins-master role

set -euo pipefail

TEAM_NAME="{{ item.team_name }}"
CONTAINER_RUNTIME="{{ jenkins_master_container_runtime }}"
WEB_PORT="{{ item.ports.web }}"
AGENT_PORT="{{ item.ports.agent }}"
JENKINS_HOME="{{ jenkins_home_dir }}"
CONFIG_DIR="{{ jenkins_master_custom_build_dir }}"
STATE_FILE="${CONFIG_DIR}/${TEAM_NAME}/blue-green-state.json"

# Port configurations for blue-green environments
BLUE_WEB_PORT="${WEB_PORT}"
GREEN_WEB_PORT="$((WEB_PORT + 100))"
BLUE_AGENT_PORT="${AGENT_PORT}"
GREEN_AGENT_PORT="$((AGENT_PORT + 100))"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

log() { echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
info() { echo -e "${CYAN}[INFO]${NC} $1"; }

get_current_environment() {
    # Try new location first, fallback to old location
    if [[ -f "$STATE_FILE" ]]; then
        grep -o '"active_environment":\s*"[^"]*"' "$STATE_FILE" | cut -d'"' -f4
    elif [[ -f "${JENKINS_HOME}/${TEAM_NAME}/blue-green-state.json" ]]; then
        grep -o '"active_environment":\s*"[^"]*"' "${JENKINS_HOME}/${TEAM_NAME}/blue-green-state.json" | cut -d'"' -f4
    else
        echo "blue"  # Default fallback
    fi
}

get_container_stats() {
    local environment=$1
    local container_name="jenkins-${TEAM_NAME}-${environment}"
    
    if ! $CONTAINER_RUNTIME inspect "$container_name" &>/dev/null; then
        echo "N/A,N/A,N/A,N/A"
        return
    fi
    
    local status=$($CONTAINER_RUNTIME inspect "$container_name" --format='{{ '{{' }}.State.Status{{ '}}' }}' 2>/dev/null || echo "unknown")
    local memory=$($CONTAINER_RUNTIME stats "$container_name" --no-stream --format "{{ '{{' }}.MemUsage{{ '}}' }}" 2>/dev/null || echo "N/A")
    local cpu=$($CONTAINER_RUNTIME stats "$container_name" --no-stream --format "{{ '{{' }}.CPUPerc{{ '}}' }}" 2>/dev/null || echo "N/A")
    local uptime=$($CONTAINER_RUNTIME inspect "$container_name" --format='{{ '{{' }}.State.StartedAt{{ '}}' }}' 2>/dev/null || echo "N/A")
    
    echo "$status,$memory,$cpu,$uptime"
}

check_web_health() {
    local port=$1
    if curl -f -s --max-time 5 "http://localhost:${port}/login" &>/dev/null; then
        echo "healthy"
    else
        echo "unhealthy"
    fi
}

check_agent_port() {
    local port=$1
    if timeout 3 bash -c "echo >/dev/tcp/localhost/${port}" 2>/dev/null; then
        echo "open"
    else
        echo "closed"
    fi
}

monitor_real_time() {
    local interval=${1:-5}
    
    echo -e "${BLUE}=== Starting Real-time Monitoring for $TEAM_NAME ===${NC}"
    echo -e "Monitoring interval: ${interval}s"
    echo -e "Press Ctrl+C to stop\n"
    
    while true; do
        clear
        show_dashboard
        sleep $interval
    done
}

show_dashboard() {
    local current_env=$(get_current_environment)
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo -e "${BLUE}╔═══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║                    Jenkins Blue-Green Monitor                 ║${NC}"
    echo -e "${BLUE}║                      Team: ${YELLOW}$TEAM_NAME${BLUE}                           ║${NC}"
    echo -e "${BLUE}║                   $timestamp                   ║${NC}"
    echo -e "${BLUE}╚═══════════════════════════════════════════════════════════════╝${NC}"
    
    echo -e "\n${CYAN}Active Environment: ${GREEN}$current_env${NC}"
    
    echo -e "\n${BLUE}=== Environment Status ===${NC}"
    printf "%-12s %-10s %-15s %-8s %-10s %-10s\n" "Environment" "Status" "Memory" "CPU" "Web" "Agent"
    printf "%-12s %-10s %-15s %-8s %-10s %-10s\n" "───────────" "──────" "──────" "───" "───" "─────"
    
    for env in blue green; do
        local stats=$(get_container_stats "$env")
        IFS=',' read -r status memory cpu uptime <<< "$stats"
        
        local web_health=$(check_web_health "$WEB_PORT")
        local agent_status=$(check_agent_port "$AGENT_PORT")
        
        # Color coding
        local status_color=""
        local web_color=""
        local agent_color=""
        
        [[ "$status" == "running" ]] && status_color="${GREEN}" || status_color="${RED}"
        [[ "$web_health" == "healthy" ]] && web_color="${GREEN}" || web_color="${RED}"
        [[ "$agent_status" == "open" ]] && agent_color="${GREEN}" || agent_color="${RED}"
        
        # Mark active environment
        local env_display="$env"
        [[ "$env" == "$current_env" ]] && env_display="${env} (ACTIVE)"
        
        printf "%-12s %s%-10s%s %-15s %-8s %s%-10s%s %s%-10s%s\n" \
            "$env_display" \
            "$status_color" "$status" "${NC}" \
            "$memory" "$cpu" \
            "$web_color" "$web_health" "${NC}" \
            "$agent_color" "$agent_status" "${NC}"
    done
    
    echo -e "\n${BLUE}=== Network Information ===${NC}"
    echo -e "Web Interface: http://$(hostname -I | awk '{print $1}'):${WEB_PORT}"
    echo -e "Agent Connection: $(hostname -I | awk '{print $1}'):${AGENT_PORT}"
    
    if [[ -f "$STATE_FILE" ]]; then
        echo -e "\n${BLUE}=== Last Switch Information ===${NC}"
        local switch_time=$(grep -o '"switch_timestamp":\s*"[^"]*"' "$STATE_FILE" | cut -d'"' -f4 2>/dev/null || echo "N/A")
        local switch_method=$(grep -o '"switch_method":\s*"[^"]*"' "$STATE_FILE" | cut -d'"' -f4 2>/dev/null || echo "N/A")
        echo -e "Last Switch: $switch_time"
        echo -e "Switch Method: $switch_method"
    fi
    
    echo -e "\n${BLUE}=== Quick Actions ===${NC}"
    echo -e "Switch environments: $0 switch"
    echo -e "Health check: $0 health"
    echo -e "Full status: $0 status"
}

show_alerts() {
    echo -e "${YELLOW}=== Monitoring Alerts ===${NC}\n"
    
    local current_env=$(get_current_environment)
    local alerts=0
    
    # Check active environment health
    local active_stats=$(get_container_stats "$current_env")
    IFS=',' read -r status memory cpu uptime <<< "$active_stats"
    
    if [[ "$status" != "running" ]]; then
        error "CRITICAL: Active environment ($current_env) is not running!"
        ((alerts++))
    fi
    
    local web_health=$(check_web_health "$WEB_PORT")
    if [[ "$web_health" != "healthy" ]]; then
        error "CRITICAL: Web interface is not accessible!"
        ((alerts++))
    fi
    
    local agent_status=$(check_agent_port "$AGENT_PORT")
    if [[ "$agent_status" != "open" ]]; then
        warn "WARNING: Agent port is not accessible!"
        ((alerts++))
    fi
    
    # Check standby environment
    local standby_env="blue"
    [[ "$current_env" == "blue" ]] && standby_env="green"
    
    local standby_stats=$(get_container_stats "$standby_env")
    IFS=',' read -r standby_status _ _ _ <<< "$standby_stats"
    
    if [[ "$standby_status" == "running" ]]; then
        warn "INFO: Standby environment ($standby_env) is running (unexpected)"
        ((alerts++))
    fi
    
    if [[ $alerts -eq 0 ]]; then
        success "No alerts detected - system is healthy!"
    else
        warn "Total alerts: $alerts"
    fi
    
    return $alerts
}

show_logs() {
    local environment=${1:-$(get_current_environment)}
    local lines=${2:-50}
    local container_name="jenkins-${TEAM_NAME}-${environment}"
    
    echo -e "${BLUE}=== Recent Logs for $environment Environment (last $lines lines) ===${NC}\n"
    
    if $CONTAINER_RUNTIME inspect "$container_name" &>/dev/null; then
        $CONTAINER_RUNTIME logs --tail "$lines" "$container_name"
    else
        error "Container $container_name not found"
        return 1
    fi
}

main() {
    case "${1:-dashboard}" in
        monitor|watch)
            interval="${2:-5}"
            monitor_real_time "$interval"
            ;;
        dashboard|status)
            show_dashboard
            ;;
        alerts)
            show_alerts
            ;;
        logs)
            environment="${2:-}"
            lines="${3:-50}"
            show_logs "$environment" "$lines"
            ;;
        health)
            # Delegate to health check script
            health_script="${JENKINS_HOME}/scripts/blue-green-healthcheck-${TEAM_NAME}.sh"
            if [[ -x "$health_script" ]]; then
                "$health_script" "${2:-}"
            else
                error "Health check script not found: $health_script"
                exit 1
            fi
            ;;
        switch)
            # Delegate to switch script
            switch_script="${JENKINS_HOME}/scripts/blue-green-switch-${TEAM_NAME}.sh"
            if [[ -x "$switch_script" ]]; then
                "$switch_script" switch
            else
                error "Switch script not found: $switch_script"
                exit 1
            fi
            ;;
        *)
            echo "Usage: $0 {monitor|dashboard|alerts|logs|health|switch} [options]"
            echo ""
            echo "Commands:"
            echo "  monitor [interval]  - Real-time monitoring (default: 5s interval)"
            echo "  dashboard          - Show current status dashboard"
            echo "  alerts             - Show current alerts and warnings"
            echo "  logs [env] [lines] - Show recent logs (default: active env, 50 lines)"
            echo "  health [env]       - Run health check"
            echo "  switch             - Switch environments"
            echo ""
            echo "Examples:"
            echo "  $0 monitor 10      # Monitor with 10s intervals"
            echo "  $0 logs blue 100   # Show last 100 lines from blue environment"
            echo "  $0 alerts          # Check for current alerts"
            exit 1
            ;;
    esac
}

main "$@"