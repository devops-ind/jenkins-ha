# Jenkins Configuration as Code for {{ jenkins_master_config.team_name }}
# Environment: {{ jenkins_master_config.active_environment }}
# Generated by Ansible jenkins-master role

jenkins:
  systemMessage: |
    Jenkins Master for {{ jenkins_master_config.team_name | title }} Team
    Environment: {{ jenkins_master_config.active_environment | upper }}
    Managed by Ansible jenkins-master role
    
  numExecutors: 0  # Use only dynamic agents
  mode: EXCLUSIVE
  scmCheckoutRetryCount: 3
  
  # Security Configuration
  {% if jenkins_master_security_enabled %}
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          password: "${JENKINS_ADMIN_PASSWORD:-admin123}"
          properties:
            - "hudson.model.User$UserProperty":
                primaryView: "all"
  
  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  {% endif %}
  
  # Cloud Configuration for Dynamic Agents
  clouds:
    - docker:
        name: "{{ jenkins_master_config.team_name }}-docker-agents"
        dockerApi:
          dockerHost:
            uri: "unix:///var/run/docker.sock"
        templates:
          - labelString: "{{ jenkins_master_config.team_name }}-maven"
            dockerTemplateBase:
              image: "{{ jenkins_master_image_registry }}/jenkins/maven-agent:{{ jenkins_master_dynamic_agent_image_tag }}"
              network: "{{ jenkins_master_network_name }}"
              mounts:
                - "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-shared,destination={{ jenkins_master_shared_path }}"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-m2-cache,destination=/home/jenkins/.m2"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-cache,destination=/home/jenkins/.cache"
            remoteFs: "{{ jenkins_master_shared_path }}"
            connector:
              attach:
                user: "jenkins"
            instanceCapStr: "10"
            retentionStrategy:
              idleMinutes: 10
            nodeProperties:
              - envVars:
                  env:
                    - key: "TEAM_NAME"
                      value: "{{ jenkins_master_config.team_name }}"
                    - key: "JENKINS_ENVIRONMENT"
                      value: "{{ jenkins_master_config.active_environment }}"
          
          - labelString: "{{ jenkins_master_config.team_name }}-python"
            dockerTemplateBase:
              image: "{{ jenkins_master_image_registry }}/jenkins/python-agent:{{ jenkins_master_dynamic_agent_image_tag }}"
              network: "{{ jenkins_master_network_name }}"
              mounts:
                - "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-shared,destination={{ jenkins_master_shared_path }}"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-pip-cache,destination=/home/jenkins/.cache/pip"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-cache,destination=/home/jenkins/.cache"
            remoteFs: "{{ jenkins_master_shared_path }}"
            connector:
              attach:
                user: "jenkins"
            instanceCapStr: "5"
            retentionStrategy:
              idleMinutes: 10
            nodeProperties:
              - envVars:
                  env:
                    - key: "TEAM_NAME"
                      value: "{{ jenkins_master_config.team_name }}"
                    - key: "JENKINS_ENVIRONMENT"
                      value: "{{ jenkins_master_config.active_environment }}"
          
          - labelString: "{{ jenkins_master_config.team_name }}-nodejs"
            dockerTemplateBase:
              image: "{{ jenkins_master_image_registry }}/jenkins/nodejs-agent:{{ jenkins_master_dynamic_agent_image_tag }}"
              network: "{{ jenkins_master_network_name }}"
              mounts:
                - "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-shared,destination={{ jenkins_master_shared_path }}"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-npm-cache,destination=/home/jenkins/.npm"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-cache,destination=/home/jenkins/.cache"
            remoteFs: "{{ jenkins_master_shared_path }}"
            connector:
              attach:
                user: "jenkins"
            instanceCapStr: "5"
            retentionStrategy:
              idleMinutes: 10
            nodeProperties:
              - envVars:
                  env:
                    - key: "TEAM_NAME"
                      value: "{{ jenkins_master_config.team_name }}"
                    - key: "JENKINS_ENVIRONMENT"
                      value: "{{ jenkins_master_config.active_environment }}"

  # Global Tool Configuration
  globalNodeProperties:
    - envVars:
        env:
          - key: "TEAM_NAME"
            value: "{{ jenkins_master_config.team_name }}"
          - key: "JENKINS_ENVIRONMENT"
            value: "{{ jenkins_master_config.active_environment }}"
          - key: "JENKINS_URL"
            value: "http://{{ ansible_default_ipv4.address }}:{{ jenkins_master_config.ports.web }}"

# Credentials Configuration
credentials:
  system:
    domainCredentials:
      - credentials:
          {% if jenkins_master_config.credentials is defined %}
          {% for cred in jenkins_master_config.credentials %}
          - {{ cred.type }}:
              scope: {{ cred.scope | default('GLOBAL') }}
              id: "{{ cred.id }}"
              {% for key, value in cred.items() %}
              {% if key not in ['type', 'scope', 'id'] %}
              {{ key }}: "{{ value }}"
              {% endif %}
              {% endfor %}
          {% endfor %}
          {% endif %}

# Job DSL Configuration with Sandbox Security
jobs:
  - script: |
      folder('{{ jenkins_master_config.team_name | title }}') {
          displayName('{{ jenkins_master_config.team_name | title }} Team Jobs')
          description('Jobs for the {{ jenkins_master_config.team_name }} team - {{ jenkins_master_config.active_environment }} environment')
      }
      
      // DSL Seed Job with Sandbox enabled - creates team-specific jobs
      job('{{ jenkins_master_config.team_name | title }}/dsl-seed-job') {
          displayName('DSL Seed Job (Team-specific)')
          description('Creates team-specific jobs and infrastructure pipelines using embedded DSL scripts')
          
          label('{{ jenkins_master_config.team_name }}-maven')
          
          steps {
              dsl {
                  // Use embedded DSL script instead of SCM
                  text('''
{% if jenkins_master_config.seed_jobs is defined and jenkins_master_config.seed_jobs | length > 0 %}
{% for seed_job in jenkins_master_config.seed_jobs %}
{% if seed_job.type == 'pipeline' %}
{% if seed_job.pipeline_source | default('embedded') == 'external' %}
// External pipeline job - references Jenkinsfile from SCM
pipelineJob("{{ jenkins_master_config.team_name | title }}/{{ seed_job.folder | default('Applications') }}/{{ seed_job.name }}") {
    displayName('{{ seed_job.display_name | default(seed_job.name) }}')
    description('{{ seed_job.description | default("Auto-generated pipeline for " + seed_job.name) }} - External Pipeline')
    
    definition {
        cpsScm {
            scm {
                git {
                    remote {
                        url('{{ seed_job.git_repo | default("https://github.com/your-org/jenkins-ha.git") }}')
                        credentials('{{ jenkins_master_config.team_name }}-git-credentials')
                    }
                    branches('*/{{ seed_job.git_branch | default("main") }}')
                    extensions {
                        cleanBeforeCheckout()
                        cloneOptions {
                            shallow(true)
                            depth(1)
                        }
                    }
                }
            }
            scriptPath('{{ seed_job.jenkinsfile_path | default("Jenkinsfile") }}')
            lightweight(true)
        }
    }
{% else %}
// Embedded pipeline job - DSL-generated pipeline
pipelineJob("{{ jenkins_master_config.team_name | title }}/{{ seed_job.folder | default('Applications') }}/{{ seed_job.name }}") {
    displayName('{{ seed_job.display_name | default(seed_job.name) }}')
    description('{{ seed_job.description | default("Auto-generated pipeline for " + seed_job.name) }} - Embedded Pipeline')
    
    definition {
        cps {
            script(\'\'\'
                pipeline {
                    agent { label '{{ jenkins_master_config.team_name }}-{{ seed_job.agent_label | default("maven") }}' }
                    
{% if seed_job.parameters is defined %}
                    parameters {
{% for param in seed_job.parameters %}
{% if param.type == 'string' %}
                        string(name: '{{ param.name }}', defaultValue: '{{ param.default | default("") }}', description: '{{ param.description | default("") }}')
{% elif param.type == 'boolean' %}
                        booleanParam(name: '{{ param.name }}', defaultValue: {{ param.default | default(false) | lower }}, description: '{{ param.description | default("") }}')
{% elif param.type == 'choice' %}
                        choice(name: '{{ param.name }}', choices: {{ param.choices | to_json }}, description: '{{ param.description | default("") }}')
{% endif %}
{% endfor %}
                    }
{% endif %}
                    
{% if seed_job.triggers is defined %}
                    triggers {
{% for trigger in seed_job.triggers %}
{% if trigger.type == 'cron' %}
                        cron('{{ trigger.schedule }}')
{% elif trigger.type == 'scm' %}
                        pollSCM('{{ trigger.schedule | default("H/5 * * * *") }}')
{% endif %}
{% endfor %}
                    }
{% endif %}
                    
                    stages {
                        stage('Pre-Deployment Validation') {
{% if seed_job.deployment_gates is defined and seed_job.deployment_gates.pre_deployment is defined %}
                            steps {
                                echo "🔍 Running pre-deployment validation gates..."
{% for gate in seed_job.deployment_gates.pre_deployment %}
                                script {
                                    // {{ gate }} validation
                                    echo "Validating: {{ gate }}"
                                }
{% endfor %}
                            }
{% else %}
                            steps {
                                echo "🔍 Standard pre-deployment validation"
                                echo "Team: {{ jenkins_master_config.team_name }}"
                                echo "Environment: {{ jenkins_master_config.active_environment }}"
                                echo "Pipeline: {{ seed_job.display_name | default(seed_job.name) }}"
                            }
{% endif %}
                        }
                        
                        stage('Security Scanning') {
{% if seed_job.parameters is defined and seed_job.parameters | selectattr('name', 'equalto', 'SECURITY_SCAN') | list | length > 0 %}
                            when {
                                expression { params.SECURITY_SCAN == true }
                            }
{% endif %}
                            steps {
                                echo "🔒 Running security scans..."
{% if 'maven' in seed_job.name %}
                                sh '''
                                    echo "Running Maven security scan with OWASP dependency check"
                                    # mvn org.owasp:dependency-check-maven:check
                                    echo "Maven security scan completed"
                                '''
{% elif 'python' in seed_job.name %}
                                sh '''
                                    echo "Running Python security scan with safety and bandit"
                                    # pip install safety bandit
                                    # safety check
                                    # bandit -r . -f json -o bandit-report.json
                                    echo "Python security scan completed"
                                '''
{% elif 'nodejs' in seed_job.name %}
                                sh '''
                                    echo "Running Node.js security scan with npm audit"
                                    # npm audit --audit-level high
                                    echo "Node.js security scan completed"
                                '''
{% endif %}
                                // Container security scan with Trivy
                                sh '''
                                    if command -v trivy >/dev/null 2>&1; then
                                        echo "Running Trivy container security scan"
                                        # trivy image --exit-code 1 --severity HIGH,CRITICAL your-image:tag
                                    else
                                        echo "Trivy not available, skipping container scan"
                                    fi
                                '''
                            }
                        }
                        
                        stage('Build & Test') {
                            parallel {
                                stage('Application Build') {
                                    steps {
{% if 'maven' in seed_job.name %}
                                        sh '''
                                            echo "🔨 Building Maven application..."
                                            # mvn clean compile -DskipTests
                                            echo "Maven compilation completed"
                                        '''
{% elif 'python' in seed_job.name %}
                                        sh '''
                                            echo "🐍 Building Python application..."
                                            echo "Python version: ${params.PYTHON_VERSION:-3.11}"
                                            # python${params.PYTHON_VERSION:-3.11} -m pip install -r requirements.txt
                                            # python setup.py build
                                            echo "Python build completed"
                                        '''
{% elif 'nodejs' in seed_job.name %}
                                        sh '''
                                            echo "📦 Building Node.js application..."
                                            echo "Node version: ${params.NODE_VERSION:-18}"
                                            # npm ci
                                            # npm run build
                                            echo "Node.js build completed"
                                        '''
{% elif 'infrastructure' in seed_job.name or 'health' in seed_job.name %}
                                        sh '''
                                            echo "🏗️ Infrastructure health validation..."
                                            ansible-playbook --version || echo "Ansible not available"
                                            echo "Infrastructure check prepared"
                                        '''
{% elif 'backup' in seed_job.name %}
                                        sh '''
                                            echo "💾 Backup procedure validation..."
                                            echo "RTO Target: ${params.RTO_TARGET:-15} minutes"
                                            echo "RPO Target: ${params.RPO_TARGET:-5} minutes"
                                            echo "Backup validation completed"
                                        '''
{% elif 'image' in seed_job.name %}
                                        sh '''
                                            echo "🐳 Docker image building..."
                                            # docker build -t ${BUILD_TAG} .
                                            echo "Image build completed"
                                        '''
{% else %}
                                        sh 'echo "🔧 Generic build process completed"'
{% endif %}
                                    }
                                }
                                
                                stage('Quality Gates') {
{% if seed_job.quality_gates is defined %}
                                    steps {
                                        echo "📊 Running quality gate validations..."
{% if seed_job.quality_gates.code_coverage_min is defined %}
                                        script {
                                            echo "Code coverage threshold: {{ seed_job.quality_gates.code_coverage_min }}"
                                            // Implement coverage check
                                        }
{% endif %}
{% if seed_job.quality_gates.security_scan_threshold is defined %}
                                        script {
                                            echo "Security scan threshold: {{ seed_job.quality_gates.security_scan_threshold }}"
                                            // Implement security threshold check
                                        }
{% endif %}
                                    }
{% else %}
                                    steps {
                                        echo "📊 Standard quality gates..."
                                        sh 'echo "Running basic quality checks"'
                                    }
{% endif %}
                                }
                            }
                        }
                        
{% if seed_job.deploy_enabled | default(false) %}
                        stage('Deployment Strategy') {
{% if seed_job.blue_green_enabled | default(false) %}
                            steps {
                                echo "🔄 Blue-Green Deployment Strategy"
                                script {
                                    def targetEnv = params.DEPLOY_ENVIRONMENT ?: 'staging'
                                    echo "Deploying to environment: ${targetEnv}"
                                    
                                    // Blue-Green deployment logic
                                    sh '''
                                        echo "Preparing blue-green deployment..."
                                        echo "Current environment: {{ jenkins_master_config.active_environment }}"
                                        echo "Target environment: ${targetEnv}"
                                        
                                        # Blue-green switch validation
                                        if [ "${targetEnv}" = "blue" ] || [ "${targetEnv}" = "green" ]; then
                                            echo "Valid blue-green target: ${targetEnv}"
                                        else
                                            echo "Standard deployment to: ${targetEnv}"
                                        fi
                                    '''
                                }
                            }
{% elif seed_job.canary_enabled | default(false) %}
                            steps {
                                echo "🕊️ Canary Deployment Strategy"
                                script {
                                    def canaryPercent = params.CANARY_PERCENTAGE ?: '10'
                                    echo "Canary traffic percentage: ${canaryPercent}%"
                                    
                                    // Canary deployment logic
                                    sh "echo 'Deploying canary with ${canaryPercent}% traffic'"
                                }
                            }
{% else %}
                            steps {
                                echo "🚀 Standard Deployment Strategy"
                                sh 'echo "Executing standard deployment"'
                            }
{% endif %}
                        }
                        
{% if seed_job.deployment_gates is defined and seed_job.deployment_gates.post_deployment is defined %}
                        stage('Post-Deployment Validation') {
                            steps {
                                echo "✅ Running post-deployment validation gates..."
{% for gate in seed_job.deployment_gates.post_deployment %}
                                script {
                                    echo "Validating: {{ gate }}"
                                    // Implement specific validation logic
                                }
{% endfor %}
                            }
                        }
{% endif %}
{% endif %}
                    }
                    
                    post {
                        always {
                            echo 'Pipeline completed for {{ seed_job.name }}'
                        }
                        success {
                            echo '{{ seed_job.name }} succeeded'
                        }
                        failure {
                            echo '{{ seed_job.name }} failed'
                        }
                    }
                }
            \'\'\')
            sandbox(true)
        }
    }
    
    properties {
        buildDiscarder {
            strategy {
                logRotator {
                    numToKeepStr('{{ seed_job.builds_to_keep | default("10") }}')
                    daysToKeepStr('{{ seed_job.days_to_keep | default("30") }}')
                }
            }
        }
    }
    
{% if seed_job.triggers is defined %}
    triggers {
{% for trigger in seed_job.triggers %}
{% if trigger.type == 'cron' %}
        cron('{{ trigger.schedule }}')
{% elif trigger.type == 'scm' %}
        pollSCM('{{ trigger.schedule | default("H/5 * * * *") }}')
{% elif trigger.type == 'webhook' %}
        genericTrigger {
            token('{{ trigger.token | default(seed_job.name + "-webhook") }}')
            printContributedVariables(true)
            printPostContent(true)
        }
{% endif %}
{% endfor %}
    }
{% endif %}
    
    properties {
        buildDiscarder {
            strategy {
                logRotator {
                    numToKeepStr('{{ seed_job.builds_to_keep | default("20") }}')
                    daysToKeepStr('{{ seed_job.days_to_keep | default("30") }}')
                    artifactNumToKeepStr('{{ seed_job.artifacts_to_keep | default("10") }}')
                }
            }
        }
{% if seed_job.sli_thresholds is defined %}
        // SLI monitoring properties
        pipelineConfigurationProperties([
            [$class: 'SLIConfiguration',
             thresholds: [
{% for key, value in seed_job.sli_thresholds.items() %}
                 '{{ key }}': '{{ value }}',
{% endfor %}
             ]
            ]
        ])
{% endif %}
    }
}
{% endif %}

{% endif %}
{% endfor %}
{% endif %}

// Team-specific folder creation for better organization
folder("{{ jenkins_master_config.team_name | title }}/Infrastructure") {
    displayName('Infrastructure Jobs')
    description('Infrastructure and operational jobs for {{ jenkins_master_config.team_name }} team')
}

folder("{{ jenkins_master_config.team_name | title }}/Applications") {
    displayName('Application Pipelines')
    description('Application deployment pipelines for {{ jenkins_master_config.team_name }} team')
}

folder("{{ jenkins_master_config.team_name | title }}/Monitoring") {
    displayName('Monitoring & Alerting')
    description('Monitoring and alerting jobs for {{ jenkins_master_config.team_name }} team')
}

// Blue-Green Environment Status Dashboard Job
job("{{ jenkins_master_config.team_name | title }}/Infrastructure/blue-green-status") {
    displayName('Blue-Green Environment Status')
    description('Monitor and display blue-green environment status')
    
    steps {
        shell('''
            echo "=== Blue-Green Environment Status ==="
            echo "Team: {{ jenkins_master_config.team_name }}"
            echo "Active Environment: {{ jenkins_master_config.active_environment }}"
            echo "Timestamp: $(date)"
            
            # Add health checks for both environments
            echo "Blue Environment Status: Checking..."
            echo "Green Environment Status: Checking..."
            
            # SLI metrics collection
            echo "Collecting SLI metrics..."
        ''')
    }
    
    triggers {
        cron('H/5 * * * *')  // Every 5 minutes
    }
}

// SLI Dashboard and Alerting Pipeline
pipelineJob("{{ jenkins_master_config.team_name | title }}/Monitoring/sli-dashboard") {
    displayName('SLI Dashboard & Alerting')
    description('Monitor SLIs and trigger alerts for {{ jenkins_master_config.team_name }} team')
    
    definition {
        cps {
            script('''
                pipeline {
                    agent { label '{{ jenkins_master_config.team_name }}-python' }
                    
                    options {
                        buildDiscarder(logRotator(numToKeepStr: '50'))
                        timeout(time: 10, unit: 'MINUTES')
                    }
                    
                    stages {
                        stage('SLI Collection') {
                            steps {
                                echo "📊 Collecting SLI metrics for {{ jenkins_master_config.team_name }}"
                                script {
                                    // Collect deployment frequency
                                    def deploymentFreq = sh(
                                        script: "echo '12/day'  # Placeholder",
                                        returnStdout: true
                                    ).trim()
                                    
                                    // Collect lead time
                                    def leadTime = sh(
                                        script: "echo '45min'  # Placeholder",
                                        returnStdout: true
                                    ).trim()
                                    
                                    echo "Deployment Frequency: ${deploymentFreq}"
                                    echo "Lead Time: ${leadTime}"
                                }
                            }
                        }
                        
                        stage('Alerting') {
                            steps {
                                echo "🚨 Evaluating alerting conditions"
                                script {
                                    // Example SLI threshold checks
                                    echo "Checking deployment frequency threshold..."
                                    echo "Checking error rate threshold..."
                                    echo "Checking recovery time threshold..."
                                }
                            }
                        }
                    }
                }
            ''')
            sandbox(true)
        }
    }
    
    triggers {
        cron('H/10 * * * *')  // Every 10 minutes
    }
}
                  ''')
                  removeAction('DISABLE')
                  removeViewAction('DELETE')
                  sandbox(true)
              }
          }
          
          triggers {
              // Multi-layered trigger strategy for deployment engineering
              cron('H 6 * * *')  // Daily maintenance window
              
              // SCM polling for configuration changes (if using Git for config)
              // pollSCM('H/15 * * * *')
          }
          
          // Enhanced properties for deployment engineering
          properties {
              buildDiscarder {
                  strategy {
                      logRotator {
                          numToKeepStr('100')  // Keep more seed job history
                          daysToKeepStr('90')
                      }
                  }
              }
              
              // Disable concurrent builds to prevent DSL conflicts
              disableConcurrentBuilds()
              
              // Add parameters for manual trigger
              parameters {
                  booleanParam {
                      name('FORCE_RECREATE')
                      defaultValue(false)
                      description('Force recreation of all team jobs')
                  }
                  booleanParam {
                      name('VALIDATE_ONLY')
                      defaultValue(false)
                      description('Validate DSL scripts without creating jobs')
                  }
              }
          }
          
          publishers {
              // Notify on DSL job failures
              mailer('${DEVOPS_EMAIL:-devops@company.com}', false, true)
          }
      }

# Security Configuration
security:
  {% if jenkins_master_csrf_protection %}
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false
  {% endif %}
  
  # Agent protocols
  remotingCLI:
    enabled: false
  
  # Disable CLI over remoting
  cli:
    enabled: false
  
  # Script Security Configuration
  scriptApproval:
    approvedScriptHashes:
      # Pre-approve safe script hashes for DSL jobs
      - "7c5c98b70b5b6b7b8b7d8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0"
    approvedSignatures:
      # Pre-approve safe method signatures for DSL
      - "method groovy.lang.GroovyObject getProperty java.lang.String"
      - "method java.lang.Object equals java.lang.Object"
      - "method java.lang.String toString"
      - "method java.util.Map get java.lang.Object"
      - "method java.util.Map put java.lang.Object java.lang.Object"
      - "staticMethod jenkins.model.Jenkins getInstance"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods println java.lang.Object"
      - "new java.util.ArrayList"
      - "new java.util.HashMap"
      - "new java.lang.String java.lang.String"

# Unclassified Plugin Configuration
unclassified:
  # Job DSL Security Configuration
  globalJobDslSecurityConfiguration:
    useScriptSecurity: true
    
  # Script Security Configuration
  scriptApproval:
    # Enable sandbox by default for user scripts
    approvedScriptHashes: []
    approvedSignatures:
      # Basic Groovy operations
      - "method groovy.lang.GroovyObject invokeMethod java.lang.String java.lang.Object"
      - "method groovy.lang.GroovyObject getProperty java.lang.String"
      - "method groovy.lang.GroovyObject setProperty java.lang.String java.lang.Object"
      - "method java.lang.Object equals java.lang.Object"
      - "method java.lang.Object toString"
      - "method java.lang.String valueOf java.lang.Object"
      - "method java.util.Collection size"
      - "method java.util.Map get java.lang.Object"
      - "method java.util.Map put java.lang.Object java.lang.Object"
      - "method java.util.Map containsKey java.lang.Object"
      # Jenkins API operations commonly used in DSL
      - "staticMethod jenkins.model.Jenkins getInstance"
      - "method jenkins.model.Jenkins getItemByFullName java.lang.String"
      - "method hudson.model.ItemGroup getItem java.lang.String"
      - "staticMethod hudson.model.Hudson getInstance"
      # Safe constructors
      - "new java.util.ArrayList"
      - "new java.util.HashMap"
      - "new java.util.LinkedHashMap"
      - "new java.lang.String java.lang.String"
      - "new java.lang.StringBuilder"
      # Date and time operations
      - "new java.util.Date"
      - "method java.util.Date getTime"
      # String operations
      - "method java.lang.String replace java.lang.CharSequence java.lang.CharSequence"
      - "method java.lang.String replaceAll java.lang.String java.lang.String"
      - "method java.lang.String split java.lang.String"
      - "method java.lang.String trim"
      - "method java.lang.String toLowerCase"
      - "method java.lang.String toUpperCase"
      # System properties (safe ones)
      - "staticMethod java.lang.System getProperty java.lang.String"
      # File operations (limited)
      - "method java.io.File exists"
      - "method java.io.File isDirectory"
      - "method java.io.File getName"
    
  {% if jenkins_master_monitoring_enabled %}
  # Monitoring Configuration  
  prometheusConfiguration:
    collectDiskUsage: true
    collectNodeStatus: true
    countSuccessfulBuilds: true
    countUnstableBuilds: true
    countFailedBuilds: true
    fetchTestResults: true
    processingDisabledBuilds: true
    collectBuildStatus: true
  {% endif %}
  
  # Location configuration
  location:
    adminAddress: "${JENKINS_ADMIN_EMAIL:-admin@company.com}"
    url: "${JENKINS_URL}"
    
  # Mailer configuration
  mailer:
    smtpHost: "${SMTP_HOST:-smtp.company.com}"
    smtpPort: "${SMTP_PORT:-587}"
    useSsl: false
    charset: "UTF-8"