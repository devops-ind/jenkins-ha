# Jenkins Configuration as Code for {{ jenkins_master_config.team_name }}
# Environment: {{ jenkins_master_config.active_environment }}
# Generated by Ansible jenkins-master role

jenkins:
  systemMessage: |
    Jenkins Master for {{ jenkins_master_config.team_name | title }} Team
    Environment: {{ jenkins_master_config.active_environment | upper }}
    Managed by Ansible jenkins-master role
    
  numExecutors: 0  # Use only dynamic agents
  mode: EXCLUSIVE
  scmCheckoutRetryCount: 3
  
  # Security Configuration
  {% if jenkins_master_security_enabled %}
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          password: "${JENKINS_ADMIN_PASSWORD:-admin123}"
          properties:
            - "hudson.model.User$UserProperty":
                primaryView: "all"
  
  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  {% endif %}
  
  # Cloud Configuration for Dynamic Agents
  clouds:
    - docker:
        name: "{{ jenkins_master_config.team_name }}-docker-agents"
        dockerApi:
          dockerHost:
            uri: "unix:///var/run/docker.sock"
        templates:
          - labelString: "{{ jenkins_master_config.team_name }}-maven"
            dockerTemplateBase:
              image: "{{ jenkins_master_image_registry }}/jenkins/maven-agent:{{ jenkins_master_dynamic_agent_image_tag }}"
              network: "{{ jenkins_master_network_name }}"
              mounts:
                - "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-shared,destination={{ jenkins_master_shared_path }}"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-m2-cache,destination=/home/jenkins/.m2"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-cache,destination=/home/jenkins/.cache"
            remoteFs: "{{ jenkins_master_shared_path }}"
            connector:
              attach:
                user: "jenkins"
            instanceCapStr: "10"
            retentionStrategy:
              idleMinutes: 10
            nodeProperties:
              - envVars:
                  env:
                    - key: "TEAM_NAME"
                      value: "{{ jenkins_master_config.team_name }}"
                    - key: "JENKINS_ENVIRONMENT"
                      value: "{{ jenkins_master_config.active_environment }}"
          
          - labelString: "{{ jenkins_master_config.team_name }}-python"
            dockerTemplateBase:
              image: "{{ jenkins_master_image_registry }}/jenkins/python-agent:{{ jenkins_master_dynamic_agent_image_tag }}"
              network: "{{ jenkins_master_network_name }}"
              mounts:
                - "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-shared,destination={{ jenkins_master_shared_path }}"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-pip-cache,destination=/home/jenkins/.cache/pip"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-cache,destination=/home/jenkins/.cache"
            remoteFs: "{{ jenkins_master_shared_path }}"
            connector:
              attach:
                user: "jenkins"
            instanceCapStr: "5"
            retentionStrategy:
              idleMinutes: 10
            nodeProperties:
              - envVars:
                  env:
                    - key: "TEAM_NAME"
                      value: "{{ jenkins_master_config.team_name }}"
                    - key: "JENKINS_ENVIRONMENT"
                      value: "{{ jenkins_master_config.active_environment }}"
          
          - labelString: "{{ jenkins_master_config.team_name }}-nodejs"
            dockerTemplateBase:
              image: "{{ jenkins_master_image_registry }}/jenkins/nodejs-agent:{{ jenkins_master_dynamic_agent_image_tag }}"
              network: "{{ jenkins_master_network_name }}"
              mounts:
                - "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-shared,destination={{ jenkins_master_shared_path }}"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-npm-cache,destination=/home/jenkins/.npm"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-cache,destination=/home/jenkins/.cache"
            remoteFs: "{{ jenkins_master_shared_path }}"
            connector:
              attach:
                user: "jenkins"
            instanceCapStr: "5"
            retentionStrategy:
              idleMinutes: 10
            nodeProperties:
              - envVars:
                  env:
                    - key: "TEAM_NAME"
                      value: "{{ jenkins_master_config.team_name }}"
                    - key: "JENKINS_ENVIRONMENT"
                      value: "{{ jenkins_master_config.active_environment }}"
          
          - labelString: "{{ jenkins_master_config.team_name }}-dind"
            dockerTemplateBase:
              image: "{{ jenkins_master_image_registry }}/jenkins/dind-agent:{{ jenkins_master_dynamic_agent_image_tag }}"
              network: "{{ jenkins_master_network_name }}"
              privileged: true
              mounts:
                - "type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-shared,destination={{ jenkins_master_shared_path }}"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-docker-cache,destination=/var/lib/docker"
                - "type=volume,source=jenkins-{{ jenkins_master_config.team_name }}-cache,destination=/home/jenkins/.cache"
            remoteFs: "{{ jenkins_master_shared_path }}"
            connector:
              attach:
                user: "jenkins"
            instanceCapStr: "3"
            retentionStrategy:
              idleMinutes: 15
            nodeProperties:
              - envVars:
                  env:
                    - key: "TEAM_NAME"
                      value: "{{ jenkins_master_config.team_name }}"
                    - key: "JENKINS_ENVIRONMENT"
                      value: "{{ jenkins_master_config.active_environment }}"

  # Global Tool Configuration
  globalNodeProperties:
    - envVars:
        env:
          - key: "TEAM_NAME"
            value: "{{ jenkins_master_config.team_name }}"
          - key: "JENKINS_ENVIRONMENT"
            value: "{{ jenkins_master_config.active_environment }}"
          - key: "JENKINS_URL"
            value: "http://{{ ansible_default_ipv4.address }}:{{ jenkins_master_config.ports.web }}"

# Credentials Configuration
credentials:
  system:
    domainCredentials:
      - credentials:
          {% if jenkins_master_config.credentials is defined %}
          {% for cred in jenkins_master_config.credentials %}
          - {{ cred.type }}:
              scope: {{ cred.scope | default('GLOBAL') }}
              id: "{{ cred.id }}"
              {% for key, value in cred.items() %}
              {% if key not in ['type', 'scope', 'id'] %}
              {{ key }}: "{{ value }}"
              {% endif %}
              {% endfor %}
          {% endfor %}
          {% endif %}

# NO JOB DSL IN JCASC - COMPLETELY REMOVED FOR PRODUCTION SAFETY
# All jobs are created by external DSL files loaded via Job DSL plugin UI
# This eliminates any possibility of Jenkins startup failures due to DSL syntax errors

# Security Configuration
security:
  {% if jenkins_master_csrf_protection %}
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false
  {% endif %}
  
  # Agent protocols
  remotingCLI:
    enabled: false
  
  # Disable CLI over remoting
  cli:
    enabled: false
  
  # Script Security Configuration
  scriptApproval:
    approvedScriptHashes:
      # Pre-approve safe script hashes for DSL jobs
      - "7c5c98b70b5b6b7b8b7d8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0"
    approvedSignatures:
      # Pre-approve safe method signatures for DSL
      - "method groovy.lang.GroovyObject getProperty java.lang.String"
      - "method java.lang.Object equals java.lang.Object"
      - "method java.lang.String toString"
      - "method java.util.Map get java.lang.Object"
      - "method java.util.Map put java.lang.Object java.lang.Object"
      - "staticMethod jenkins.model.Jenkins getInstance"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods println java.lang.Object"
      - "new java.util.ArrayList"
      - "new java.util.HashMap"
      - "new java.lang.String java.lang.String"

# Unclassified Plugin Configuration
unclassified:
  # Job DSL Security Configuration
  globalJobDslSecurityConfiguration:
    useScriptSecurity: true
    
  # Script Security Configuration
  scriptApproval:
    # Enable sandbox by default for user scripts
    approvedScriptHashes: []
    approvedSignatures:
      # Basic Groovy operations
      - "method groovy.lang.GroovyObject invokeMethod java.lang.String java.lang.Object"
      - "method groovy.lang.GroovyObject getProperty java.lang.String"
      - "method groovy.lang.GroovyObject setProperty java.lang.String java.lang.Object"
      - "method java.lang.Object equals java.lang.Object"
      - "method java.lang.Object toString"
      - "method java.lang.String valueOf java.lang.Object"
      - "method java.util.Collection size"
      - "method java.util.Map get java.lang.Object"
      - "method java.util.Map put java.lang.Object java.lang.Object"
      - "method java.util.Map containsKey java.lang.Object"
      # Jenkins API operations commonly used in DSL
      - "staticMethod jenkins.model.Jenkins getInstance"
      - "method jenkins.model.Jenkins getItemByFullName java.lang.String"
      - "method hudson.model.ItemGroup getItem java.lang.String"
      - "staticMethod hudson.model.Hudson getInstance"
      # Safe constructors
      - "new java.util.ArrayList"
      - "new java.util.HashMap"
      - "new java.util.LinkedHashMap"
      - "new java.lang.String java.lang.String"
      - "new java.lang.StringBuilder"
      # Date and time operations
      - "new java.util.Date"
      - "method java.util.Date getTime"
      # String operations
      - "method java.lang.String replace java.lang.CharSequence java.lang.CharSequence"
      - "method java.lang.String replaceAll java.lang.String java.lang.String"
      - "method java.lang.String split java.lang.String"
      - "method java.lang.String trim"
      - "method java.lang.String toLowerCase"
      - "method java.lang.String toUpperCase"
      # System properties (safe ones)
      - "staticMethod java.lang.System getProperty java.lang.String"
      # File operations (limited)
      - "method java.io.File exists"
      - "method java.io.File isDirectory"
      - "method java.io.File getName"
    
  {% if jenkins_master_monitoring_enabled %}
  # Monitoring Configuration  
  prometheusConfiguration:
    collectDiskUsage: true
    collectNodeStatus: true
    countSuccessfulBuilds: true
    countUnstableBuilds: true
    countFailedBuilds: true
    fetchTestResults: true
    processingDisabledBuilds: true
    collectBuildStatus: true
  {% endif %}
  
  # Location configuration
  location:
    adminAddress: "${JENKINS_ADMIN_EMAIL:-admin@company.com}"
    url: "${JENKINS_URL}"
    
  # Mailer configuration
  mailer:
    smtpHost: "${SMTP_HOST:-smtp.company.com}"
    smtpPort: "${SMTP_PORT:-587}"
    useSsl: false
    charset: "UTF-8"