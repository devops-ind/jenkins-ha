#!/bin/bash
# Blue-Green Health Check Script for {{ item.team_name }}
# Generated by Ansible jenkins-master role

set -euo pipefail

TEAM_NAME="{{ item.team_name }}"
CONTAINER_RUNTIME="{{ jenkins_master_container_runtime }}"
WEB_PORT="{{ item.ports.web }}"
AGENT_PORT="{{ item.ports.agent }}"
JENKINS_HOME="{{ jenkins_home_dir }}"
CONFIG_DIR="{{ jenkins_master_custom_build_dir }}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1" >&2; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

health_check() {
    local environment=${1:-}
    local failed_checks=0
    local total_checks=0
    
    if [[ -z "$environment" ]]; then
        # Get current active environment from state file
        if [[ -f "${CONFIG_DIR}/${TEAM_NAME}/blue-green-state.json" ]]; then
            environment=$(grep -o '"active_environment":\s*"[^"]*"' "${CONFIG_DIR}/${TEAM_NAME}/blue-green-state.json" | cut -d'"' -f4)
        elif [[ -f "${JENKINS_HOME}/${TEAM_NAME}/blue-green-state.json" ]]; then
            # Fallback to old location for backward compatibility
            environment=$(grep -o '"active_environment":\s*"[^"]*"' "${JENKINS_HOME}/${TEAM_NAME}/blue-green-state.json" | cut -d'"' -f4)
        else
            environment="blue"  # Default fallback
        fi
    fi
    
    log "Performing health check for ${environment} environment..."
    echo -e "\n${BLUE}=== Container Health Check ===${NC}"
    
    # Check 1: Container existence
    ((total_checks++))
    local container_name="jenkins-${TEAM_NAME}-${environment}"
    if $CONTAINER_RUNTIME inspect "$container_name" &>/dev/null; then
        success "✓ Container $container_name exists"
    else
        error "✗ Container $container_name does not exist"
        ((failed_checks++))
        return 1
    fi
    
    # Check 2: Container status
    ((total_checks++))
    local status=$($CONTAINER_RUNTIME inspect "$container_name" --format='{{ '{{' }}.State.Status{{ '}}' }}')
    if [[ "$status" == "running" ]]; then
        success "✓ Container is running"
    else
        error "✗ Container is not running (status: $status)"
        ((failed_checks++))
    fi
    
    # Check 3: Container health (if available)
    ((total_checks++))
    local health_status=$($CONTAINER_RUNTIME inspect "$container_name" --format='{{ '{{' }}.State.Health.Status{{ '}}' }}' 2>/dev/null || echo "N/A")
    if [[ "$health_status" == "healthy" ]]; then
        success "✓ Container health status: healthy"
    elif [[ "$health_status" == "N/A" ]]; then
        warn "⚠ Container health check not configured"
    else
        error "✗ Container health status: $health_status"
        ((failed_checks++))
    fi
    
    echo -e "\n${BLUE}=== Network Connectivity ===${NC}"
    
    # Determine actual ports based on environment
    local actual_web_port=$WEB_PORT
    local actual_agent_port=$AGENT_PORT
    
    if [[ "$environment" == "green" ]]; then
        actual_web_port=$((WEB_PORT + 100))
        actual_agent_port=$((AGENT_PORT + 100))
    fi
    
    # Check 4: Web port accessibility
    ((total_checks++))
    if curl -f -s --max-time 10 "http://localhost:${actual_web_port}/login" &>/dev/null; then
        success "✓ Web interface accessible on port $actual_web_port ($environment)"
    else
        error "✗ Web interface not accessible on port $actual_web_port ($environment)"
        ((failed_checks++))
    fi
    
    # Check 5: Agent port accessibility
    ((total_checks++))
    if timeout 5 bash -c "echo >/dev/tcp/localhost/${actual_agent_port}" 2>/dev/null; then
        success "✓ Agent port $actual_agent_port is accessible ($environment)"
    else
        error "✗ Agent port $actual_agent_port is not accessible ($environment)"
        ((failed_checks++))
    fi
    
    # Check 6: Jenkins API
    ((total_checks++))
    local api_response=$(curl -s --max-time 10 "http://localhost:${actual_web_port}/api/json" || echo "")
    if [[ -n "$api_response" ]] && echo "$api_response" | grep -q '"mode"'; then
        success "✓ Jenkins API is responding"
    else
        error "✗ Jenkins API is not responding properly"
        ((failed_checks++))
    fi
    
    echo -e "\n${BLUE}=== Resource Usage ===${NC}"
    
    # Check 7: Memory usage
    ((total_checks++))
    local memory_usage=$($CONTAINER_RUNTIME stats "$container_name" --no-stream --format "{{ '{{' }}.MemUsage{{ '}}' }}" 2>/dev/null || echo "N/A")
    if [[ "$memory_usage" != "N/A" ]]; then
        success "✓ Memory usage: $memory_usage"
    else
        warn "⚠ Could not retrieve memory usage"
    fi
    
    # Check 8: CPU usage
    ((total_checks++))
    local cpu_usage=$($CONTAINER_RUNTIME stats "$container_name" --no-stream --format "{{ '{{' }}.CPUPerc{{ '}}' }}" 2>/dev/null || echo "N/A")
    if [[ "$cpu_usage" != "N/A" ]]; then
        success "✓ CPU usage: $cpu_usage"
    else
        warn "⚠ Could not retrieve CPU usage"
    fi
    
    echo -e "\n${BLUE}=== Summary ===${NC}"
    local success_rate=$((((total_checks - failed_checks) * 100) / total_checks))
    
    if [[ $failed_checks -eq 0 ]]; then
        success "All health checks passed! (${total_checks}/${total_checks})"
        echo -e "Health Score: ${GREEN}${success_rate}%${NC}"
        return 0
    else
        error "Health check failures: $failed_checks/${total_checks}"
        echo -e "Health Score: ${RED}${success_rate}%${NC}"
        return 1
    fi
}

show_detailed_status() {
    echo -e "\n${BLUE}=== Detailed Status for $TEAM_NAME ===${NC}"
    
    for env in blue green; do
        local container_name="jenkins-${TEAM_NAME}-${env}"
        echo -e "\n${YELLOW}--- $env Environment ---${NC}"
        
        if $CONTAINER_RUNTIME inspect "$container_name" &>/dev/null; then
            local status=$($CONTAINER_RUNTIME inspect "$container_name" --format='{{ '{{' }}.State.Status{{ '}}' }}')
            local created=$($CONTAINER_RUNTIME inspect "$container_name" --format='{{ '{{' }}.Created{{ '}}' }}' | cut -d'T' -f1)
            local image=$($CONTAINER_RUNTIME inspect "$container_name" --format='{{ '{{' }}.Config.Image{{ '}}' }}')
            
            echo "Status: $status"
            echo "Created: $created"
            echo "Image: $image"
            
            if [[ "$status" == "running" ]]; then
                local uptime=$($CONTAINER_RUNTIME inspect "$container_name" --format='{{ '{{' }}.State.StartedAt{{ '}}' }}')
                echo "Started: $uptime"
                
                # Get logs (last 5 lines)
                echo -e "\nRecent logs:"
                $CONTAINER_RUNTIME logs --tail 5 "$container_name" 2>/dev/null | sed 's/^/  /'
            fi
        else
            echo -e "${RED}Container not found${NC}"
        fi
    done
}

main() {
    case "${1:-health}" in
        health|check)
            environment="${2:-}"
            health_check "$environment"
            ;;
        blue)
            health_check "blue"
            ;;
        green)
            health_check "green"
            ;;
        status)
            show_detailed_status
            ;;
        both|all)
            echo -e "${BLUE}Checking both environments...${NC}\n"
            health_check "blue"
            echo ""
            health_check "green"
            ;;
        *)
            echo "Usage: $0 {health|blue|green|both|status} [environment]"
            echo "  health [env] - Check health of active or specified environment"
            echo "  blue         - Check blue environment health"
            echo "  green        - Check green environment health"  
            echo "  both         - Check both environments"
            echo "  status       - Show detailed status of both environments"
            exit 1
            ;;
    esac
}

main "$@"