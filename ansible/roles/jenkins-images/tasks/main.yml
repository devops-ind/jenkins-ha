---
# Jenkins Images Building and Management Role
# Builds images and pushes to Harbor registry

- name: Set default images_to_build if not provided
  set_fact:
    images_to_build: "{{ images_to_build | default('all') }}"

- name: Display images build configuration
  debug:
    msg: |
      🚀 Jenkins Images Build Configuration:
      
      🎯 Images to Build: {{ images_to_build }}
      🏷️ Master Image Tag: {{ jenkins_master_image_tag | default('latest') }}
      🏷️ Agent Image Tag: {{ jenkins_agent_image_tag | default('latest') }}
      🔨 Force Rebuild: {{ jenkins_images_force_rebuild | default(false) }}
      📤 Push to Registry: {{ jenkins_images_push | default(true) }}
      🏪 Harbor Registry: {{ harbor_registry_url }}/{{ harbor_project }}

- name: Create image build directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0755'
  loop:
    - "{{ jenkins_images_build_dir }}"
    - "{{ jenkins_images_build_dir }}/master"
    - "{{ jenkins_images_build_dir }}/agents"
    - "{{ jenkins_images_build_dir }}/agents/dind"
    - "{{ jenkins_images_build_dir }}/agents/maven"
    - "{{ jenkins_images_build_dir }}/agents/python"
    - "{{ jenkins_images_build_dir }}/agents/nodejs"
    - "{{ jenkins_images_build_dir }}/haproxy"

- name: Generate Jenkins Master Dockerfile
  template:
    src: Dockerfile.master.j2
    dest: "{{ jenkins_images_build_dir }}/master/Dockerfile"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0644'
  when: images_to_build == 'all' or images_to_build == 'master'

- name: Generate plugins list for master
  template:
    src: plugins.txt.j2
    dest: "{{ jenkins_images_build_dir }}/master/plugins.txt"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0644'
  when: images_to_build == 'all' or images_to_build == 'master'

- name: Generate DIND agent Dockerfile
  template:
    src: Dockerfile.dind-agent.j2
    dest: "{{ jenkins_images_build_dir }}/agents/dind/Dockerfile"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0644'
  when: images_to_build == 'all' or images_to_build == 'dind-agent'

- name: Generate Maven agent Dockerfile
  template:
    src: Dockerfile.maven-agent.j2
    dest: "{{ jenkins_images_build_dir }}/agents/maven/Dockerfile"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0644'
  when: images_to_build == 'all' or images_to_build == 'maven-agent'

- name: Generate Python agent Dockerfile
  template:
    src: Dockerfile.python-agent.j2
    dest: "{{ jenkins_images_build_dir }}/agents/python/Dockerfile"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0644'
  when: images_to_build == 'all' or images_to_build == 'python-agent'

- name: Generate Node.js agent Dockerfile
  template:
    src: Dockerfile.nodejs-agent.j2
    dest: "{{ jenkins_images_build_dir }}/agents/nodejs/Dockerfile"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0644'
  when: images_to_build == 'all' or images_to_build == 'nodejs-agent'

- name: Copy common scripts and files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: "{{ item.mode }}"
  loop:
    - { src: 'docker-entrypoint.sh', dest: "{{ jenkins_images_build_dir }}/docker-entrypoint.sh", mode: '0755' }
    - { src: 'healthcheck.sh', dest: "{{ jenkins_images_build_dir }}/healthcheck.sh", mode: '0755' }

# - name: Login to Harbor registry
#   community.docker.docker_login:
#     registry_url: "{{ harbor_registry_url }}"
#     username: "{{ harbor_username }}"
#     password: "{{ harbor_password }}"
#     email: "{{ harbor_email | default(omit) }}"
#   when: harbor_integration_enabled | default(true)

- name: Build Jenkins master image
  community.docker.docker_image:
    name: "{{ harbor_registry_url }}/{{ harbor_project }}/jenkins-master"
    tag: "{{ jenkins_master_image_tag }}"
    build:
      path: "{{ jenkins_images_build_dir }}/master"
      dockerfile: Dockerfile
      pull: yes
      nocache: "{{ jenkins_images_force_rebuild | default(false) }}"
      args:
        JENKINS_VERSION: "{{ jenkins_version }}"
        BUILD_DATE: "{{ ansible_date_time.iso8601 }}"
        VCS_REF: "{{ lookup('env', 'GIT_COMMIT') | default('unknown') }}"
    source: build
    state: present
    push: "{{ jenkins_images_push | default(false) }}"
  register: master_image_build
  when: images_to_build == 'all' or images_to_build == 'master'

- name: Build DIND agent image
  community.docker.docker_image:
    name: "{{ harbor_registry_url }}/{{ harbor_project }}/jenkins-agent-dind"
    tag: "{{ jenkins_agent_image_tag }}"
    build:
      path: "{{ jenkins_images_build_dir }}/agents/dind"
      dockerfile: Dockerfile
      pull: yes
      nocache: "{{ jenkins_images_force_rebuild | default(false) }}"
      args:
        AGENT_VERSION: "{{ jenkins_agent_version }}"
        BUILD_DATE: "{{ ansible_date_time.iso8601 }}"
        VCS_REF: "{{ lookup('env', 'GIT_COMMIT') | default('unknown') }}"
    source: build
    state: present
    push: "{{ jenkins_images_push | default(false) }}"
  register: dind_image_build
  when: images_to_build == 'all' or images_to_build == 'dind-agent'

- name: Build Maven agent image
  community.docker.docker_image:
    name: "{{ harbor_registry_url }}/{{ harbor_project }}/jenkins-agent-maven"
    tag: "{{ jenkins_agent_image_tag }}"
    build:
      path: "{{ jenkins_images_build_dir }}/agents/maven"
      dockerfile: Dockerfile
      pull: yes
      nocache: "{{ jenkins_images_force_rebuild | default(false) }}"
      args:
        MAVEN_VERSION: "{{ maven_version }}"
        JDK_VERSION: "{{ default_jdk_version }}"
        BUILD_DATE: "{{ ansible_date_time.iso8601 }}"
        VCS_REF: "{{ lookup('env', 'GIT_COMMIT') | default('unknown') }}"
    source: build
    state: present
    push: "{{ jenkins_images_push | default(false) }}"
  register: maven_image_build
  when: images_to_build == 'all' or images_to_build == 'maven-agent'

- name: Build Python agent image
  community.docker.docker_image:
    name: "{{ harbor_registry_url }}/{{ harbor_project }}/jenkins-agent-python"
    tag: "{{ jenkins_agent_image_tag }}"
    build:
      path: "{{ jenkins_images_build_dir }}/agents/python"
      dockerfile: Dockerfile
      pull: yes
      nocache: "{{ jenkins_images_force_rebuild | default(false) }}"
      args:
        PYTHON_VERSION: "{{ python_version }}"
        BUILD_DATE: "{{ ansible_date_time.iso8601 }}"
        VCS_REF: "{{ lookup('env', 'GIT_COMMIT') | default('unknown') }}"
    source: build
    state: present
    push: "{{ jenkins_images_push | default(false) }}"
  register: python_image_build
  when: images_to_build == 'all' or images_to_build == 'python-agent'

- name: Build Node.js agent image
  community.docker.docker_image:
    name: "{{ harbor_registry_url }}/{{ harbor_project }}/jenkins-agent-nodejs"
    tag: "{{ jenkins_agent_image_tag }}"
    build:
      path: "{{ jenkins_images_build_dir }}/agents/nodejs"
      dockerfile: Dockerfile
      pull: yes
      nocache: "{{ jenkins_images_force_rebuild | default(false) }}"
      args:
        NODE_VERSION: "{{ nodejs_version }}"
        BUILD_DATE: "{{ ansible_date_time.iso8601 }}"
        VCS_REF: "{{ lookup('env', 'GIT_COMMIT') | default('unknown') }}"
    source: build
    state: present
    push: "{{ jenkins_images_push | default(false) }}"
  register: nodejs_image_build
  when: images_to_build == 'all' or images_to_build == 'nodejs-agent'

- name: Clean up old images (keep last 3 versions)
  community.docker.docker_prune:
    images: yes
    images_filters:
      dangling: false
      until: "72h"
  when: jenkins_images_cleanup | default(true)

- name: Create dynamic images built list
  set_fact:
    images_built_list: "{{ images_built_list | default([]) + [item] }}"
  loop:
    - name: jenkins-master
      tag: "{{ jenkins_master_image_tag }}"
      digest: "{{ master_image_build.image.Id | default('not-built') }}"
      condition: "{{ (images_to_build == 'all' or images_to_build == 'master') and master_image_build is defined and master_image_build.image is defined }}"
    - name: jenkins-agent-dind
      tag: "{{ jenkins_agent_image_tag }}"
      digest: "{{ dind_image_build.image.Id | default('not-built') }}"
      condition: "{{ (images_to_build == 'all' or images_to_build == 'dind-agent') and dind_image_build is defined and dind_image_build.image is defined }}"
    - name: jenkins-agent-maven
      tag: "{{ jenkins_agent_image_tag }}"
      digest: "{{ maven_image_build.image.Id | default('not-built') }}"
      condition: "{{ (images_to_build == 'all' or images_to_build == 'maven-agent') and maven_image_build is defined and maven_image_build.image is defined }}"
    - name: jenkins-agent-python
      tag: "{{ jenkins_agent_image_tag }}"
      digest: "{{ python_image_build.image.Id | default('not-built') }}"
      condition: "{{ (images_to_build == 'all' or images_to_build == 'python-agent') and python_image_build is defined and python_image_build.image is defined }}"
    - name: jenkins-agent-nodejs
      tag: "{{ jenkins_agent_image_tag }}"
      digest: "{{ nodejs_image_build.image.Id | default('not-built') }}"
      condition: "{{ (images_to_build == 'all' or images_to_build == 'nodejs-agent') and nodejs_image_build is defined and nodejs_image_build.image is defined }}"
  when: item.condition | bool

- name: Generate image manifest
  template:
    src: image-manifest.yml.j2
    dest: "{{ jenkins_images_build_dir }}/image-manifest.yml"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0644'
  vars:
    images_built: "{{ images_built_list | default([]) }}"
  when: images_built_list is defined and images_built_list | length > 0

- name: Display image build summary
  debug:
    msg: |
      🎉 Jenkins Images Build Completed!
      
      🎯 Images to Build: {{ images_to_build }}
      📦 Successfully Built Images ({{ images_built_list | default([]) | length }}):
      {% for image in images_built_list | default([]) %}
      • {{ image.name }}: {{ harbor_registry_url }}/{{ harbor_project }}/{{ image.name }}:{{ image.tag }}
      {% endfor %}
      
      🏷️ Registry: {{ harbor_registry_url }}/{{ harbor_project }}
      📅 Build Date: {{ ansible_date_time.iso8601 }}
      🔨 Force Rebuild: {{ jenkins_images_force_rebuild | default(false) }}
      📤 Push to Registry: {{ jenkins_images_push | default(true) }}

- name: Display individual image build status
  debug:
    msg: |
      📊 Image Build Status Details:
      
      • Jenkins Master: {{ 'BUILT' if (images_to_build == 'all' or images_to_build == 'master') and master_image_build is defined else 'SKIPPED' }}
      • DIND Agent: {{ 'BUILT' if (images_to_build == 'all' or images_to_build == 'dind-agent') and dind_image_build is defined else 'SKIPPED' }}
      • Maven Agent: {{ 'BUILT' if (images_to_build == 'all' or images_to_build == 'maven-agent') and maven_image_build is defined else 'SKIPPED' }}
      • Python Agent: {{ 'BUILT' if (images_to_build == 'all' or images_to_build == 'python-agent') and python_image_build is defined else 'SKIPPED' }}
      • Node.js Agent: {{ 'BUILT' if (images_to_build == 'all' or images_to_build == 'nodejs-agent') and nodejs_image_build is defined else 'SKIPPED' }}

- name: Fail if no images were built
  fail:
    msg: |
      ❌ No images were built! 
      
      Selected: {{ images_to_build }}
      Possible values: all, master, dind-agent, maven-agent, python-agent, nodejs-agent
      
      Please check your images_to_build parameter.
  when: 
    - images_built_list is not defined or images_built_list | length == 0
    - images_to_build != ''