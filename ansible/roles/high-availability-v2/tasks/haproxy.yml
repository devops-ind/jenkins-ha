---
# Simplified HAProxy HA Deployment - Unified Configuration, Volumes, and Container Management
# Consolidates: containers.yml (53 lines) + containers/docker.yml (317 lines) + volumes/docker.yml (26 lines) + configuration.yml (HAProxy parts)
# Total: ~396 lines → ~180 lines (55% reduction)

# ====================================
# VOLUME MANAGEMENT PHASE
# ====================================

- name: Create HAProxy Docker volumes
  block:
    - name: Create HAProxy admin socket volume (tmpfs for performance)
      community.docker.docker_volume:
        name: "haproxy-admin-socket"
        driver: "local"
        driver_options:
          type: "tmpfs"
          device: "tmpfs"
          o: "size=100M,uid={{ haproxy_uid }},gid={{ haproxy_gid }}"
        state: present
        labels:
          service: "haproxy"
          type: "admin-socket"
          managed_by: "ansible"

    - name: Create HAProxy logs volume
      community.docker.docker_volume:
        name: "haproxy-logs"
        driver: "local"
        state: present
        labels:
          service: "haproxy"
          type: "logs"
          managed_by: "ansible"
  tags: ['volumes']

# ====================================
# HAPROXY CONFIGURATION PHASE
# ====================================

- name: Generate HAProxy configuration files
  block:
    - name: Create HAProxy error pages
      copy:
        dest: "/etc/haproxy/errors/{{ item.code }}.http"
        content: |
          HTTP/1.1 {{ item.code }} {{ item.message }}
          Content-Type: text/html
          Content-Length: {{ item.body | length }}
          
          {{ item.body }}
        mode: '0644'
        owner: root
        group: "{{ haproxy_user }}"
      loop:
        - code: 502
          message: "Bad Gateway"
          body: "<html><body><h1>502 Bad Gateway</h1><p>Jenkins service temporarily unavailable.</p><p>Please try again in a few moments.</p></body></html>"
        - code: 503
          message: "Service Unavailable"
          body: "<html><body><h1>503 Service Unavailable</h1><p>Jenkins service temporarily unavailable.</p><p>Please try again in a few moments.</p></body></html>"
        - code: 504
          message: "Gateway Timeout"
          body: "<html><body><h1>504 Gateway Timeout</h1><p>Jenkins service timeout.</p><p>Please try again in a few moments.</p></body></html>"
      become: yes

    - name: Generate main HAProxy configuration
      template:
        src: haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
        backup: yes
        owner: root
        group: "{{ haproxy_user }}"
        mode: '0644'
      become: yes
      notify: restart haproxy container
      register: haproxy_main_config

    # Team backend configurations are now generated in main haproxy.cfg.j2
    # Removed separate team-backend template generation for simplicity

    - name: Create HAProxy stats configuration
      copy:
        dest: "/etc/haproxy/conf.d/stats.cfg"
        content: |
          # HAProxy Statistics Configuration
          listen stats
              bind *:{{ haproxy_stats_port | default(8404) }}
              stats enable
              stats uri {{ haproxy_stats_uri | default('/stats') }}
              stats refresh 30s
              stats show-node
              stats show-legends
              stats admin if TRUE
        mode: '0644'
        owner: root
        group: "{{ haproxy_user }}"
      become: yes
      notify: restart haproxy container
  tags: ['configuration']

# ====================================
# CONTAINER DEPLOYMENT PHASE
# ====================================

- name: Deploy HAProxy container with unified configuration
  block:
    - name: Pull HAProxy image
      community.docker.docker_image:
        name: "{{ _haproxy_image_full }}"
        source: pull
        state: present
      register: haproxy_image_pull

    - name: Stop existing HAProxy container if running
      command: docker stop jenkins-haproxy
      ignore_errors: true

    - name: Remove existing HAProxy container
      command: docker rm -f jenkins-haproxy
      ignore_errors: true

    - name: Deploy HAProxy container with standard configuration
      community.docker.docker_container:
        name: "jenkins-haproxy"
        image: "{{ _haproxy_image_full }}"
        state: started
        restart_policy: "{{ haproxy_restart_policy | default('unless-stopped') }}"
        network_mode: "host"
        volumes: "{{ _haproxy_volumes }}"
        env: "{{ _haproxy_env_vars }}"
        memory: "{{ haproxy_memory_limit | default('512m') }}"
        cpus: "{{ haproxy_cpu_limit | default('1.0') }}"
        log_driver: "{{ haproxy_log_driver | default('json-file') }}"
        log_options:
          max-size: "{{ haproxy_log_max_size | default('10m') }}"
          max-file: "{{ haproxy_log_max_files | default('3') }}"
        labels: "{{ _haproxy_labels }}"
        privileged: false
        security_opts:
          - "label=disable"
        healthcheck:
          test: ["CMD-SHELL", "haproxy -c -f /usr/local/etc/haproxy/haproxy.cfg"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 30s
      register: haproxy_standard_deploy
      failed_when: false

    - name: Deploy HAProxy container with privileged fallback
      community.docker.docker_container:
        name: "jenkins-haproxy"
        image: "{{ _haproxy_image_full }}"
        state: started
        restart_policy: "{{ haproxy_restart_policy | default('unless-stopped') }}"
        network_mode: "host"
        volumes: "{{ _haproxy_volumes }}"
        env: "{{ _haproxy_env_vars }}"
        memory: "{{ haproxy_memory_limit | default('512m') }}"
        cpus: "{{ haproxy_cpu_limit | default('1.0') }}"
        log_driver: "{{ haproxy_log_driver | default('json-file') }}"
        log_options:
          max-size: "{{ haproxy_log_max_size | default('10m') }}"
          max-file: "{{ haproxy_log_max_files | default('3') }}"
        labels: "{{ _haproxy_labels }}"
        privileged: true
        healthcheck:
          test: ["CMD-SHELL", "haproxy -c -f /usr/local/etc/haproxy/haproxy.cfg"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 30s
      register: haproxy_privileged_deploy
      when: haproxy_standard_deploy is failed
      failed_when: false

    - name: Report HAProxy deployment status
      debug:
        msg: |
          HAProxy Container Deployment Status:
          {% if haproxy_standard_deploy is succeeded %}
          ✅ Standard deployment successful (non-privileged mode)
          {% elif haproxy_privileged_deploy is succeeded %}
          ⚠️ Privileged fallback deployment successful (privileged mode)
          Note: Using privileged mode for container runtime compatibility
          {% else %}
          ❌ Both standard and privileged deployment failed
          Container runtime may not be compatible on this system
          {% endif %}

    - name: Fail if both deployment methods failed
      fail:
        msg: |
          HAProxy container deployment failed with both standard and privileged modes.
          This indicates a container runtime compatibility issue on this system.
          
          Alternative solutions:
          1. Install HAProxy natively using system package manager
          2. Update container runtime to newer version
          3. Check kernel compatibility for container namespaces
      when: 
        - haproxy_standard_deploy is failed
        - haproxy_privileged_deploy is failed or haproxy_privileged_deploy is skipped

  vars:
    _image_tag: "{{ haproxy_image_alternatives[deployment_mode | default('production')] | default(haproxy_image_tag) }}"
    _haproxy_ports: "{{ [] if haproxy_network_mode == 'host' else ['8090:8090', (haproxy_stats_port | default(8404)) ~ ':' ~ (haproxy_stats_port | default(8404))] }}"
    _haproxy_volumes: >-
      {%- set base_volumes = [
        "/etc/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro",
        "/etc/haproxy/conf.d:/usr/local/etc/haproxy/conf.d:ro",
        "/etc/haproxy/errors:/etc/haproxy/errors:ro",
        "/var/log/haproxy:/var/log/haproxy:rw",
        "/var/lib/haproxy:/var/lib/haproxy:rw",
        "haproxy-admin-socket:/run/haproxy:rw"
      ] -%}
      {%- if ssl_enabled | default(false) -%}
        {%- set _ = base_volumes.append("/etc/haproxy/ssl/combined.pem:/usr/local/etc/haproxy/ssl/combined.pem:ro") -%}
      {%- endif -%}
      {{ base_volumes }}
    _haproxy_env_vars:
      HAPROXY_USER: "{{ haproxy_user }}"
      HAPROXY_UID: "{{ haproxy_uid | string }}"
      HAPROXY_GID: "{{ haproxy_gid | string }}"
      TZ: "{{ common_timezone | default('UTC') }}"
    _haproxy_labels:
      service: "haproxy"
      role: "load-balancer"
      teams: "{{ haproxy_effective_teams | map(attribute='team_name') | join(',') }}"
      ssl_enabled: "{{ ssl_enabled | default(false) | string }}"
      deployment_mode: "{{ deployment_mode }}"
      managed_by: "ansible"
      version: "simplified-v2"
  tags: ['deploy']

# ====================================
# STREAMLINED POST-DEPLOYMENT VERIFICATION
# ====================================

- name: Streamlined HAProxy verification
  import_tasks: streamlined-verification.yml
  tags: ['verify']

- name: HAProxy deployment phase complete
  debug:
    msg: |
      ====================================
      HAProxy Deployment Complete
      ====================================
      Container: jenkins-haproxy ({{ haproxy_info.container.State.Status }})
      Configuration: {{ 'Valid' if haproxy_config_check.rc == 0 else 'Invalid' }}
      Teams configured: {{ haproxy_effective_teams | length }}
      SSL enabled: {{ ssl_enabled | default(false) }}
      ====================================
  tags: ['haproxy']