---
# Simplified HAProxy HA Deployment - Unified Configuration, Volumes, and Container Management
# Consolidates: containers.yml (53 lines) + containers/docker.yml (317 lines) + volumes/docker.yml (26 lines) + configuration.yml (HAProxy parts)
# Total: ~396 lines → ~180 lines (55% reduction)

# ====================================
# VOLUME MANAGEMENT PHASE
# ====================================

- name: Create HAProxy Docker volumes
  block:
    - name: Create HAProxy admin socket volume (tmpfs for performance)
      community.docker.docker_volume:
        name: "haproxy-admin-socket"
        driver: "local"
        driver_options:
          type: "tmpfs"
          device: "tmpfs"
          o: "size=100M,uid={{ haproxy_uid }},gid={{ haproxy_gid }}"
        state: present
        labels:
          service: "haproxy"
          type: "admin-socket"
          managed_by: "ansible"

    - name: Create HAProxy logs volume
      community.docker.docker_volume:
        name: "haproxy-logs"
        driver: "local"
        state: present
        labels:
          service: "haproxy"
          type: "logs"
          managed_by: "ansible"
  tags: ['volumes']

# ====================================
# HAPROXY CONFIGURATION PHASE
# ====================================

- name: Generate HAProxy configuration files
  block:
    - name: Create HAProxy error pages
      copy:
        dest: "/etc/haproxy/errors/{{ item.code }}.http"
        content: |
          HTTP/1.1 {{ item.code }} {{ item.message }}
          Content-Type: text/html
          Content-Length: {{ item.body | length }}
          
          {{ item.body }}
        mode: '0644'
        owner: root
        group: "{{ haproxy_user }}"
      loop:
        - code: 502
          message: "Bad Gateway"
          body: "<html><body><h1>502 Bad Gateway</h1><p>Jenkins service temporarily unavailable.</p><p>Please try again in a few moments.</p></body></html>"
        - code: 503
          message: "Service Unavailable"
          body: "<html><body><h1>503 Service Unavailable</h1><p>Jenkins service temporarily unavailable.</p><p>Please try again in a few moments.</p></body></html>"
        - code: 504
          message: "Gateway Timeout"
          body: "<html><body><h1>504 Gateway Timeout</h1><p>Jenkins service timeout.</p><p>Please try again in a few moments.</p></body></html>"
      become: yes

    - name: Generate main HAProxy configuration
      template:
        src: haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
        backup: yes
        owner: root
        group: "{{ haproxy_user }}"
        mode: '0644'
      become: yes
      notify: restart haproxy container
      register: haproxy_main_config

    # Team backend configurations are now generated in main haproxy.cfg.j2
    # Removed separate team-backend template generation for simplicity

    - name: Create HAProxy stats configuration
      copy:
        dest: "/etc/haproxy/conf.d/stats.cfg"
        content: |
          # HAProxy Statistics Configuration
          listen stats
              bind *:{{ haproxy_stats_port | default(8404) }}
              stats enable
              stats uri {{ haproxy_stats_uri | default('/stats') }}
              stats refresh 30s
              stats show-node
              stats show-legends
              stats admin if TRUE
        mode: '0644'
        owner: root
        group: "{{ haproxy_user }}"
      become: yes
      notify: restart haproxy container
  tags: ['configuration']

# ====================================
# PRE-DEPLOYMENT SSL VERIFICATION
# ====================================

- name: Pre-deployment SSL certificate verification
  block:
    - name: Verify SSL certificate files exist and are accessible
      stat:
        path: "{{ item }}"
      register: ssl_files_check
      loop:
        - "/etc/haproxy/ssl/combined.pem"
        - "/etc/haproxy/ssl/wildcard-{{ jenkins_domain | default('devops.local') }}-haproxy.pem"
      become: yes
      when: ssl_enabled | default(false)

    - name: Display SSL file verification results
      debug:
        msg: |
          SSL Certificate Files Status:
          {% for result in ssl_files_check.results %}
          - {{ result.item }}: {{ 'EXISTS' if result.stat.exists else 'MISSING' }} ({{ result.stat.size | default(0) }} bytes)
          {% endfor %}
      when: ssl_enabled | default(false)

    - name: Fail if SSL certificates are missing or empty
      fail:
        msg: |
          SSL certificates are missing or invalid:
          {% for result in ssl_files_check.results %}
          {% if not result.stat.exists or result.stat.size < 100 %}
          - {{ result.item }}: {{ 'MISSING' if not result.stat.exists else 'EMPTY (' + (result.stat.size | string) + ' bytes)' }}
          {% endif %}
          {% endfor %}
          
          Please run the SSL certificate generation first:
          ansible-playbook ansible/site.yml --tags ssl
      when: 
        - ssl_enabled | default(false)
        - ssl_files_check.results | selectattr('stat.exists', 'equalto', false) | list | length > 0 or ssl_files_check.results | selectattr('stat.size', 'lessthan', 100) | list | length > 0

    - name: Test SSL certificate validity before container deployment
      shell: |
        set -euo pipefail
        echo "Testing SSL certificate validity before HAProxy deployment..."
        
        # Test certificate parsing
        openssl x509 -in /etc/haproxy/ssl/combined.pem -noout -text > /dev/null
        echo "✓ Certificate parsing: OK"
        
        # Test private key parsing
        openssl rsa -in /etc/haproxy/ssl/combined.pem -check -noout > /dev/null
        echo "✓ Private key parsing: OK"
        
        # Test certificate-key matching
        CERT_MODULUS=$(openssl x509 -noout -modulus -in /etc/haproxy/ssl/combined.pem | openssl md5)
        KEY_MODULUS=$(openssl rsa -noout -modulus -in /etc/haproxy/ssl/combined.pem | openssl md5)
        
        if [[ "$CERT_MODULUS" = "$KEY_MODULUS" ]]; then
          echo "✓ Certificate-key pair matching: OK"
        else
          echo "✗ Certificate-key pair matching: FAILED"
          exit 1
        fi
        
        echo "SSL certificate validation successful - ready for HAProxy deployment"
      become: yes
      when: ssl_enabled | default(false)
      register: ssl_validation_result
      tags: ['ssl', 'validation']

  tags: ['ssl-verify']
  when: ssl_enabled | default(false)

# ====================================
# CONTAINER DEPLOYMENT PHASE
# ====================================

- name: Deploy HAProxy container with unified configuration
  block:
    - name: Pull HAProxy image
      community.docker.docker_image:
        name: "{{ _haproxy_image_full }}"
        source: pull
        state: present
      register: haproxy_image_pull

    - name: Gracefully stop existing HAProxy container
      shell: |
        set +e  # Allow errors
        echo "Checking for existing HAProxy container..."
        
        if docker ps -q -f name=jenkins-haproxy | grep -q .; then
          echo "Stopping existing HAProxy container..."
          docker stop jenkins-haproxy --time=10
          sleep 2
        else
          echo "No running HAProxy container found."
        fi
        
        if docker ps -a -q -f name=jenkins-haproxy | grep -q .; then
          echo "Removing existing HAProxy container..."
          docker rm -f jenkins-haproxy
        else
          echo "No HAProxy container to remove."
        fi
        
        echo "Container cleanup completed."
      register: container_cleanup_result
      tags: ['container-cleanup']

    - name: Deploy HAProxy container with standard configuration
      community.docker.docker_container:
        name: "jenkins-haproxy"
        image: "{{ _haproxy_image_full }}"
        state: started
        restart_policy: "{{ haproxy_restart_policy | default('unless-stopped') }}"
        network_mode: "host"
        volumes: "{{ _haproxy_volumes }}"
        env: "{{ _haproxy_env_vars }}"
        memory: "{{ haproxy_memory_limit | default('512m') }}"
        cpus: "{{ haproxy_cpu_limit | default('1.0') }}"
        log_driver: "{{ haproxy_log_driver | default('json-file') }}"
        log_options:
          max-size: "{{ haproxy_log_max_size | default('10m') }}"
          max-file: "{{ haproxy_log_max_files | default('3') }}"
        labels: "{{ _haproxy_labels }}"
        privileged: false
        capabilities:
          - "NET_BIND_SERVICE"
        security_opts:
          - "label=disable"
        healthcheck:
          test: ["CMD-SHELL", "haproxy -c -f /usr/local/etc/haproxy/haproxy.cfg"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 30s
      register: haproxy_standard_deploy
      failed_when: ssl_enabled | default(false) | bool

    - name: Deploy HAProxy container with privileged fallback
      community.docker.docker_container:
        name: "jenkins-haproxy"
        image: "{{ _haproxy_image_full }}"
        state: started
        restart_policy: "{{ haproxy_restart_policy | default('unless-stopped') }}"
        network_mode: "host"
        volumes: "{{ _haproxy_volumes }}"
        env: "{{ _haproxy_env_vars }}"
        memory: "{{ haproxy_memory_limit | default('512m') }}"
        cpus: "{{ haproxy_cpu_limit | default('1.0') }}"
        log_driver: "{{ haproxy_log_driver | default('json-file') }}"
        log_options:
          max-size: "{{ haproxy_log_max_size | default('10m') }}"
          max-file: "{{ haproxy_log_max_files | default('3') }}"
        labels: "{{ _haproxy_labels }}"
        privileged: true
        healthcheck:
          test: ["CMD-SHELL", "haproxy -c -f /usr/local/etc/haproxy/haproxy.cfg"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 30s
      register: haproxy_privileged_deploy
      when: haproxy_standard_deploy is failed or (ssl_enabled | default(false) | bool)
      failed_when: false

    - name: Report HAProxy deployment status
      debug:
        msg: |
          HAProxy Container Deployment Status:
          {% if haproxy_standard_deploy is succeeded %}
          ✅ Standard deployment successful (non-privileged mode)
          {% elif haproxy_privileged_deploy is succeeded %}
          ⚠️ Privileged fallback deployment successful (privileged mode)
          Note: Using privileged mode for container runtime compatibility
          {% else %}
          ❌ Both standard and privileged deployment failed
          Container runtime may not be compatible on this system
          {% endif %}

    - name: Fail if both deployment methods failed
      fail:
        msg: |
          HAProxy container deployment failed with both standard and privileged modes.
          This indicates a container runtime compatibility issue on this system.
          
          Alternative solutions:
          1. Install HAProxy natively using system package manager
          2. Update container runtime to newer version
          3. Check kernel compatibility for container namespaces
      when: 
        - haproxy_standard_deploy is failed
        - haproxy_privileged_deploy is failed or haproxy_privileged_deploy is skipped

  vars:
    _image_tag: "{{ haproxy_image_alternatives[deployment_mode | default('production')] | default(haproxy_image_tag) }}"
    _haproxy_ports: "{{ [] if haproxy_network_mode == 'host' else ['8090:8090', (haproxy_stats_port | default(8404)) ~ ':' ~ (haproxy_stats_port | default(8404))] }}"
    _haproxy_volumes: >-
      {%- set base_volumes = [
        "/etc/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro",
        "/etc/haproxy/conf.d:/usr/local/etc/haproxy/conf.d:ro",
        "/etc/haproxy/errors:/etc/haproxy/errors:ro",
        "/var/log/haproxy:/var/log/haproxy:rw",
        "/var/lib/haproxy:/var/lib/haproxy:rw",
        "haproxy-admin-socket:/run/haproxy:rw"
      ] -%}
      {%- if ssl_enabled | default(false) -%}
        {%- set _ = base_volumes.append("/etc/haproxy/ssl:/usr/local/etc/haproxy/ssl:ro") -%}
      {%- endif -%}
      {{ base_volumes }}
    _haproxy_env_vars:
      HAPROXY_USER: "{{ haproxy_user }}"
      HAPROXY_UID: "{{ haproxy_uid | string }}"
      HAPROXY_GID: "{{ haproxy_gid | string }}"
      TZ: "{{ common_timezone | default('UTC') }}"
    _haproxy_labels:
      service: "haproxy"
      role: "load-balancer"
      teams: "{{ haproxy_effective_teams | map(attribute='team_name') | join(',') }}"
      ssl_enabled: "{{ ssl_enabled | default(false) | string }}"
      deployment_mode: "{{ deployment_mode }}"
      managed_by: "ansible"
      version: "simplified-v2"
  tags: ['deploy']

# ====================================
# ENHANCED POST-DEPLOYMENT VERIFICATION
# ====================================

- name: Enhanced HAProxy deployment verification
  block:
    - name: Wait for HAProxy container to be fully ready
      shell: |
        set -euo pipefail
        echo "Waiting for HAProxy container to be ready..."
        
        for i in {1..60}; do
          if docker ps --format 'table {{.Names}}	{{.Status}}' | grep -q "jenkins-haproxy.*Up"; then
            echo "Container is running. Checking health status..."
            
            # Check health status if available
            HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' jenkins-haproxy 2>/dev/null || echo "unknown")
            if [[ "$HEALTH_STATUS" == "healthy" || "$HEALTH_STATUS" == "unknown" ]]; then
              echo "HAProxy container is healthy and ready."
              break
            elif [[ "$HEALTH_STATUS" == "starting" ]]; then
              echo "Container is still starting (attempt $i/60)..."
            else
              echo "Container health status: $HEALTH_STATUS (attempt $i/60)"
            fi
          else
            echo "Waiting for container to start (attempt $i/60)..."
          fi
          
          sleep 2
        done
        
        # Final verification
        if ! docker ps --format 'table {{.Names}}	{{.Status}}' | grep -q "jenkins-haproxy.*Up"; then
          echo "ERROR: HAProxy container failed to start properly"
          echo "Container status:"
          docker ps -a --format 'table {{.Names}}	{{.Status}}	{{.Ports}}' | grep jenkins-haproxy || echo "Container not found"
          echo "Recent logs:"
          docker logs --tail 50 jenkins-haproxy || echo "No logs available"
          exit 1
        fi
      register: container_readiness_check
      tags: ['verification', 'readiness']

    - name: Verify HAProxy configuration syntax in running container
      shell: |
        echo "Verifying HAProxy configuration syntax in running container..."
        
        if docker exec jenkins-haproxy haproxy -f /usr/local/etc/haproxy/haproxy.cfg -c; then
          echo "✓ HAProxy configuration syntax is valid"
        else
          echo "✗ HAProxy configuration syntax error detected"
          echo "Configuration file contents:"
          docker exec jenkins-haproxy cat /usr/local/etc/haproxy/haproxy.cfg | head -20
          exit 1
        fi
      register: config_syntax_check
      tags: ['verification', 'config']

    - name: Verify SSL certificate accessibility in container
      shell: |
        set -euo pipefail
        echo "Verifying SSL certificate accessibility in HAProxy container..."
        
        {% if ssl_enabled | default(false) %}
        # Check if SSL certificate file is accessible in container
        if docker exec jenkins-haproxy test -f /usr/local/etc/haproxy/ssl/combined.pem; then
          echo "✓ SSL certificate file is accessible in container"
          
          # Check certificate validity in container
          if docker exec jenkins-haproxy openssl x509 -in /usr/local/etc/haproxy/ssl/combined.pem -noout -text > /dev/null; then
            echo "✓ SSL certificate is valid in container"
            
            # Display certificate info
            echo "Certificate details:"
            docker exec jenkins-haproxy openssl x509 -in /usr/local/etc/haproxy/ssl/combined.pem -noout -subject -dates
          else
            echo "✗ SSL certificate is not valid in container"
            exit 1
          fi
        else
          echo "✗ SSL certificate file not found in container"
          echo "Container SSL directory contents:"
          docker exec jenkins-haproxy ls -la /usr/local/etc/haproxy/ssl/ || echo "SSL directory not found"
          exit 1
        fi
        {% else %}
        echo "SSL not enabled - skipping SSL certificate verification"
        {% endif %}
      register: ssl_container_check
      when: ssl_enabled | default(false)
      tags: ['verification', 'ssl']

    - name: Test HAProxy endpoints connectivity
      uri:
        url: "{{ item.url }}"
        method: GET
        status_code: [200, 301, 302, 503]  # Accept redirect or service unavailable
        timeout: 10
        validate_certs: no  # For self-signed certificates
      loop: >
        {%- set endpoints = [] -%}
        {%- if ssl_enabled | default(false) -%}
          {%- set _ = endpoints.append({'name': 'HTTPS Frontend', 'url': 'https://' + (ansible_default_ipv4.address | default('localhost')) + '/'}) -%}
        {%- else -%}
          {%- set _ = endpoints.append({'name': 'HTTP Frontend', 'url': 'http://' + (ansible_default_ipv4.address | default('localhost')) + ':' + (haproxy_frontend_port | default(8000) | string) + '/'}) -%}
        {%- endif -%}
        {%- set _ = endpoints.append({'name': 'HAProxy Stats', 'url': 'http://' + (ansible_default_ipv4.address | default('localhost')) + ':' + (haproxy_stats_port | default(8404) | string) + '/stats'}) -%}
        {{ endpoints }}
      register: endpoint_connectivity_check
      ignore_errors: yes
      tags: ['verification', 'connectivity']

    - name: Display comprehensive deployment status
      debug:
        msg: |
          ====================================
          HAProxy Deployment Verification Results
          ====================================
          
          Container Status: {{ 'RUNNING' if container_readiness_check.rc == 0 else 'FAILED' }}
          Configuration: {{ 'VALID' if config_syntax_check.rc == 0 else 'INVALID' }}
          {{ 'SSL Certificate: ACCESSIBLE' if ssl_enabled and ssl_container_check is defined and ssl_container_check.rc == 0 else 'SSL Certificate: INACCESSIBLE' if ssl_enabled else '' }}
          
          Endpoint Connectivity:
          {% for result in endpoint_connectivity_check.results %}
          - {{ result.item.name }}: {{ 'OK' if result.status in [200, 301, 302] else 'FAILED (' + (result.status | string) + ')' if result.status is defined else 'ERROR' }}
          {% endfor %}
          
          Access URLs:
          {{ 'HTTPS: https://' + (ansible_default_ipv4.address | default('localhost')) + '/' if ssl_enabled | default(false) else 'HTTP: http://' + (ansible_default_ipv4.address | default('localhost')) + ':' + (haproxy_frontend_port | default(8000) | string) + '/' }}
          HAProxy Stats: http://{{ ansible_default_ipv4.address | default('localhost') }}:{{ haproxy_stats_port | default(8404) }}/stats
          
          ====================================
      tags: ['verification', 'summary']

  tags: ['verify']

- name: HAProxy deployment phase complete
  debug:
    msg: |
      ====================================
      HAProxy Deployment Complete
      ====================================
      Container: jenkins-haproxy ({{ haproxy_info.container.State.Status }})
      Configuration: {{ 'Valid' if haproxy_config_check.rc == 0 else 'Invalid' }}
      Teams configured: {{ haproxy_effective_teams | length }}
      SSL enabled: {{ ssl_enabled | default(false) }}
      ====================================
  tags: ['haproxy']