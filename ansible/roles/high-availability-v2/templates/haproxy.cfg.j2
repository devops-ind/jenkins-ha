# Multi-Team Jenkins HAProxy Configuration
# Supports wildcard subdomain routing for *.{{ jenkins_domain }}
# Generated by Ansible high-availability role

global
    # Container-optimized configuration
    maxconn 8192
    log stdout local0 info
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    
    # Security - running in container
    
    # SSL Configuration for wildcard certificate
    {% if ssl_enabled | default(false) %}
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    {% endif %}

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option redispatch
    option forwardfor
    option http-server-close
    retries 3
    timeout connect 5000ms
    timeout client 300000ms
    timeout server 300000ms
    timeout http-keep-alive 10s
    timeout check 10s
    
    

# =============================================================================
# FRONTEND CONFIGURATION - Multi-Team Wildcard Routing
# =============================================================================

# HTTP Frontend (Redirect to HTTPS if SSL enabled)
{% if ssl_enabled | default(false) %}
frontend jenkins_http
    bind {{ vip_address | default('*') }}:80
    
    # Redirect all HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }
    
frontend jenkins_https
    bind {{ vip_address | default('*') }}:443 ssl crt {{ ssl_certificate_path }}
{% else %}
frontend jenkins_http
    bind {{ vip_address | default('*') }}:{{ haproxy_frontend_port | default('8000') }}
{% endif %}
    
    # Enable stats on frontend
    stats enable
    stats uri /haproxy-stats
    stats refresh 30s
    stats hide-version
    
    # Capture hostname for team routing
    capture request header Host len 64
    
    # Security headers  
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-Frame-Options DENY
    http-response set-header X-XSS-Protection "1; mode=block"
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    http-request set-header X-Real-IP %[src]
    
    # Monitoring services routing (high priority - checked first)
    use_backend prometheus_backend if { hdr_beg(host) -i prometheus.{{ jenkins_domain }} }
    use_backend grafana_backend if { hdr_beg(host) -i grafana.{{ jenkins_domain }} }
    use_backend node_exporter_backend if { hdr_beg(host) -i node-exporter.{{ jenkins_domain }} }
    
    # Team-based routing - specific subdomains first
    {% if jenkins_teams is defined and jenkins_teams | length > 0 %}
    {% for team in jenkins_teams %}
    {% if team.team_name != 'devops' %}
    use_backend jenkins_backend_{{ team.team_name }} if { hdr_beg(host) -i {{ team.team_name }}.{{ jenkins_domain }} }
    {% endif %}
    {% endfor %}
    {% endif %}
    
    # DevOps team handles both devops.jenkins.example.com AND jenkins.example.com (default)
    use_backend jenkins_backend_devops if { hdr_beg(host) -i devops.{{ jenkins_domain }} }
    
    # Default backend - routes to devops team
    default_backend jenkins_backend_devops

# =============================================================================
# BACKEND CONFIGURATION - Team-Specific Jenkins Masters
# =============================================================================

# =============================================================================
# JENKINS TEAM BACKENDS - Simplified Multi-Team Configuration
# =============================================================================

{% if jenkins_teams is defined and jenkins_teams | length > 0 %}
# Generate backend for each team
{% for team in jenkins_teams %}
backend jenkins_backend_{{ team.team_name }}
    balance {{ backend_balance_method | default('roundrobin') }}
    option httpchk GET /login
    http-check expect status 200
    
    # Blue-Green deployment configuration for {{ team.team_name }} team
    {% if groups['jenkins_masters'] is defined and groups['jenkins_masters'] | length > 0 %}
    {% for host in groups['jenkins_masters'] %}
    {% if team.blue_green_enabled | default(true) %}
    {% if team.active_environment | default('blue') == 'blue' %}
    # Blue environment active, green as backup
    server {{ team.team_name }}-{{ hostvars[host]['inventory_hostname'] }}-blue {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ team.ports.web | default(8080) }} check inter {{ haproxy_check_interval | default('5s') }} fall {{ haproxy_check_fall | default(3) }} rise {{ haproxy_check_rise | default(2) }}
    server {{ team.team_name }}-{{ hostvars[host]['inventory_hostname'] }}-green {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ (team.ports.web | default(8080)) + 100 }} check inter {{ haproxy_check_interval | default('5s') }} fall {{ haproxy_check_fall | default(3) }} rise {{ haproxy_check_rise | default(2) }} backup
    {% else %}
    # Green environment active, blue as backup
    server {{ team.team_name }}-{{ hostvars[host]['inventory_hostname'] }}-green {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ team.ports.web | default(8080) }} check inter {{ haproxy_check_interval | default('5s') }} fall {{ haproxy_check_fall | default(3) }} rise {{ haproxy_check_rise | default(2) }}
    server {{ team.team_name }}-{{ hostvars[host]['inventory_hostname'] }}-blue {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ (team.ports.web | default(8080)) + 100 }} check inter {{ haproxy_check_interval | default('5s') }} fall {{ haproxy_check_fall | default(3) }} rise {{ haproxy_check_rise | default(2) }} backup
    {% endif %}
    {% else %}
    # Blue-green disabled, single environment
    server {{ team.team_name }}-{{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ team.ports.web | default(8080) }} check inter {{ haproxy_check_interval | default('5s') }} fall {{ haproxy_check_fall | default(3) }} rise {{ haproxy_check_rise | default(2) }}
    {% endif %}
    {% endfor %}
    {% else %}
    # Localhost fallback for {{ team.team_name }}
    {% if team.blue_green_enabled | default(true) %}
    {% if team.active_environment | default('blue') == 'blue' %}
    server {{ team.team_name }}-localhost-blue 127.0.0.1:{{ team.ports.web | default(8080) }} check
    server {{ team.team_name }}-localhost-green 127.0.0.1:{{ (team.ports.web | default(8080)) + 100 }} check backup
    {% else %}
    server {{ team.team_name }}-localhost-green 127.0.0.1:{{ team.ports.web | default(8080) }} check
    server {{ team.team_name }}-localhost-blue 127.0.0.1:{{ (team.ports.web | default(8080)) + 100 }} check backup
    {% endif %}
    {% else %}
    server {{ team.team_name }}-localhost 127.0.0.1:{{ team.ports.web | default(8080) }} check
    {% endif %}
    {% endif %}
    
    # Team-specific headers
    http-response set-header X-Jenkins-Team {{ team.team_name }}
    http-response set-header X-Jenkins-Environment {{ team.active_environment | default('blue') }}
    {% if team.labels is defined and team.labels.role is defined %}
    http-response set-header X-Team-Role {{ team.labels.role }}
    {% endif %}

{% endfor %}
{% else %}
# Fallback single team backend
backend jenkins_backend_devops
    balance {{ backend_balance_method | default('roundrobin') }}
    option httpchk GET /login
    http-check expect status 200
    {% if groups['jenkins_masters'] is defined and groups['jenkins_masters'] | length > 0 %}
    {% for host in groups['jenkins_masters'] %}
    server devops-{{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:8080 check
    {% endfor %}
    {% else %}
    server devops-localhost 127.0.0.1:8080 check
    {% endif %}
{% endif %}


# =============================================================================
# MONITORING SERVICES BACKENDS
# =============================================================================

# Prometheus backend
backend prometheus_backend
    balance {{ backend_balance_method | default('roundrobin') }}
    option httpchk GET /api/v1/status/config
    http-check expect status 200
    {% if groups['monitoring'] is defined and groups['monitoring'] | length > 0 %}
    {% for host in groups['monitoring'] %}
    server prometheus-{{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ prometheus_port | default(9090) }} check inter {{ haproxy_check_interval | default('5s') }}
    {% endfor %}
    {% else %}
    server prometheus-localhost 127.0.0.1:{{ prometheus_port | default(9090) }} check
    {% endif %}
    # Prometheus-specific headers
    http-response set-header X-Service-Type prometheus
    http-response set-header X-Service-Version {{ prometheus_version | default('latest') }}

# Grafana backend
backend grafana_backend
    balance {{ backend_balance_method | default('roundrobin') }}
    option httpchk GET /api/health
    http-check expect status 200
    {% if groups['monitoring'] is defined and groups['monitoring'] | length > 0 %}
    {% for host in groups['monitoring'] %}
    server grafana-{{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ grafana_port | default(9300) }} check inter {{ haproxy_check_interval | default('5s') }}
    {% endfor %}
    {% else %}
    server grafana-localhost 127.0.0.1:{{ grafana_port | default(9300) }} check
    {% endif %}
    # Grafana-specific headers
    http-response set-header X-Service-Type grafana
    http-response set-header X-Service-Version {{ grafana_version | default('latest') }}

# Node Exporter backend
backend node_exporter_backend
    balance {{ backend_balance_method | default('roundrobin') }}
    option httpchk GET /metrics
    http-check expect status 200
    {% if groups['monitoring'] is defined and groups['monitoring'] | length > 0 %}
    {% for host in groups['monitoring'] %}
    server node-exporter-{{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ node_exporter_port | default(9100) }} check inter {{ haproxy_check_interval | default('5s') }}
    {% endfor %}
    {% else %}
    server node-exporter-localhost 127.0.0.1:{{ node_exporter_port | default(9100) }} check
    {% endif %}
    # Node Exporter headers
    http-response set-header X-Service-Type node-exporter
    http-response set-header Content-Type "text/plain; version=0.0.4; charset=utf-8"

# =============================================================================
# STATISTICS AND MONITORING
# =============================================================================

listen stats
    bind {{ vip_address | default('*') }}:{{ haproxy_stats_port | default('8404') }}
    stats enable
    stats uri {{ haproxy_stats_uri | default('/stats') }}
    stats refresh 30s
    stats show-legends
    stats show-node
    {% if haproxy_stats_user is defined and haproxy_stats_password is defined %}
    stats auth {{ haproxy_stats_user }}:{{ haproxy_stats_password }}
    {% endif %}
    stats admin if TRUE
    
    # Stats page enhancements
    stats realm "HAProxy Statistics - Jenkins Multi-Team"
    stats hide-version
    
    # Enable stats socket for API access
    # echo "show stat" | socat stdio /run/haproxy/admin.sock
