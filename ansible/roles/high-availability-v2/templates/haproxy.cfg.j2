# Multi-Team Jenkins HAProxy Configuration
# Supports wildcard subdomain routing for *.{{ jenkins_domain }}
# Generated by Ansible high-availability role

global
    # Container-optimized configuration
    maxconn 8192
    log stdout local0 info
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    
    # Security - running in container
    
    # SSL Configuration for wildcard certificate
    {% if ssl_enabled | default(false) %}
    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    {% endif %}

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option redispatch
    option forwardfor
    option http-server-close
    retries 3
    timeout connect 5000ms
    timeout client 300000ms
    timeout server 300000ms
    timeout http-keep-alive 10s
    timeout check 10s
    
    

# =============================================================================
# FRONTEND CONFIGURATION - Multi-Team Wildcard Routing
# =============================================================================

# HTTP Frontend (Redirect to HTTPS if SSL enabled)
{% if ssl_enabled | default(false) %}
frontend jenkins_http
    bind {{ vip_address | default('*') }}:80
    
    # Redirect all HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }
    
frontend jenkins_https
    bind {{ vip_address | default('*') }}:443 ssl crt {{ ssl_certificate_path }}
{% else %}
frontend jenkins_http
    bind {{ vip_address | default('*') }}:{{ jenkins_port | default(80) }}
{% endif %}
    
    # Enable stats on frontend
    stats enable
    stats uri /haproxy-stats
    stats refresh 30s
    stats hide-version
    
    # Capture hostname for team routing
    capture request header Host len 64
    
    # Security headers  
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-Frame-Options DENY
    http-response set-header X-XSS-Protection "1; mode=block"
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    http-request set-header X-Real-IP %[src]
    
    # Team-based routing using subdomain matching
    # jenkins.{{ jenkins_domain }} -> jenkins team (default)
    use_backend jenkins_backend_jenkins if { hdr_beg(host) -i jenkins.{{ jenkins_domain }} }
    
    {% if jenkins_teams is defined and jenkins_teams | length > 0 %}
    # Dynamic team routing based on inventory configuration
    {% for team in jenkins_teams %}
    use_backend jenkins_backend_{{ team.team_name }} if { hdr_beg(host) -i {{ team.team_name }}.{{ jenkins_domain }} }
    {% endfor %}
    {% else %}
    # Default team configurations (fallback)
    use_backend jenkins_backend_dev if { hdr_beg(host) -i dev.{{ jenkins_domain }} }
    use_backend jenkins_backend_staging if { hdr_beg(host) -i staging.{{ jenkins_domain }} }
    use_backend jenkins_backend_prod if { hdr_beg(host) -i prod.{{ jenkins_domain }} }
    {% endif %}
    
    # Default backend for *.{{ jenkins_domain }} (catches all other subdomains)
    default_backend jenkins_backend_default

# =============================================================================
# BACKEND CONFIGURATION - Team-Specific Jenkins Masters
# =============================================================================

# Default backend (jenkins team)
backend jenkins_backend_default
    balance {{ backend_balance_method | default('roundrobin') }}
    option httpchk GET /login
    http-check expect status 200
    
    {% if jenkins_teams is defined and jenkins_teams | length > 0 and groups['jenkins_masters'] is defined and groups['jenkins_masters'] | length > 0 %}
    # Primary team (usually jenkins or first team)
    {% set primary_team = jenkins_teams[0] %}
    {% for host in groups['jenkins_masters'] %}
    server {{ primary_team.team_name }}-{{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ primary_team.ports.web | default(8080) }} check inter {{ haproxy_check_interval | default('5s') }} fall {{ haproxy_check_fall | default(3) }} rise {{ haproxy_check_rise | default(2) }}
    {% endfor %}
    {% elif groups['jenkins_masters'] is defined and groups['jenkins_masters'] | length > 0 %}
    # Fallback configuration
    {% for host in groups['jenkins_masters'] %}
    server jenkins-{{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:8080 check
    {% endfor %}
    {% else %}
    # No Jenkins masters defined - localhost fallback
    server jenkins-localhost 127.0.0.1:8080 check
    {% endif %}

# Jenkins team backend (explicit)
backend jenkins_backend_jenkins
    balance {{ backend_balance_method | default('roundrobin') }}
    option httpchk GET /login
    http-check expect status 200
    
    {% if jenkins_teams is defined %}
    {% for team in jenkins_teams %}
    {% if team.team_name == 'jenkins' %}
    {% for host in groups['jenkins_masters'] | default([]) %}
    server {{ team.team_name }}-{{ hostvars[host]['inventory_hostname'] }}-blue {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ team.ports.web | default(8080) }} check inter {{ haproxy_check_interval | default('5s') }}
    server {{ team.team_name }}-{{ hostvars[host]['inventory_hostname'] }}-green {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ team.ports.web | default(8080) + 100 }} check inter {{ haproxy_check_interval | default('5s') }} backup
    {% endfor %}
    {% endif %}
    {% endfor %}
    {% endif %}

{% if jenkins_teams is defined and jenkins_teams | length > 0 %}
# Dynamic team backends based on inventory
{% for team in jenkins_teams %}
{% if team.team_name != 'jenkins' %}
backend jenkins_backend_{{ team.team_name }}
    balance {{ backend_balance_method | default('roundrobin') }}
    option httpchk GET /login
    http-check expect status 200
    
    # Blue-Green configuration for {{ team.team_name }} team
    {% if groups['jenkins_masters'] is defined and groups['jenkins_masters'] | length > 0 %}
    {% for host in groups['jenkins_masters'] %}
    {% if team.blue_green_enabled | default(true) %}
    server {{ team.team_name }}-{{ hostvars[host]['inventory_hostname'] }}-blue {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ team.ports.web | default(8080) }} check inter {{ haproxy_check_interval | default('5s') }}{% if team.active_environment | default('blue') == 'blue' %} {% else %} backup{% endif %}

    server {{ team.team_name }}-{{ hostvars[host]['inventory_hostname'] }}-green {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ (team.ports.web | default(8080)) + 10 }} check inter {{ haproxy_check_interval | default('5s') }}{% if team.active_environment | default('blue') == 'green' %} {% else %} backup{% endif %}

    {% else %}
    server {{ team.team_name }}-{{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ team.ports.web | default(8080) }} check inter {{ haproxy_check_interval | default('5s') }}
    {% endif %}
    {% endfor %}
    {% else %}
    # Localhost fallback for {{ team.team_name }}
    {% if team.blue_green_enabled | default(true) %}
    server {{ team.team_name }}-localhost-blue 127.0.0.1:{{ team.ports.web | default(8080) }} check{% if team.active_environment | default('blue') == 'blue' %} {% else %} backup{% endif %}

    server {{ team.team_name }}-localhost-green 127.0.0.1:{{ (team.ports.web | default(8080)) + 10 }} check{% if team.active_environment | default('blue') == 'green' %} {% else %} backup{% endif %}

    {% else %}
    server {{ team.team_name }}-localhost 127.0.0.1:{{ team.ports.web | default(8080) }} check
    {% endif %}
    {% endif %}
    
    # Team-specific headers
    http-response set-header X-Jenkins-Team {{ team.team_name }}
    http-response set-header X-Jenkins-Environment {{ team.active_environment | default('blue') }}

{% endif %}
{% endfor %}
{% else %}
# Static team backends (fallback when no teams defined)
backend jenkins_backend_dev
    balance roundrobin
    option httpchk GET /login
    http-check expect status 200
    {% for host in groups['jenkins_masters'] | default([]) %}
    server dev-{{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:8080 check
    {% endfor %}

backend jenkins_backend_staging
    balance roundrobin
    option httpchk GET /login
    http-check expect status 200
    {% for host in groups['jenkins_masters'] | default([]) %}
    server staging-{{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:8081 check
    {% endfor %}

backend jenkins_backend_prod
    balance roundrobin
    option httpchk GET /login
    http-check expect status 200
    {% for host in groups['jenkins_masters'] | default([]) %}
    server prod-{{ hostvars[host]['inventory_hostname'] }} {{ hostvars[host]['ansible_default_ipv4']['address'] }}:8082 check
    {% endfor %}
{% endif %}

# =============================================================================
# STATISTICS AND MONITORING
# =============================================================================

listen stats
    bind {{ vip_address | default('*') }}:{{ haproxy_stats_port | default('8404') }}
    stats enable
    stats uri {{ haproxy_stats_uri | default('/stats') }}
    stats refresh 30s
    stats show-legends
    stats show-node
    {% if haproxy_stats_user is defined and haproxy_stats_password is defined %}
    stats auth {{ haproxy_stats_user }}:{{ haproxy_stats_password }}
    {% endif %}
    stats admin if TRUE
    
    # Stats page enhancements
    stats realm "HAProxy Statistics - Jenkins Multi-Team"
    stats hide-version
    
    # Enable stats socket for API access
    # echo "show stat" | socat stdio /run/haproxy/admin.sock
