#!/bin/bash
# HAProxy Runtime API Manager for Zero-Downtime Blue-Green Switching
# Generated by Ansible high-availability-v2 role

set -euo pipefail

ADMIN_SOCKET="/run/haproxy/admin.sock"
CONTAINER_NAME="jenkins-haproxy"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Execute HAProxy runtime command
haproxy_cmd() {
    local cmd="$1"
    log "Executing HAProxy command: $cmd"
    echo "$cmd" | docker exec -i "$CONTAINER_NAME" socat stdio /run/haproxy/admin.sock 2>/dev/null || {
        error "Failed to execute HAProxy command: $cmd"
        return 1
    }
}

# Get current server status
get_server_status() {
    local backend="$1"
    local server="$2"
    haproxy_cmd "show stat" | grep "^$backend,$server," | cut -d',' -f18 || echo "UNKNOWN"
}

# Enable server with specified weight
enable_server() {
    local backend="$1"
    local server="$2"
    local weight="${3:-100}"
    
    log "Enabling server $server in backend $backend with weight $weight"
    haproxy_cmd "enable server $backend/$server"
    haproxy_cmd "set weight $backend/$server $weight"
    
    local status=$(get_server_status "$backend" "$server")
    if [[ "$status" == "UP" ]]; then
        success "Server $backend/$server is now UP with weight $weight"
        return 0
    else
        error "Failed to enable server $backend/$server (status: $status)"
        return 1
    fi
}

# Disable server gracefully
disable_server() {
    local backend="$1"
    local server="$2"
    
    log "Gracefully disabling server $server in backend $backend"
    haproxy_cmd "set weight $backend/$server 0"
    
    # Wait for connections to drain
    local max_wait=60
    local wait_count=0
    
    while [[ $wait_count -lt $max_wait ]]; do
        local active_sessions=$(haproxy_cmd "show stat" | grep "^$backend,$server," | cut -d',' -f5)
        
        if [[ "$active_sessions" == "0" || -z "$active_sessions" ]]; then
            log "All sessions drained from $backend/$server"
            break
        fi
        
        log "Waiting for $active_sessions sessions to drain from $backend/$server..."
        sleep 2
        ((wait_count += 2))
    done
    
    # Disable server after drain
    haproxy_cmd "disable server $backend/$server"
    success "Server $backend/$server disabled gracefully"
}

# Add new server dynamically
add_server() {
    local backend="$1"
    local server_name="$2"
    local server_address="$3"
    local server_port="$4"
    
    log "Adding server $server_name to backend $backend at $server_address:$server_port"
    haproxy_cmd "add server $backend/$server_name $server_address:$server_port check inter 5s fall 3 rise 2"
    
    # Enable the new server
    enable_server "$backend" "$server_name" 100
}

# Remove server dynamically
remove_server() {
    local backend="$1"
    local server="$2"
    
    log "Removing server $server from backend $backend"
    
    # First disable gracefully
    disable_server "$backend" "$server"
    
    # Then remove
    haproxy_cmd "del server $backend/$server"
    success "Server $backend/$server removed from backend"
}

# Blue-green switch using runtime API
blue_green_switch() {
    local team_name="$1"
    local current_env="$2"
    local target_env="$3"
    local base_port="$4"
    local host="${5:-{{ ansible_default_ipv4.address }}}"
    
    local backend="jenkins_backend_$team_name"
    local current_server="${team_name}-active"
    local target_server="${team_name}-${target_env}"
    
    # Calculate ports
    local current_port=$base_port
    local target_port=$base_port
    if [[ "$current_env" == "green" ]]; then
        current_port=$((base_port + 100))
    fi
    if [[ "$target_env" == "green" ]]; then
        target_port=$((base_port + 100))
    fi
    
    log "Starting zero-downtime blue-green switch for team: $team_name"
    log "Switching: $current_env:$current_port â†’ $target_env:$target_port"
    
    # Step 1: Add target environment server
    log "Step 1: Adding target server $target_server:$target_port"
    add_server "$backend" "$target_server" "$host" "$target_port"
    
    # Step 2: Health check target server
    log "Step 2: Waiting for target server to be healthy..."
    local max_attempts=30
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        local status=$(get_server_status "$backend" "$target_server")
        if [[ "$status" == "UP" ]]; then
            success "Target server $target_server is healthy"
            break
        fi
        
        log "Attempt $attempt/$max_attempts: Target server status is $status"
        sleep 2
        ((attempt++))
    done
    
    if [[ $attempt -gt $max_attempts ]]; then
        error "Target server failed health check after $max_attempts attempts"
        remove_server "$backend" "$target_server"
        return 1
    fi
    
    # Step 3: Gradual traffic shift (50/50 split)
    log "Step 3: Gradual traffic shift (50/50 split)"
    haproxy_cmd "set weight $backend/$current_server 50"
    haproxy_cmd "set weight $backend/$target_server 50"
    sleep 10
    
    # Step 4: Complete traffic shift to target
    log "Step 4: Complete traffic shift to target environment"
    haproxy_cmd "set weight $backend/$current_server 0"
    haproxy_cmd "set weight $backend/$target_server 100"
    sleep 5
    
    # Step 5: Remove old server after traffic drains
    log "Step 5: Removing old server after traffic drain"
    remove_server "$backend" "$current_server"
    
    # Step 6: Rename target server to active
    log "Step 6: Renaming target server to active"
    haproxy_cmd "del server $backend/$target_server"
    add_server "$backend" "$current_server" "$host" "$target_port"
    
    success "Zero-downtime blue-green switch completed for team: $team_name"
    log "Team $team_name now active on $target_env environment (port $target_port)"
    
    return 0
}

# Show backend status
show_backend_status() {
    local backend="${1:-}"
    
    if [[ -n "$backend" ]]; then
        log "Status for backend: $backend"
        haproxy_cmd "show stat" | grep "^$backend," | while IFS=',' read -r line; do
            local fields=($line)
            echo "  Server: ${fields[1]}, Status: ${fields[17]}, Weight: ${fields[18]}, Sessions: ${fields[4]}"
        done
    else
        log "All backend status:"
        haproxy_cmd "show stat" | grep "jenkins_backend" | while IFS=',' read -r line; do
            local fields=($line)
            echo "  ${fields[0]}/${fields[1]}: Status=${fields[17]}, Weight=${fields[18]}, Sessions=${fields[4]}"
        done
    fi
}

# Main function
main() {
    case "${1:-help}" in
        enable)
            [[ $# -ge 3 ]] || { error "Usage: $0 enable <backend> <server> [weight]"; exit 1; }
            enable_server "$2" "$3" "${4:-100}"
            ;;
        disable)
            [[ $# -ge 3 ]] || { error "Usage: $0 disable <backend> <server>"; exit 1; }
            disable_server "$2" "$3"
            ;;
        add)
            [[ $# -ge 5 ]] || { error "Usage: $0 add <backend> <server> <host> <port>"; exit 1; }
            add_server "$2" "$3" "$4" "$5"
            ;;
        remove)
            [[ $# -ge 3 ]] || { error "Usage: $0 remove <backend> <server>"; exit 1; }
            remove_server "$2" "$3"
            ;;
        switch)
            [[ $# -ge 5 ]] || { error "Usage: $0 switch <team> <current_env> <target_env> <base_port> [host]"; exit 1; }
            blue_green_switch "$2" "$3" "$4" "$5" "${6:-{{ ansible_default_ipv4.address }}}"
            ;;
        status)
            show_backend_status "${2:-}"
            ;;
        help|*)
            echo "HAProxy Runtime API Manager"
            echo ""
            echo "Usage: $0 <command> [options]"
            echo ""
            echo "Commands:"
            echo "  enable <backend> <server> [weight]     - Enable server with optional weight"
            echo "  disable <backend> <server>             - Gracefully disable server"
            echo "  add <backend> <server> <host> <port>   - Add new server"
            echo "  remove <backend> <server>              - Remove server"
            echo "  switch <team> <from> <to> <port> [host] - Zero-downtime blue-green switch"
            echo "  status [backend]                       - Show backend/server status"
            echo ""
            echo "Examples:"
            echo "  $0 switch devops blue green 8080"
            echo "  $0 status jenkins_backend_devops"
            echo "  $0 enable jenkins_backend_devops devops-active 50"
            exit 0
            ;;
    esac
}

main "$@"