---
# Main Jenkins Infrastructure Orchestration Playbook
# Production-grade deployment with unified jenkins-master role

# Dynamic host selection based on deployment_mode
- name: Set target hosts based on deployment mode
  hosts: localhost
  gather_facts: no
  run_once: true
  tasks:
    - name: Determine target hosts for deployment
      set_fact:
        target_hosts: >-
          {% if hostvars[groups['all'][0]]['deployment_mode'] | default('local') == 'production' %}
          jenkins_masters:monitoring:load_balancers:shared_storage
          {% else %}
          localhost
          {% endif %}
        jenkins_target_hosts: >-
          {% if hostvars[groups['all'][0]]['deployment_mode'] | default('local') == 'production' %}
          jenkins_masters
          {% else %}
          localhost
          {% endif %}
        monitoring_target_hosts: >-
          {% if hostvars[groups['all'][0]]['deployment_mode'] | default('local') == 'production' %}
          monitoring
          {% else %}
          localhost
          {% endif %}
    
    - name: Display deployment configuration
      debug:
        msg:
          - "Deployment Mode: {{ hostvars[groups['all'][0]]['deployment_mode'] | default('local') }}"
          - "Target Hosts: {{ target_hosts }}"
          - "Jenkins Hosts: {{ jenkins_target_hosts }}"
          - "Monitoring Hosts: {{ monitoring_target_hosts }}"

- name: Pre-Deployment Validation Suite
  hosts: "{{ (deployment_mode | default('local') == 'local') | ternary('localhost', 'all') }}"
  become: yes
  gather_facts: yes
  serial: "100%"  # Run validation on all hosts in parallel
  vars:
    deployment_environment: "{{ lookup('env', 'DEPLOYMENT_ENV') | default('local') }}"
    validation_mode: "{{ validation_mode | default('strict') }}"  # strict, warn, skip
  tasks:
    - name: 🔍 Pre-deployment validation framework
      block:
        - name: Validate deployment prerequisites
          assert:
            that:
              - ansible_memtotal_mb >= 4096
              - ansible_processor_vcpus >= 2
              - (ansible_mounts | selectattr('mount', 'equalto', '/') | first).size_available > 10000000000
              - ansible_distribution in ['Ubuntu', 'Debian', 'CentOS', 'RedHat', 'Rocky', 'AlmaLinux']
            fail_msg: |
              ❌ System requirements not met:
              - Memory: {{ ansible_memtotal_mb }}MB (minimum: 4GB)
              - CPU cores: {{ ansible_processor_vcpus }} (minimum: 2)
              - Disk space: {{ (ansible_mounts | selectattr('mount', 'equalto', '/') | first).size_available // 1000000000 }}GB (minimum: 10GB)
              - OS: {{ ansible_distribution }} (supported: Ubuntu, Debian, CentOS, RedHat, Rocky, AlmaLinux)
            success_msg: "✅ System requirements validated"

        - name: Check network connectivity to dependencies
          uri:
            url: "{{ item.url }}"
            method: "{{ item.method | default('HEAD') }}"
            timeout: 10
            status_code: [200, 301, 302, 403]  # Some services may return 403 for HEAD requests
          loop:
            - { url: "https://registry-1.docker.io", name: "Docker Hub" }
            - { url: "https://github.com", name: "GitHub" }
            - { url: "https://repo1.maven.org/maven2/", name: "Maven Central" }
            - { url: "https://registry.npmjs.org/", name: "NPM Registry" }
          loop_control:
            label: "{{ item.name }}"
          register: connectivity_check
          failed_when: false
          
        - name: Report connectivity issues
          debug:
            msg: |
              ⚠️ Network connectivity issues detected:
              {% for result in connectivity_check.results %}
              {% if result.status != 200 %}
              - {{ result.item.name }}: {{ result.status | default('Failed') }} ({{ result.msg | default('Unknown error') }})
              {% endif %}
              {% endfor %}
          when: connectivity_check.results | selectattr('status', 'undefined') | list | length > 0 or
                connectivity_check.results | selectattr('status', 'ne', 200) | list | length > 0

        - name: Validate container runtime availability
          block:
            - name: Check container runtime
              shell: |
                {% if jenkins_container_runtime | default('docker') == 'docker' %}
                docker info >/dev/null 2>&1
                {% else %}
                podman info >/dev/null 2>&1
                {% endif %}
              register: runtime_functional
              failed_when: runtime_functional.rc != 0
              changed_when: false

        - name: Display validation summary
          debug:
            msg: |
              🔍 Pre-deployment Validation Summary for {{ inventory_hostname }}:
              ✅ System Requirements: PASSED
              ✅ Container Runtime: {{ jenkins_container_runtime | default('docker') | upper }} available
              ✅ Network Connectivity: {{ connectivity_check.results | selectattr('status', 'eq', 200) | list | length }}/{{ connectivity_check.results | length }} services reachable
              
              Validation Mode: {{ validation_mode | upper }}

      rescue:
        - name: Handle validation failures
          debug:
            msg: |
              ❌ Pre-deployment validation failed: {{ ansible_failed_result.msg | default('Unknown validation error') }}
              
              Validation can proceed in different modes:
              - strict: Deployment blocked on any validation failure (current)
              - warn: Deployment continues with warnings
              - skip: Validation bypassed (not recommended for production)
              
              To change mode: ansible-playbook site.yml -e validation_mode=warn
              
        - name: Fail on strict validation mode
          fail:
            msg: |
              Deployment blocked due to validation failures in strict mode.
              Review the validation report and resolve issues before proceeding.
              
              To bypass (not recommended): ansible-playbook site.yml -e validation_mode=skip
          when: validation_mode == 'strict'
          
        - name: Continue with warnings in warn mode
          debug:
            msg: "⚠️ Continuing deployment despite validation warnings (warn mode)"
          when: validation_mode == 'warn'

      when: validation_mode != 'skip'
      tags: ['validation', 'pre-deployment']

- name: Bootstrap Infrastructure
  hosts: "{{ (deployment_mode | default('local') == 'local') | ternary('localhost', 'all') }}"
  become: yes
  gather_facts: yes
  serial: "{{ serial_execution | default('100%') }}"
  vars:
    deployment_environment: "{{ lookup('env', 'DEPLOYMENT_ENV') | default('local') }}"
  roles:
    - role: common
      tags: ['common', 'bootstrap']
    - role: docker
      tags: ['docker', 'bootstrap']
    - role: shared-storage
      tags: ['storage', 'bootstrap']
      when: shared_storage_enabled | default(true)
    - role: security
      tags: ['security', 'bootstrap']


- name: Build and Manage Jenkins Images
  hosts: "{{ (deployment_mode | default('local') == 'local') | ternary('localhost', 'jenkins_masters[0]') }}"  # Build on primary master only
  become: yes
  gather_facts: yes
  vars:
    jenkins_images_build: true
    jenkins_images_push: true
  roles:
    - role: jenkins-images
      tags: ['images', 'build']
      when: build_jenkins_images | default(false)

- name: Deploy Jenkins Infrastructure
  hosts: "{{ (deployment_mode | default('local') == 'local') | ternary('localhost', 'jenkins_masters') }}"
  become: yes
  gather_facts: yes
  serial: 1  # Deploy masters one by one for HA
  vars:
    jenkins_ha_enabled: "{{ groups['jenkins_masters'] | default([]) | length > 1 }}"
    jenkins_master_priority: "{{ play_hosts.index(inventory_hostname) + 1 }}"
    # Unified jenkins-master role supports both single and multi-team deployments
    jenkins_teams: "{{ jenkins_teams | default([]) }}"
  roles:
    - role: jenkins-master
      tags: ['jenkins', 'deploy']
  post_tasks:
    - name: Wait for Jenkins teams to be ready
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ item.ports.web | default(8080) }}/login"
        method: GET
        status_code: [200, 403]
      register: jenkins_ready
      until: jenkins_ready is succeeded
      retries: 60
      delay: 10
      loop: "{{ jenkins_teams | default([{'ports': {'web': 8080}}]) }}"
      tags: ['jenkins', 'verify']

- name: Configure High Availability (HAProxy Load Balancer + Multi-Team Routing)
  hosts: "{{ (deployment_mode | default('local') == 'local') | ternary('localhost', 'load_balancers:jenkins_masters') }}"
  become: yes
  gather_facts: yes
  roles:
    - role: high-availability
      tags: ['ha', 'cluster', 'haproxy', 'loadbalancer']
      when: 
        - jenkins_ha_enabled | default(false)
        - groups['jenkins_masters'] | default([]) | length > 1

- name: Setup Monitoring Stack
  hosts: "{{ (deployment_mode | default('local') == 'local') | ternary('localhost', 'monitoring') }}"
  become: yes
  gather_facts: yes
  roles:
    - role: monitoring
      tags: ['monitoring', 'prometheus', 'grafana']
      when: monitoring_enabled | default(true)

- name: Configure Backup System
  hosts: "{{ (deployment_mode | default('local') == 'local') | ternary('localhost', 'shared_storage:jenkins_masters') }}"
  become: yes
  gather_facts: yes
  roles:
    - role: backup
      tags: ['backup', 'storage']
      when: backup_enabled | default(true)

- name: Post-Deployment Verification
  hosts: "{{ (deployment_mode | default('local') == 'local') | ternary('localhost', 'jenkins_masters:monitoring') }}"
  become: no
  gather_facts: yes
  tasks:
    - name: Verify Jenkins teams accessibility
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ item.ports.web | default(8080) }}/api/json"
        method: GET
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        force_basic_auth: yes
        status_code: [200, 403]
      register: jenkins_team_checks
      loop: "{{ jenkins_teams | default([{'team_name': 'default', 'ports': {'web': 8080}}]) }}"
      ignore_errors: yes
      tags: ['verify', 'api']

    - name: Verify monitoring endpoints
      uri:
        url: "{{ (deployment_mode | default('local') == 'local') | ternary('http://localhost:9090/api/v1/query?query=up', 'http://' + hostvars[groups['monitoring'][0]]['ansible_default_ipv4']['address'] + ':9090/api/v1/query?query=up') }}"
        method: GET
      register: prometheus_check
      when: 
        - monitoring_enabled | default(true)
        - (deployment_mode | default('local') == 'local') or (groups['monitoring'] is defined and groups['monitoring'] | length > 0)
      ignore_errors: yes
      tags: ['verify', 'monitoring']

    - name: Display deployment summary
      debug:
        msg: |
          🎉 Jenkins Infrastructure Deployment Completed!
          
          📋 Team Access Information:
          {% if deployment_mode | default('local') == 'local' %}
          {% for team in jenkins_teams | default([{'team_name': 'default', 'ports': {'web': 8080}}]) %}
          {{ team.team_name | title }} Team: http://localhost:{{ team.ports.web | default(8080) }}
          {% endfor %}
          {% else %}
          {% for host in groups['jenkins_masters'] | default([]) %}
          {% for team in jenkins_teams | default([{'team_name': 'default', 'ports': {'web': 8080}}]) %}
          {{ team.team_name | title }} Team: http://{{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ team.ports.web | default(8080) }}
          {% endfor %}
          {% endfor %}
          {% endif %}
          {% if jenkins_ha_enabled | default(false) %}
          Load Balancer VIP: http://{{ jenkins_vip }}:{{ jenkins_master_port }}
          {% endif %}
          {% if monitoring_enabled | default(true) %}
          {% if deployment_mode | default('local') == 'local' %}
          Prometheus: http://localhost:9090
          Grafana: http://localhost:3000
          {% elif groups['monitoring'] is defined and groups['monitoring'] | length > 0 %}
          Prometheus: http://{{ hostvars[groups['monitoring'][0]]['ansible_default_ipv4']['address'] }}:9090
          Grafana: http://{{ hostvars[groups['monitoring'][0]]['ansible_default_ipv4']['address'] }}:3000
          {% endif %}
          {% endif %}
          
          🔧 Default Credentials:
          Username: {{ jenkins_admin_user }}
          Password: [ENCRYPTED - Check vault]
          
          🔧 Management Scripts (per team):
          {% for team in jenkins_teams | default([{'team_name': 'default'}]) %}
          • {{ team.team_name | title }} Blue-Green Switch: /var/jenkins/scripts/blue-green-switch-{{ team.team_name }}.sh
          • {{ team.team_name | title }} Health Check: /var/jenkins/scripts/blue-green-healthcheck-{{ team.team_name }}.sh
          {% endfor %}
          
          🏷️ Available Agent Labels (per team):
          {% for team in jenkins_teams | default([{'team_name': 'default'}]) %}
          • {{ team.team_name }}-maven (Java/Maven builds)
          • {{ team.team_name }}-python (Python builds) 
          • {{ team.team_name }}-nodejs (Node.js/Frontend builds)
          • {{ team.team_name }}-dind (Docker-in-Docker builds)
          {% endfor %}
          
          📊 Monitoring Status: {{ monitoring_enabled | default(true) and 'Enabled' or 'Disabled' }}
          💾 Backup Status: {{ backup_enabled | default(true) and 'Enabled' or 'Disabled' }}
          🏔️ HA Status: {{ jenkins_ha_enabled | default(false) and 'Active' or 'Single Node' }}
          
          📊 Blue-Green Status:
          • All teams start with BLUE environment active
          • Use switch scripts for zero-downtime deployments
          • HAProxy provides load balancing and health checks
      tags: ['verify', 'summary']