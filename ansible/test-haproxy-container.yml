---
# HAProxy Container Test Playbook
# This playbook tests HAProxy container deployment in different environments

- name: Test HAProxy Container Deployment
  hosts: localhost
  gather_facts: yes
  vars:
    deployment_mode: "devcontainer"
    haproxy_image_registry: "docker.io"
    haproxy_image_name: "haproxy"
    haproxy_image_tag: "2.8"  # Debian-based instead of Alpine
    haproxy_restart_policy: "unless-stopped"
    haproxy_network_mode: "bridge"
    haproxy_stats_port: 8404
    haproxy_memory_limit: "512M"
    haproxy_cpu_limit: "0.5"
    haproxy_log_driver: "json-file"
    haproxy_log_max_size: "10m"
    haproxy_log_max_files: "3"
    haproxy_env_vars:
      TZ: "UTC"
    haproxy_labels:
      service: "haproxy"
      managed_by: "ansible"
      test: "true"
    ssl_enabled: false

  tasks:
    - name: Create test HAProxy configuration
      copy:
        content: |
          global
              daemon
              stats socket /run/haproxy/admin.sock mode 600 level admin
              stats timeout 30s

          defaults
              mode http
              timeout connect 5000ms
              timeout client 50000ms
              timeout server 50000ms
              option httplog

          frontend stats
              bind *:8404
              stats enable
              stats uri /stats
              stats refresh 10s
              stats admin if TRUE

          frontend http_front
              bind *:80
              default_backend http_back

          backend http_back
              balance roundrobin
              server web1 127.0.0.1:8080 check
        dest: /tmp/haproxy-test.cfg
        mode: '0644'

    - name: Test HAProxy container with DevContainer compatibility
      community.docker.docker_container:
        name: "haproxy-test"
        image: "{{ haproxy_image_registry }}/{{ haproxy_image_name }}:{{ haproxy_image_tag }}"
        state: started
        restart_policy: "{{ haproxy_restart_policy }}"
        network_mode: "{{ haproxy_network_mode }}"
        ports:
          - "8404:8404"
          - "8080:80"
        volumes:
          - "/tmp/haproxy-test.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro"
        env: "{{ haproxy_env_vars }}"
        memory: "{{ haproxy_memory_limit }}"
        cpus: "{{ haproxy_cpu_limit }}"
        log_driver: "{{ haproxy_log_driver }}"
        log_options:
          max-size: "{{ haproxy_log_max_size }}"
          max-file: "{{ haproxy_log_max_files }}"
        labels: "{{ haproxy_labels }}"
        # DevContainer compatibility settings
        security_opts:
          - "seccomp=unconfined"
          - "apparmor=unconfined"
        sysctls:
          net.ipv4.ip_unprivileged_port_start: "80"
        privileged: true
        cap_add:
          - "NET_BIND_SERVICE"
          - "NET_ADMIN"
        healthcheck:
          test: ["CMD-SHELL", "curl -f http://localhost:8404/stats || exit 1"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 30s
      register: haproxy_test_result

    - name: Wait for HAProxy to be ready
      pause:
        seconds: 10

    - name: Test HAProxy stats endpoint
      uri:
        url: "http://localhost:8404/stats"
        method: GET
        return_content: yes
      register: stats_test
      ignore_errors: yes

    - name: Display test results
      debug:
        msg: |
          HAProxy Container Test Results:
          ================================
          Container State: {{ haproxy_test_result.container.State.Status }}
          Container ID: {{ haproxy_test_result.container.Id[:12] }}
          Image: {{ haproxy_test_result.container.Config.Image }}
          Ports: {{ haproxy_test_result.container.NetworkSettings.Ports }}
          Stats Endpoint Status: {{ stats_test.status | default('Failed') }}
          Health Status: {{ haproxy_test_result.container.State.Health.Status | default('N/A') }}

    - name: Cleanup test container
      community.docker.docker_container:
        name: "haproxy-test"
        state: absent
      when: haproxy_test_result is defined

    - name: Cleanup test configuration
      file:
        path: /tmp/haproxy-test.cfg
        state: absent