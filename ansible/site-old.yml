---
# Main Jenkins Infrastructure Orchestration Playbook
# Production-grade deployment with native container management

# Dynamic host selection based on deployment_mode
- name: Set target hosts based on deployment mode
  hosts: localhost
  gather_facts: no
  run_once: true
  tasks:
    - name: Determine target hosts for deployment
      set_fact:
        target_hosts: >-
          {% if hostvars[groups['all'][0]]['deployment_mode'] | default('localhost') == 'devcontainer' %}
          localhost
          {% elif hostvars[groups['all'][0]]['deployment_mode'] | default('localhost') == 'production' %}
          jenkins_masters:monitoring:harbor:load_balancers:shared_storage
          {% elif hostvars[groups['all'][0]]['deployment_mode'] | default('localhost') == 'staging' %}
          jenkins_masters:monitoring
          {% else %}
          localhost
          {% endif %}
        jenkins_target_hosts: >-
          {% if hostvars[groups['all'][0]]['deployment_mode'] | default('localhost') == 'devcontainer' %}
          localhost
          {% elif hostvars[groups['all'][0]]['deployment_mode'] | default('localhost') in ['production', 'staging'] %}
          jenkins_masters
          {% else %}
          localhost
          {% endif %}
        monitoring_target_hosts: >-
          {% if hostvars[groups['all'][0]]['deployment_mode'] | default('localhost') == 'devcontainer' %}
          localhost
          {% elif hostvars[groups['all'][0]]['deployment_mode'] | default('localhost') in ['production', 'staging'] %}
          monitoring
          {% else %}
          localhost
          {% endif %}
    
    - name: Display deployment configuration
      debug:
        msg:
          - "Deployment Mode: {{ hostvars[groups['all'][0]]['deployment_mode'] | default('localhost') }}"
          - "Target Hosts: {{ target_hosts }}"
          - "Jenkins Hosts: {{ jenkins_target_hosts }}"
          - "Monitoring Hosts: {{ monitoring_target_hosts }}"

- name: Pre-Deployment Validation Suite
  hosts: "{{ (deployment_mode | default('devcontainer') == 'devcontainer') | ternary('localhost', 'all') }}"
  become: yes
  gather_facts: yes
  serial: "100%"  # Run validation on all hosts in parallel
  vars:
    deployment_environment: "{{ lookup('env', 'DEPLOYMENT_ENV') | default('local') }}"
    validation_mode: "{{ validation_mode | default('strict') }}"  # strict, warn, skip
  tasks:
    - name: 🔍 Pre-deployment validation framework
      block:
        - name: Validate deployment prerequisites
          assert:
            that:
              - ansible_memtotal_mb >= 4096
              - ansible_processor_vcpus >= 2
              - (ansible_mounts | selectattr('mount', 'equalto', '/') | first).size_available > 10000000000
              - ansible_distribution in ['Ubuntu', 'Debian', 'CentOS', 'RedHat', 'Rocky', 'AlmaLinux']
            fail_msg: |
              ❌ System requirements not met:
              - Memory: {{ ansible_memtotal_mb }}MB (minimum: 4GB)
              - CPU cores: {{ ansible_processor_vcpus }} (minimum: 2)
              - Disk space: {{ (ansible_mounts | selectattr('mount', 'equalto', '/') | first).size_available // 1000000000 }}GB (minimum: 10GB)
              - OS: {{ ansible_distribution }} (supported: Ubuntu, Debian, CentOS, RedHat, Rocky, AlmaLinux)
            success_msg: "✅ System requirements validated"

        - name: Check network connectivity to dependencies
          uri:
            url: "{{ item.url }}"
            method: "{{ item.method | default('HEAD') }}"
            timeout: 10
            status_code: [200, 301, 302, 403]  # Some services may return 403 for HEAD requests
          loop:
            - { url: "https://registry-1.docker.io", name: "Docker Hub" }
            - { url: "https://github.com", name: "GitHub" }
            - { url: "https://repo1.maven.org/maven2/", name: "Maven Central" }
            - { url: "https://registry.npmjs.org/", name: "NPM Registry" }
          loop_control:
            label: "{{ item.name }}"
          register: connectivity_check
          failed_when: false
          
        - name: Report connectivity issues
          debug:
            msg: |
              ⚠️ Network connectivity issues detected:
              {% for result in connectivity_check.results %}
              {% if result.status != 200 %}
              - {{ result.item.name }}: {{ result.status | default('Failed') }} ({{ result.msg | default('Unknown error') }})
              {% endif %}
              {% endfor %}
          when: connectivity_check.results | selectattr('status', 'undefined') | list | length > 0 or
                connectivity_check.results | selectattr('status', 'ne', 200) | list | length > 0

        - name: Validate container runtime availability
          block:
            - name: Check Docker availability
              shell: docker --version
              register: docker_check
              failed_when: false
              changed_when: false
              when: jenkins_container_runtime | default('docker') == 'docker'
              
            - name: Check Podman availability  
              shell: podman --version
              register: podman_check
              failed_when: false
              changed_when: false
              when: jenkins_container_runtime | default('docker') == 'podman'
              
            - name: Validate container runtime is functional
              shell: |
                {% if jenkins_container_runtime | default('docker') == 'docker' %}
                docker info >/dev/null 2>&1
                {% else %}
                podman info >/dev/null 2>&1
                {% endif %}
              register: runtime_functional
              failed_when: runtime_functional.rc != 0
              changed_when: false

        - name: Check for conflicting services
          block:
            - name: Check if ports are already in use
              wait_for:
                port: "{{ item }}"
                host: "{{ ansible_default_ipv4.address }}"
                timeout: 1
                state: started
              register: port_check
              failed_when: false
              loop:
                - 8080  # Jenkins default
                - 9090  # Prometheus
                - 3000  # Grafana
                - 5432  # PostgreSQL
                - 6379  # Redis
              
            - name: Report port conflicts
              debug:
                msg: |
                  ⚠️ Port conflicts detected:
                  {% for result in port_check.results %}
                  {% if result.failed is not defined or not result.failed %}
                  - Port {{ result.item }} is already in use
                  {% endif %}
                  {% endfor %}
              when: port_check.results | selectattr('failed', 'undefined') | list | length > 0 or
                    port_check.results | selectattr('failed', 'equalto', false) | list | length > 0

        - name: Validate SSH connectivity between hosts
          block:
            - name: Test SSH connectivity to other Jenkins masters
              wait_for:
                port: 22
                host: "{{ hostvars[item]['ansible_default_ipv4']['address'] | default(item) }}"
                timeout: 10
              loop: "{{ groups['jenkins_masters'] | default([]) }}"
              when: 
                - groups['jenkins_masters'] | default([]) | length > 1
                - item != inventory_hostname
              register: ssh_connectivity
              failed_when: false
              
            - name: Report SSH connectivity issues
              debug:
                msg: |
                  ⚠️ SSH connectivity issues to Jenkins masters:
                  {% for result in ssh_connectivity.results | default([]) %}
                  {% if result.failed %}
                  - {{ result.item }}: Connection failed
                  {% endif %}
                  {% endfor %}
              when: 
                - ssh_connectivity is defined
                - ssh_connectivity.results | selectattr('failed', 'equalto', true) | list | length > 0

        - name: Check available disk space for Jenkins data
          block:
            - name: Create Jenkins directories for space check
              file:
                path: "{{ item }}"
                state: directory
                mode: '0755'
              loop:
                - "{{ jenkins_home_dir | default('/var/jenkins') }}"
                - "{{ jenkins_shared_workspace | default('/shared/jenkins/workspace') }}"
              register: dir_creation
              
            - name: Check disk space requirements
              shell: |
                # Check available space in Jenkins home
                jenkins_avail=$(df {{ jenkins_home_dir | default('/var/jenkins') }} | tail -1 | awk '{print $4}')
                jenkins_avail_gb=$((jenkins_avail / 1024 / 1024))
                
                # Check available space in shared workspace
                workspace_avail=$(df {{ jenkins_shared_workspace | default('/shared/jenkins/workspace') }} | tail -1 | awk '{print $4}')
                workspace_avail_gb=$((workspace_avail / 1024 / 1024))
                
                echo "jenkins_home:${jenkins_avail_gb}GB,workspace:${workspace_avail_gb}GB"
                
                # Validate minimum space requirements (20GB for Jenkins home, 50GB for workspace)
                if [[ $jenkins_avail_gb -lt 20 ]]; then
                  echo "ERROR: Insufficient disk space for Jenkins home: ${jenkins_avail_gb}GB < 20GB" >&2
                  exit 1
                fi
                
                if [[ $workspace_avail_gb -lt 50 ]]; then
                  echo "WARNING: Low disk space for workspace: ${workspace_avail_gb}GB < 50GB recommended" >&2
                  exit 2
                fi
              register: disk_space_check
              failed_when: disk_space_check.rc == 1
              changed_when: false

        - name: Validate system security configuration
          block:
            - name: Check if SELinux/AppArmor is properly configured
              shell: |
                if command -v getenforce >/dev/null 2>&1; then
                  selinux_status=$(getenforce)
                  echo "SELinux: $selinux_status"
                  if [[ "$selinux_status" == "Disabled" ]]; then
                    echo "WARNING: SELinux is disabled"
                    exit 1
                  fi
                elif command -v aa-status >/dev/null 2>&1; then
                  apparmor_status=$(aa-status --enabled && echo "enabled" || echo "disabled")
                  echo "AppArmor: $apparmor_status"
                else
                  echo "No mandatory access control system found"
                  exit 2
                fi
              register: mac_check
              failed_when: false
              changed_when: false
              
            - name: Check for critical security updates
              package_facts:
                manager: auto
              register: package_facts_result
              
            - name: Validate firewall configuration
              shell: |
                if systemctl is-active --quiet firewalld; then
                  echo "firewalld: active"
                elif systemctl is-active --quiet ufw; then
                  echo "ufw: active"  
                elif systemctl is-active --quiet iptables; then
                  echo "iptables: active"
                else
                  echo "No active firewall detected"
                  exit 1
                fi
              register: firewall_check
              failed_when: false
              changed_when: false

        - name: Generate validation report
          template:
            src: validation-report.json.j2
            dest: "/tmp/jenkins-validation-{{ ansible_date_time.epoch }}.json"
            mode: '0644'
          vars:
            system_info:
              hostname: "{{ inventory_hostname }}"
              memory_mb: "{{ ansible_memtotal_mb }}"
              cpu_cores: "{{ ansible_processor_vcpus }}"
              disk_space: "{{ disk_space_check.stdout | default('unknown') }}"
              os: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
              runtime: "{{ jenkins_container_runtime | default('docker') }}"
            connectivity: "{{ connectivity_check.results | default([]) }}"
            ports: "{{ port_check.results | default([]) }}"
            security: 
              mac_system: "{{ mac_check.stdout | default('unknown') }}"
              firewall: "{{ firewall_check.stdout | default('unknown') }}"
            validation_timestamp: "{{ ansible_date_time.iso8601 }}"
            validation_mode: "{{ validation_mode }}"
          delegate_to: localhost
          run_once: true

        - name: Display validation summary
          debug:
            msg: |
              🔍 Pre-deployment Validation Summary for {{ inventory_hostname }}:
              ✅ System Requirements: PASSED
              ✅ Container Runtime: {{ jenkins_container_runtime | default('docker') | upper }} available
              ✅ Disk Space: Jenkins={{ disk_space_check.stdout.split(',')[0] | default('unknown') }}, Workspace={{ disk_space_check.stdout.split(',')[1] | default('unknown') }}
              ✅ Security: MAC={{ mac_check.stdout.split(':')[1] | default('unknown') | trim }}, Firewall={{ firewall_check.stdout.split(':')[1] | default('unknown') | trim }}
              
              {% if connectivity_check.results | selectattr('status', 'ne', 200) | list | length > 0 %}
              ⚠️  Network Issues: {{ connectivity_check.results | selectattr('status', 'ne', 200) | list | length }} connectivity problems
              {% endif %}
              
              Validation Mode: {{ validation_mode | upper }}
              Report: /tmp/jenkins-validation-{{ ansible_date_time.epoch }}.json

      rescue:
        - name: Handle validation failures
          debug:
            msg: |
              ❌ Pre-deployment validation failed: {{ ansible_failed_result.msg | default('Unknown validation error') }}
              
              Validation can proceed in different modes:
              - strict: Deployment blocked on any validation failure (current)
              - warn: Deployment continues with warnings
              - skip: Validation bypassed (not recommended for production)
              
              To change mode: ansible-playbook site.yml -e validation_mode=warn
              
        - name: Fail on strict validation mode
          fail:
            msg: |
              Deployment blocked due to validation failures in strict mode.
              Review the validation report and resolve issues before proceeding.
              
              To bypass (not recommended): ansible-playbook site.yml -e validation_mode=skip
          when: validation_mode == 'strict'
          
        - name: Continue with warnings in warn mode
          debug:
            msg: "⚠️ Continuing deployment despite validation warnings (warn mode)"
          when: validation_mode == 'warn'

      when: validation_mode != 'skip'
      tags: ['validation', 'pre-deployment']

- name: Bootstrap Infrastructure
  hosts: "{{ (deployment_mode | default('devcontainer') == 'devcontainer') | ternary('localhost', 'all') }}"
  become: yes
  gather_facts: yes
  serial: "{{ serial_execution | default('100%') }}"
  vars:
    deployment_environment: "{{ lookup('env', 'DEPLOYMENT_ENV') | default('local') }}"
  roles:
    - role: common
      tags: ['common', 'bootstrap']
    - role: docker
      tags: ['docker', 'bootstrap']
    - role: shared-storage
      tags: ['storage', 'bootstrap']
      when: shared_storage_enabled | default(true)
    - role: security
      tags: ['security', 'bootstrap']

- name: Setup Harbor Registry Integration
  hosts: "{{ (deployment_mode | default('devcontainer') == 'devcontainer') | ternary('localhost', 'harbor') }}"
  become: yes
  gather_facts: yes
  vars:
    harbor_registry_url: "{{ harbor_registry_url }}"
    harbor_project: "{{ harbor_project }}"
  roles:
    - role: harbor
      tags: ['harbor', 'registry']
      when: harbor_integration_enabled | default(true)

- name: Build and Manage Jenkins Images
  hosts: "{{ (deployment_mode | default('devcontainer') == 'devcontainer') | ternary('localhost', 'jenkins_masters[0]') }}"  # Build on primary master only
  become: yes
  gather_facts: yes
  vars:
    jenkins_images_build: true
    jenkins_images_push: true
  roles:
    - role: jenkins-images
      tags: ['images', 'build']
      when: build_jenkins_images | default(false)

- name: Deploy Jenkins Infrastructure
  hosts: "{{ (deployment_mode | default('devcontainer') == 'devcontainer') | ternary('localhost', 'jenkins_masters') }}"
  become: yes
  gather_facts: yes
  serial: 1  # Deploy masters one by one for HA
  vars:
    jenkins_ha_enabled: "{{ groups['jenkins_masters'] | default([]) | length > 1 }}"
    jenkins_master_priority: "{{ play_hosts.index(inventory_hostname) + 1 }}"
    # Unified jenkins-master role supports both single and multi-team deployments
    jenkins_teams: "{{ jenkins_teams | default([]) }}"
  roles:
    - role: jenkins-master
      tags: ['jenkins', 'deploy']
  post_tasks:
    - name: Wait for Jenkins to be ready
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ jenkins_master_port }}/login"
        method: GET
        status_code: [200, 403]
      register: jenkins_ready
      until: jenkins_ready is succeeded
      retries: 60
      delay: 10
      tags: ['jenkins', 'verify']

- name: Configure High Availability
  hosts: "{{ (deployment_mode | default('devcontainer') == 'devcontainer') | ternary('localhost', 'load_balancers:jenkins_masters') }}"
  become: yes
  gather_facts: yes
  roles:
    - role: high-availability
      tags: ['ha', 'cluster']
      when: 
        - jenkins_ha_enabled | default(false)
        - groups['jenkins_masters'] | default([]) | length > 1

# Dynamic Jenkins Agents are configured via JCasC - no separate deployment needed

- name: Setup Monitoring Stack
  hosts: "{{ (deployment_mode | default('devcontainer') == 'devcontainer') | ternary('localhost', 'monitoring') }}"
  become: yes
  gather_facts: yes
  roles:
    - role: monitoring
      tags: ['monitoring', 'prometheus', 'grafana']
      when: monitoring_enabled | default(true)

- name: Configure Backup System
  hosts: "{{ (deployment_mode | default('devcontainer') == 'devcontainer') | ternary('localhost', 'shared_storage:jenkins_masters') }}"
  become: yes
  gather_facts: yes
  roles:
    - role: backup
      tags: ['backup', 'storage']
      when: backup_enabled | default(true)

- name: Post-Deployment Verification
  hosts: "{{ (deployment_mode | default('devcontainer') == 'devcontainer') | ternary('localhost', 'jenkins_masters:monitoring') }}"
  become: no
  gather_facts: yes
  tasks:
    - name: Verify Jenkins master accessibility
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ jenkins_master_port }}/api/json"
        method: GET
        user: "{{ jenkins_admin_user }}"
        password: "{{ jenkins_admin_password }}"
        force_basic_auth: yes
      register: jenkins_api_check
      ignore_errors: yes
      tags: ['verify', 'api']

    - name: Verify monitoring endpoints
      uri:
        url: "{{ (deployment_mode | default('devcontainer') == 'devcontainer') | ternary('http://localhost:9090/api/v1/query?query=up', 'http://' + hostvars[groups['monitoring'][0]]['ansible_default_ipv4']['address'] + ':9090/api/v1/query?query=up') }}"
        method: GET
      register: prometheus_check
      when: 
        - monitoring_enabled | default(true)
        - (deployment_mode | default('devcontainer') == 'devcontainer') or (groups['monitoring'] is defined and groups['monitoring'] | length > 0)
      ignore_errors: yes
      tags: ['verify', 'monitoring']

    - name: Display deployment summary
      debug:
        msg: |
          🎉 Jenkins Infrastructure Deployment Completed!
          
          📋 Access Information:
          {% if deployment_mode | default('devcontainer') == 'devcontainer' %}
          Jenkins Masters: http://localhost:{{ jenkins_master_port | default(8080) }}
          {% else %}
          {% for host in groups['jenkins_masters'] | default([]) %}
          Jenkins Master {{ loop.index }}: http://{{ hostvars[host]['ansible_default_ipv4']['address'] }}:{{ jenkins_master_port }}
          {% endfor %}
          {% endif %}
          {% if jenkins_ha_enabled | default(false) %}
          Load Balancer VIP: http://{{ jenkins_vip }}:{{ jenkins_master_port }}
          {% endif %}
          {% if monitoring_enabled | default(true) %}
          {% if deployment_mode | default('devcontainer') == 'devcontainer' %}
          Prometheus: http://localhost:9090
          Grafana: http://localhost:3000
          {% elif groups['monitoring'] is defined and groups['monitoring'] | length > 0 %}
          Prometheus: http://{{ hostvars[groups['monitoring'][0]]['ansible_default_ipv4']['address'] }}:9090
          Grafana: http://{{ hostvars[groups['monitoring'][0]]['ansible_default_ipv4']['address'] }}:3000
          {% endif %}
          {% endif %}
          
          🔧 Default Credentials:
          Username: {{ jenkins_admin_user }}
          Password: [ENCRYPTED - Check vault]
          
          🏷️ Available Agent Labels:
          • dind docker-manager privileged (dynamic)
          • maven java-build (dynamic)
          • python python-build (dynamic)
          • nodejs frontend-build (dynamic)
          
          📊 Monitoring Status: {{ monitoring_enabled | default(true) and 'Enabled' or 'Disabled' }}
          💾 Backup Status: {{ backup_enabled | default(true) and 'Enabled' or 'Disabled' }}
          🏔️ HA Status: {{ jenkins_ha_enabled | default(false) and 'Active' or 'Single Node' }}
      tags: ['verify', 'summary']