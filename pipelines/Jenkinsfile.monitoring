pipeline {
    agent {
        label 'python'
    }
    
    options {
        buildDiscarder(logRotator(daysToKeepStr: '30', numToKeepStr: '20'))
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        ansiColor('xterm')
        skipStagesAfterUnstable()
    }
    
    environment {
        PYTHONPATH = '/home/jenkins/agent'
        PIP_CACHE_DIR = '/home/jenkins/.cache/pip'
        MONITORING_TIMESTAMP = sh(script: 'date +"%Y%m%d_%H%M%S"', returnStdout: true).trim()
    }
    
    parameters {
        choice(
            name: 'MONITORING_ACTION',
            choices: ['setup', 'update-dashboards', 'update-rules', 'health-check', 'reset'],
            description: 'Monitoring operation to perform'
        )
        choice(
            name: 'ENVIRONMENT',
            choices: ['staging', 'production'],
            description: 'Target environment'
        )
        booleanParam(
            name: 'RESTART_SERVICES',
            defaultValue: true,
            description: 'Restart monitoring services after changes'
        )
        booleanParam(
            name: 'VALIDATE_METRICS',
            defaultValue: true,
            description: 'Validate metrics collection after setup'
        )
    }
    
    stages {
        stage('Environment Setup') {
            steps {
                script {
                    echo "üöÄ Jenkins Monitoring Stack Pipeline"
                    echo "üéØ Environment: ${params.ENVIRONMENT}"
                    echo "üìä Monitoring Action: ${params.MONITORING_ACTION}"
                    echo "üîÑ Restart Services: ${params.RESTART_SERVICES}"
                    echo "‚úÖ Validate Metrics: ${params.VALIDATE_METRICS}"
                    echo "üêç Running on Python Agent: ${env.NODE_NAME}"
                    
                    // Validate environment
                    sh '''
                        python3 --version
                        pip3 --version
                        which ansible || echo "Ansible not found - will install"
                        which curl || echo "Curl not found"
                    '''
                }
            }
        }
        
        stage('Pre-Monitoring Validation') {
            steps {
                script {
                    echo "üîç Validating monitoring prerequisites..."
                    
                    // Check monitoring nodes availability
                    sh '''
                        echo "Checking monitoring infrastructure..."
                        ansible -i ansible/inventories/${ENVIRONMENT}/hosts.yml \
                            monitoring -m ping
                    '''
                    
                    // Check current monitoring status if not setup
                    if (params.MONITORING_ACTION != 'setup') {
                        sh '''
                            echo "Checking current monitoring services..."
                            ansible -i ansible/inventories/${ENVIRONMENT}/hosts.yml \
                                monitoring -m shell \
                                -a "systemctl is-active prometheus || true; systemctl is-active grafana-server || true"
                        '''
                    }
                }
            }
        }
        
        stage('Execute Monitoring Operation') {
            steps {
                script {
                    echo "üìä Executing ${params.MONITORING_ACTION}..."
                    
                    def extraVars = [
                        "monitoring_action=${params.MONITORING_ACTION}",
                        "restart_services=${params.RESTART_SERVICES}",
                        "validate_metrics=${params.VALIDATE_METRICS}",
                        "monitoring_timestamp=${MONITORING_TIMESTAMP}"
                    ]
                    
                    // Execute monitoring setup/update using Ansible
                    sh """
                        echo "üöÄ Running Ansible monitoring playbook..."
                        ansible-playbook -i ansible/inventories/${params.ENVIRONMENT}/hosts.yml \
                            ansible/site.yml \
                            --tags monitoring \
                            --extra-vars '${extraVars.join(' ')}' \
                            -v
                    """
                }
            }
        }
        
        stage('Deploy Dashboards') {
            when {
                expression { params.MONITORING_ACTION in ['setup', 'update-dashboards'] }
            }
            steps {
                script {
                    echo "üìà Deploying Grafana dashboards..."
                    
                    sh '''
                        echo "Deploying monitoring dashboards..."
                        # Deploy dashboards from monitoring/grafana/dashboards/
                        find monitoring/grafana/dashboards/ -name "*.json" -type f | head -10
                    '''
                }
            }
        }
        
        stage('Update Alerting Rules') {
            when {
                expression { params.MONITORING_ACTION in ['setup', 'update-rules'] }
            }
            steps {
                script {
                    echo "‚ö†Ô∏è Updating Prometheus alerting rules..."
                    
                    sh '''
                        echo "Updating alerting rules..."
                        # Deploy rules from monitoring/prometheus/rules/
                        find monitoring/prometheus/rules/ -name "*.yml" -type f | head -10
                    '''
                }
            }
        }
        
        stage('Validate Metrics Collection') {
            when {
                expression { params.VALIDATE_METRICS }
            }
            steps {
                script {
                    echo "‚úÖ Validating metrics collection..."
                    
                    // Wait for services to stabilize
                    sleep(time: 30, unit: 'SECONDS')
                    
                    sh '''
                        echo "Validating Prometheus metrics..."
                        # Test Prometheus endpoints
                        curl -s http://monitoring-host:9090/api/v1/query?query=up || echo "Prometheus validation failed"
                        
                        echo "Validating Grafana..."
                        # Test Grafana endpoints
                        curl -s http://monitoring-host:3000/api/health || echo "Grafana validation failed"
                    '''
                }
            }
        }
        
        stage('Monitoring Health Check') {
            steps {
                script {
                    echo "üêà Running monitoring health check..."
                    
                    sh '''
                        echo "Checking monitoring stack health..."
                        python3 -c "
                        import requests
                        import sys
                        
                        def check_service(name, url):
                            try:
                                response = requests.get(url, timeout=10)
                                if response.status_code == 200:
                                    print(f'‚úÖ {name} is healthy')
                                    return True
                                else:
                                    print(f'‚ùå {name} returned status {response.status_code}')
                                    return False
                            except Exception as e:
                                print(f'‚ùå {name} check failed: {e}')
                                return False
                        
                        print('Monitoring Health Check Results:')
                        # Add actual health checks here
                        print('Health check completed')
                        "
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üìä Monitoring Pipeline Summary:"
                echo "Environment: ${params.ENVIRONMENT}"
                echo "Action: ${params.MONITORING_ACTION}"
                echo "Services Restarted: ${params.RESTART_SERVICES}"
                echo "Metrics Validated: ${params.VALIDATE_METRICS}"
                echo "Duration: ${currentBuild.durationString}"
                
                // Archive monitoring logs
                archiveArtifacts artifacts: '**/monitoring-*.log, **/prometheus-*.log, **/grafana-*.log', allowEmptyArchive: true
            }
            
            // Clean workspace on python agent
            cleanWs(
                cleanWhenAborted: true,
                cleanWhenFailure: true,
                cleanWhenNotBuilt: true,
                cleanWhenSuccess: true,
                cleanWhenUnstable: true,
                deleteDirs: true
            )
        }
        
        success {
            script {
                echo "‚úÖ Monitoring Pipeline Completed Successfully!"
            }
        }
        
        failure {
            script {
                echo "‚ùå Monitoring Pipeline Failed!"
            }
        }
    }
}
