#!/usr/bin/env groovy

/**
 * Job DSL Seed Pipeline
 * 
 * This pipeline is executed via cpsScm from the Job-DSL-Seed job.
 * It processes Job DSL scripts from the Git repository to create/update Jenkins jobs.
 * 
 * Features:
 * - Git repository checkout and validation
 * - Job DSL script discovery and processing
 * - Comprehensive error handling and reporting
 * - Artifact generation for audit trails
 * - Support for dry-run mode
 */

pipeline {
    agent any
    
    options {
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
        skipDefaultCheckout()  // We'll checkout manually for better control
        disableConcurrentBuilds()
    }
    
    environment {
        // Job DSL processing environment
        JOBDSL_WORKSPACE = "${WORKSPACE}/job-dsl-processing"
        SCRIPT_VALIDATION_ENABLED = "${params.VALIDATE_BEFORE_APPLY ?: true}"
        PROCESSING_TIMESTAMP = "${new Date().format('yyyy-MM-dd_HH-mm-ss')}"
    }
    
    stages {
        stage('Checkout Repository') {
            steps {
                script {
                    echo "🔄 Checking out repository: ${params.GIT_REPOSITORY}"
                    echo "📋 Branch: ${params.DSL_BRANCH}"
                    echo "📁 DSL Scripts Path: ${params.DSL_SCRIPTS_PATH}"
                    
                    // Clean checkout of the repository
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${params.DSL_BRANCH}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [
                            [$class: 'CleanBeforeCheckout'],
                            [$class: 'CloneOption', 
                             depth: 0, 
                             noTags: false, 
                             reference: '', 
                             shallow: false,
                             timeout: 10
                            ]
                        ],
                        submoduleCfg: [],
                        userRemoteConfigs: [[
                            credentialsId: params.GIT_CREDENTIALS,
                            url: params.GIT_REPOSITORY
                        ]]
                    ])
                    
                    // Verify checkout
                    def gitCommit = sh(
                        script: 'git rev-parse HEAD',
                        returnStdout: true
                    ).trim()
                    
                    def gitBranch = sh(
                        script: 'git rev-parse --abbrev-ref HEAD',
                        returnStdout: true
                    ).trim()
                    
                    env.GIT_COMMIT = gitCommit
                    env.GIT_BRANCH = gitBranch
                    
                    echo "✅ Repository checked out successfully"
                    echo "   Commit: ${gitCommit}"
                    echo "   Branch: ${gitBranch}"
                }
            }
        }
        
        stage('Discover DSL Scripts') {
            steps {
                script {
                    echo "🔍 Discovering Job DSL scripts in ${params.DSL_SCRIPTS_PATH}..."
                    
                    // Verify DSL scripts directory exists
                    if (!fileExists(params.DSL_SCRIPTS_PATH)) {
                        error "DSL scripts directory not found: ${params.DSL_SCRIPTS_PATH}"
                    }
                    
                    // Find all .groovy files in the DSL directory
                    def dslFiles = sh(
                        script: """
                            find ${params.DSL_SCRIPTS_PATH} -name '*.groovy' -type f | sort
                        """,
                        returnStdout: true
                    ).trim()
                    
                    if (!dslFiles) {
                        error "No Job DSL scripts (.groovy files) found in ${params.DSL_SCRIPTS_PATH}"
                    }
                    
                    def scriptList = dslFiles.split('\\n')
                    env.DSL_SCRIPT_COUNT = scriptList.size().toString()
                    env.DSL_SCRIPT_LIST = dslFiles
                    
                    echo "📊 Found ${env.DSL_SCRIPT_COUNT} Job DSL scripts:"
                    scriptList.eachWithIndex { script, index ->
                        echo "   ${index + 1}. ${script}"
                    }
                    
                    // Categorize scripts for processing order
                    def folderScripts = scriptList.findAll { it.contains('folders.groovy') }
                    def viewScripts = scriptList.findAll { it.contains('views.groovy') }
                    def jobScripts = scriptList.findAll { !it.contains('folders.groovy') && !it.contains('views.groovy') }
                    
                    // Process in order: folders -> jobs -> views
                    def orderedScripts = []
                    orderedScripts.addAll(folderScripts)
                    orderedScripts.addAll(jobScripts)
                    if (params.PROCESS_VIEWS) {
                        orderedScripts.addAll(viewScripts)
                    }
                    
                    env.ORDERED_SCRIPT_LIST = orderedScripts.join('\\n')
                    
                    echo "📋 Processing order:"
                    orderedScripts.eachWithIndex { script, index ->
                        echo "   ${index + 1}. ${script}"
                    }
                }
            }
        }
        
        stage('Validate DSL Scripts') {
            when {
                expression { params.VALIDATE_BEFORE_APPLY }
            }
            steps {
                script {
                    echo "🔍 Validating Job DSL scripts..."
                    
                    def scriptList = env.ORDERED_SCRIPT_LIST.split('\\n')
                    def validationErrors = []
                    
                    scriptList.each { scriptPath ->
                        echo "   Validating: ${scriptPath}"
                        
                        try {
                            // Basic file validation
                            if (!fileExists(scriptPath)) {
                                validationErrors.add("File not found: ${scriptPath}")
                                return
                            }
                            
                            def content = readFile(scriptPath).trim()
                            if (content.isEmpty()) {
                                validationErrors.add("Empty script file: ${scriptPath}")
                                return
                            }
                            
                            // Check for basic Groovy syntax
                            if (!content.contains('Job') && !content.contains('View') && !content.contains('folder')) {
                                validationErrors.add("Script doesn't appear to contain Job DSL content: ${scriptPath}")
                            }
                            
                        } catch (Exception e) {
                            validationErrors.add("Error validating ${scriptPath}: ${e.message}")
                        }
                    }
                    
                    if (validationErrors) {
                        echo "❌ Validation errors found:"
                        validationErrors.each { error ->
                            echo "   • ${error}"
                        }
                        error "Job DSL script validation failed"
                    }
                    
                    echo "✅ All Job DSL scripts validated successfully"
                }
            }
        }
        
        stage('Process Job DSL Scripts') {
            steps {
                script {
                    if (params.DRY_RUN) {
                        echo "🧪 DRY RUN MODE - Simulating Job DSL processing..."
                        
                        def scriptList = env.ORDERED_SCRIPT_LIST.split('\\n')
                        scriptList.each { scriptPath ->
                            echo "   Would process: ${scriptPath}"
                            
                            // Show what would be processed
                            def content = readFile(scriptPath)
                            def lines = content.split('\\n')
                            echo "     Lines: ${lines.size()}"
                            
                            // Look for job/view/folder definitions
                            def jobCount = content.count('Job(')
                            def viewCount = content.count('View(')
                            def folderCount = content.count('folder(')
                            
                            if (jobCount > 0) echo "     Jobs to create/update: ${jobCount}"
                            if (viewCount > 0) echo "     Views to create/update: ${viewCount}"
                            if (folderCount > 0) echo "     Folders to create/update: ${folderCount}"
                        }
                        
                        echo "✅ Dry run completed - no actual changes made"
                        return
                    }
                    
                    echo "🚀 Processing Job DSL scripts..."
                    
                    try {
                        // Execute Job DSL processing
                        def dslConfig = [
                            targets: params.DSL_SCRIPTS_PATH + '/**/*.groovy',
                            removedJobAction: params.REMOVAL_ACTION,
                            removedViewAction: params.REMOVAL_ACTION,
                            lookupStrategy: 'SEED_JOB',
                            additionalClasspath: '',
                            sandbox: false,
                            ignoreExisting: false,
                            ignoreMissingFiles: false,
                            failOnMissingPlugin: true,
                            unstableOnDeprecation: true,
                            additionalParameters: [
                                GIT_COMMIT: env.GIT_COMMIT,
                                GIT_BRANCH: env.GIT_BRANCH,
                                BUILD_NUMBER: env.BUILD_NUMBER,
                                BUILD_URL: env.BUILD_URL,
                                PROCESSING_TIMESTAMP: env.PROCESSING_TIMESTAMP
                            ]
                        ]
                        
                        echo "📋 Job DSL Configuration:"
                        dslConfig.each { key, value ->
                            echo "   ${key}: ${value}"
                        }
                        
                        // Execute the Job DSL
                        def result = jobDsl(dslConfig)
                        
                        // Capture results
                        env.JOBS_CREATED = result.createdJobs.size().toString()
                        env.JOBS_UPDATED = result.updatedJobs.size().toString()
                        env.JOBS_REMOVED = result.removedJobs.size().toString()
                        env.VIEWS_CREATED = result.createdViews.size().toString()
                        env.VIEWS_UPDATED = result.updatedViews.size().toString()
                        env.VIEWS_REMOVED = result.removedViews.size().toString()
                        
                        echo "✅ Job DSL processing completed successfully"
                        echo "📊 Results Summary:"
                        echo "   Jobs - Created: ${env.JOBS_CREATED}, Updated: ${env.JOBS_UPDATED}, Removed: ${env.JOBS_REMOVED}"
                        echo "   Views - Created: ${env.VIEWS_CREATED}, Updated: ${env.VIEWS_UPDATED}, Removed: ${env.VIEWS_REMOVED}"
                        
                        // Log detailed results
                        if (result.createdJobs) {
                            echo "🆕 Created Jobs:"
                            result.createdJobs.each { job ->
                                echo "   • ${job.fullName}"
                            }
                        }
                        
                        if (result.updatedJobs) {
                            echo "🔄 Updated Jobs:"
                            result.updatedJobs.each { job ->
                                echo "   • ${job.fullName}"
                            }
                        }
                        
                        if (result.createdViews) {
                            echo "🆕 Created Views:"
                            result.createdViews.each { view ->
                                echo "   • ${view.name}"
                            }
                        }
                        
                        if (result.updatedViews) {
                            echo "🔄 Updated Views:"
                            result.updatedViews.each { view ->
                                echo "   • ${view.name}"
                            }
                        }
                        
                    } catch (Exception e) {
                        echo "❌ Job DSL processing failed: ${e.message}"
                        throw e
                    }
                }
            }
        }
        
        stage('Generate Processing Report') {
            steps {
                script {
                    echo "📋 Generating Job DSL processing report..."
                    
                    def report = """# Job DSL Seed Processing Report

## Build Information
- **Build Number**: ${env.BUILD_NUMBER}
- **Build URL**: ${env.BUILD_URL}
- **Processing Date**: ${env.PROCESSING_TIMESTAMP}
- **Git Commit**: ${env.GIT_COMMIT}
- **Git Branch**: ${env.GIT_BRANCH}

## Configuration
- **Repository**: ${params.GIT_REPOSITORY}
- **Branch**: ${params.DSL_BRANCH}
- **DSL Scripts Path**: ${params.DSL_SCRIPTS_PATH}
- **Removal Action**: ${params.REMOVAL_ACTION}
- **Dry Run**: ${params.DRY_RUN}
- **Process Views**: ${params.PROCESS_VIEWS}
- **Validation Enabled**: ${params.VALIDATE_BEFORE_APPLY}

## Processing Results
- **Scripts Processed**: ${env.DSL_SCRIPT_COUNT ?: '0'}
"""

                    if (!params.DRY_RUN) {
                        report += """
### Jobs
- **Created**: ${env.JOBS_CREATED ?: '0'}
- **Updated**: ${env.JOBS_UPDATED ?: '0'}
- **Removed**: ${env.JOBS_REMOVED ?: '0'}

### Views  
- **Created**: ${env.VIEWS_CREATED ?: '0'}
- **Updated**: ${env.VIEWS_UPDATED ?: '0'}
- **Removed**: ${env.VIEWS_REMOVED ?: '0'}
"""
                    } else {
                        report += """
### Dry Run Results
- **Mode**: Simulation only - no actual changes made
- **Scripts that would be processed**: ${env.DSL_SCRIPT_COUNT ?: '0'}
"""
                    }
                    
                    report += """

## Processed Scripts
${env.ORDERED_SCRIPT_LIST ?: 'No scripts processed'}

## Next Steps
1. Review created/updated jobs in Jenkins UI
2. Verify job configurations are correct
3. Test job functionality as needed
4. Update job parameters or configurations if required

---
*Report generated by Job DSL Seed Pipeline at ${new Date()}*
"""
                    
                    writeFile file: "job-dsl-processing-report-${env.BUILD_NUMBER}.md", text: report
                    
                    // Create JSON report for programmatic use
                    def jsonReport = [
                        buildNumber: env.BUILD_NUMBER,
                        buildUrl: env.BUILD_URL,
                        timestamp: env.PROCESSING_TIMESTAMP,
                        gitCommit: env.GIT_COMMIT,
                        gitBranch: env.GIT_BRANCH,
                        configuration: [
                            repository: params.GIT_REPOSITORY,
                            branch: params.DSL_BRANCH,
                            scriptsPath: params.DSL_SCRIPTS_PATH,
                            removalAction: params.REMOVAL_ACTION,
                            dryRun: params.DRY_RUN,
                            processViews: params.PROCESS_VIEWS,
                            validationEnabled: params.VALIDATE_BEFORE_APPLY
                        ],
                        results: [
                            scriptsProcessed: env.DSL_SCRIPT_COUNT?.toInteger() ?: 0,
                            jobsCreated: env.JOBS_CREATED?.toInteger() ?: 0,
                            jobsUpdated: env.JOBS_UPDATED?.toInteger() ?: 0,
                            jobsRemoved: env.JOBS_REMOVED?.toInteger() ?: 0,
                            viewsCreated: env.VIEWS_CREATED?.toInteger() ?: 0,
                            viewsUpdated: env.VIEWS_UPDATED?.toInteger() ?: 0,
                            viewsRemoved: env.VIEWS_REMOVED?.toInteger() ?: 0
                        ]
                    ]
                    
                    writeJSON file: "job-dsl-processing-report-${env.BUILD_NUMBER}.json", json: jsonReport
                    
                    echo "✅ Processing reports generated"
                }
            }
        }
    }
    
    post {
        always {
            // Archive processing reports
            archiveArtifacts(
                artifacts: 'job-dsl-processing-report-*.md,job-dsl-processing-report-*.json',
                allowEmptyArchive: true,
                fingerprint: true
            )
            
            // Clean up workspace
            script {
                if (env.JOBDSL_WORKSPACE && fileExists(env.JOBDSL_WORKSPACE)) {
                    dir(env.JOBDSL_WORKSPACE) {
                        deleteDir()
                    }
                }
            }
        }
        
        success {
            script {
                echo "🎉 Job DSL Seed processing completed successfully!"
                
                def summary = params.DRY_RUN ? 
                    "Job DSL Seed pipeline completed successfully in DRY RUN mode" :
                    "Job DSL processing completed: ${env.JOBS_CREATED ?: '0'} jobs created, ${env.JOBS_UPDATED ?: '0'} updated, ${env.VIEWS_CREATED ?: '0'} views created"
                
                // Optional: Send notification
                if (env.SLACK_WEBHOOK) {
                    slackSend(
                        channel: '#jenkins-ops',
                        color: 'good',
                        message: "✅ ${summary}"
                    )
                }
            }
        }
        
        failure {
            script {
                echo "❌ Job DSL Seed processing failed!"
                
                // Optional: Send failure notification
                if (env.SLACK_WEBHOOK) {
                    slackSend(
                        channel: '#jenkins-ops',
                        color: 'danger',
                        message: "❌ Job DSL Seed pipeline failed. Check build #${env.BUILD_NUMBER} for details."
                    )
                }
            }
        }
        
        unstable {
            script {
                echo "⚠️ Job DSL Seed processing completed with warnings!"
            }
        }
    }
}