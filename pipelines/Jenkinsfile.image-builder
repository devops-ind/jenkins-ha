#!/usr/bin/env groovy

pipeline {
    agent {
        label 'python'
    }
    
    options {
        buildDiscarder(logRotator(daysToKeepStr: '30', numToKeepStr: '20'))
        timeout(time: 2, unit: 'HOURS')
        timestamps()
        ansiColor('xterm')
    }
    
    environment {
        HARBOR_REGISTRY = "${HARBOR_REGISTRY_URL}"
        HARBOR_PROJECT = "${HARBOR_PROJECT_NAME}"
        HARBOR_CREDENTIALS = credentials('harbor-registry')
        JENKINS_VERSION = "${JENKINS_VERSION}"
        AGENT_VERSION = "${JENKINS_AGENT_VERSION}"
        BUILD_DATE = sh(script: 'date -u +"%Y-%m-%dT%H:%M:%SZ"', returnStdout: true).trim()
        GIT_COMMIT = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
        IMAGE_TAG = "${(params.IMAGE_TAG != 'latest') ? params.IMAGE_TAG : env.BUILD_NUMBER}"
        DOCKER_BUILDKIT = '1'
        COMPOSE_DOCKER_CLI_BUILD = '1'
    }
    
    stages {
        stage('Preparation') {
            steps {
                script {
                    echo "üöÄ Jenkins Infrastructure Image Builder Pipeline"
                    echo "üì¶ Harbor Registry: ${HARBOR_REGISTRY}/${HARBOR_PROJECT}"
                    echo "üè∑Ô∏è Image Tag: ${IMAGE_TAG}"
                    echo "üî® Force Rebuild: ${params.FORCE_REBUILD}"
                    echo "üì§ Push to Harbor: ${params.PUSH_TO_HARBOR}"
                    echo "üéØ Images to Build: ${params.IMAGES_TO_BUILD}"
                    
                    // Login to Harbor registry
                    sh """
                        echo "üîê Logging into Harbor registry..."
                        echo \$HARBOR_CREDENTIALS_PSW | docker login \$HARBOR_REGISTRY -u \$HARBOR_CREDENTIALS_USR --password-stdin
                    """
                }
            }
        }
        
        stage('Build Images with Ansible') {
            steps {
                script {
                    echo "üèóÔ∏è Building Jenkins Images using Ansible jenkins-images role..."
                    
                    // Prepare ansible variables for image building
                    def extraVars = [
                        "jenkins_master_image_tag=${IMAGE_TAG}",
                        "jenkins_agent_image_tag=${IMAGE_TAG}",
                        "jenkins_images_force_rebuild=${params.FORCE_REBUILD}",
                        "jenkins_images_push=${params.PUSH_TO_HARBOR}",
                        "harbor_registry_url=${HARBOR_REGISTRY}",
                        "harbor_project=${HARBOR_PROJECT}"
                    ]
                    
                    // Execute ansible playbook
                    sh """
                        echo "üöÄ Executing Ansible playbook to build images..."
                        ansible-playbook -i ansible/inventories/production/hosts.yml \
                            ansible/deploy-images.yml \
                            --extra-vars '${extraVars.join(' ')}' \
                            --extra-vars "images_to_build=${params.IMAGES_TO_BUILD}" \
                            -v
                    """
                }
            }
        }
        
        stage('Security Scanning') {
            when {
                expression { params.PUSH_TO_HARBOR }
            }
            steps {
                script {
                    echo "üîç Images will be automatically scanned by Harbor registry..."
                    echo "üìä Built images for: ${params.IMAGES_TO_BUILD}"
                    echo "üè∑Ô∏è Image tag: ${IMAGE_TAG}"
                    echo "üì§ Check Harbor UI at ${HARBOR_REGISTRY} for vulnerability reports"
                }
            }
        }
        
        stage('Trigger Infrastructure Update') {
            when {
                allOf {
                    expression { params.PUSH_TO_HARBOR }
                    equals expected: 'all', actual: params.IMAGES_TO_BUILD
                }
            }
            steps {
                script {
                    echo "üîÑ Triggering infrastructure update with new images..."
                    
                    // Trigger the infrastructure update job
                    build job: 'Infrastructure/Infrastructure-Update',
                          parameters: [
                              string(name: 'IMAGE_TAG', value: "${IMAGE_TAG}"),
                              booleanParam(name: 'RESTART_SERVICES', value: true),
                              string(name: 'UPDATE_REASON', value: "New images built: ${IMAGE_TAG}")
                          ],
                          wait: false
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üìä Build Summary:"
                echo "Images Built: ${params.IMAGES_TO_BUILD}"
                echo "Image Tag: ${IMAGE_TAG}"
                echo "Force Rebuild: ${params.FORCE_REBUILD}"
                echo "Pushed to Harbor: ${params.PUSH_TO_HARBOR}"
                
                // Archive build artifacts
                archiveArtifacts artifacts: '**/Dockerfile*', allowEmptyArchive: true
                
                // Clean workspace
                cleanWs()
            }
        }
        
        success {
            script {
                echo "‚úÖ Jenkins Images Build Pipeline Completed Successfully!"
                
                // Send notification if configured
                if (env.SLACK_WEBHOOK) {
                    slackSend(
                        channel: '#infrastructure',
                        color: 'good',
                        message: """
                            ‚úÖ Jenkins Images Build Successful
                            
                            üì¶ Images: ${params.IMAGES_TO_BUILD}
                            üè∑Ô∏è Tag: ${IMAGE_TAG}
                            üì§ Registry: ${HARBOR_REGISTRY}/${HARBOR_PROJECT}
                            ‚è±Ô∏è Duration: ${currentBuild.durationString}
                            
                            üîó Build: ${env.BUILD_URL}
                        """.stripIndent()
                    )
                }
            }
        }
        
        failure {
            script {
                echo "‚ùå Jenkins Images Build Pipeline Failed!"
                
                // Send failure notification
                if (env.SLACK_WEBHOOK) {
                    slackSend(
                        channel: '#infrastructure',
                        color: 'danger',
                        message: """
                            ‚ùå Jenkins Images Build Failed
                            
                            üì¶ Images: ${params.IMAGES_TO_BUILD}
                            üè∑Ô∏è Tag: ${IMAGE_TAG}
                            ‚è±Ô∏è Duration: ${currentBuild.durationString}
                            
                            üîó Build: ${env.BUILD_URL}
                            üìã Please check logs for details
                        """.stripIndent()
                    )
                }
            }
        }
        
        unstable {
            script {
                echo "‚ö†Ô∏è Jenkins Images Build Pipeline Unstable!"
            }
        }
    }
}
