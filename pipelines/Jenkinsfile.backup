pipeline {
    agent {
        label 'python'
    }
    
    options {
        buildDiscarder(logRotator(daysToKeepStr: '90', numToKeepStr: '50'))
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        ansiColor('xterm')
        skipStagesAfterUnstable()
        disableConcurrentBuilds()
    }
    
    environment {
        PYTHONPATH = '/home/jenkins/agent'
        PIP_CACHE_DIR = '/home/jenkins/.cache/pip'
        BACKUP_TIMESTAMP = sh(script: 'date +"%Y%m%d_%H%M%S"', returnStdout: true).trim()
    }
    
    parameters {
        choice(
            name: 'BACKUP_TYPE',
            choices: ['incremental', 'full', 'configuration-only', 'volumes-only'],
            description: 'Type of backup to perform'
        )
        choice(
            name: 'ENVIRONMENT',
            choices: ['staging', 'production'],
            description: 'Target environment'
        )
        booleanParam(
            name: 'VERIFY_BACKUP',
            defaultValue: true,
            description: 'Verify backup integrity after creation'
        )
        booleanParam(
            name: 'CLEANUP_OLD_BACKUPS',
            defaultValue: true,
            description: 'Clean up old backups according to retention policy'
        )
        string(
            name: 'CUSTOM_TAG',
            defaultValue: '',
            description: 'Custom tag for backup (optional)'
        )
    }
    
    stages {
        stage('Environment Setup') {
            steps {
                script {
                    echo "üöÄ Jenkins Backup Pipeline"
                    echo "üéØ Environment: ${params.ENVIRONMENT}"
                    echo "üì¶ Backup Type: ${params.BACKUP_TYPE}"
                    echo "üè∑Ô∏è Backup Tag: ${params.CUSTOM_TAG ?: BACKUP_TIMESTAMP}"
                    echo "‚úÖ Verify Backup: ${params.VERIFY_BACKUP}"
                    echo "üßπ Cleanup Old: ${params.CLEANUP_OLD_BACKUPS}"
                    echo "üêç Running on Python Agent: ${env.NODE_NAME}"
                    
                    // Ensure required tools are available
                    sh '''
                        python3 --version
                        pip3 --version
                        which ansible || echo "Ansible not found - will install"
                        which rsync || echo "Rsync not found - will install"
                    '''
                }
            }
        }
        
        stage('Pre-Backup Validation') {
            steps {
                script {
                    echo "üîç Validating backup prerequisites..."
                    
                    // Check backup destination
                    sh '''
                        echo "Checking backup destination..."
                        # Add validation for backup mount points
                        df -h || true
                        mount | grep backup || echo "Backup mount not found"
                    '''
                    
                    // Check Jenkins services status
                    sh '''
                        echo "Checking Jenkins services status..."
                        ansible -i ansible/inventories/${ENVIRONMENT}/hosts.yml \
                            jenkins_masters -m shell \
                            -a "systemctl is-active jenkins-master || true"
                    '''
                }
            }
        }
        
        stage('Execute Backup') {
            steps {
                script {
                    echo "üì¶ Executing ${params.BACKUP_TYPE} backup..."
                    
                    def backupTag = params.CUSTOM_TAG ?: BACKUP_TIMESTAMP
                    def extraVars = [
                        "backup_type=${params.BACKUP_TYPE}",
                        "backup_tag=${backupTag}",
                        "verify_backup=${params.VERIFY_BACKUP}",
                        "cleanup_old_backups=${params.CLEANUP_OLD_BACKUPS}"
                    ]
                    
                    // Execute backup using Ansible
                    sh """
                        echo "üöÄ Running Ansible backup playbook..."
                        ansible-playbook -i ansible/inventories/${params.ENVIRONMENT}/hosts.yml \
                            ansible/site.yml \
                            --tags backup \
                            --extra-vars '${extraVars.join(' ')}' \
                            -v
                    """
                }
            }
        }
        
        stage('Backup Verification') {
            when {
                expression { params.VERIFY_BACKUP }
            }
            steps {
                script {
                    echo "‚úÖ Verifying backup integrity..."
                    
                    sh '''
                        echo "Running backup verification scripts..."
                        # Add backup verification logic
                        python3 -c "print('Backup verification completed')" 
                    '''
                }
            }
        }
        
        stage('Cleanup Old Backups') {
            when {
                expression { params.CLEANUP_OLD_BACKUPS }
            }
            steps {
                script {
                    echo "üßπ Cleaning up old backups..."
                    
                    sh '''
                        echo "Running backup cleanup..."
                        # Add cleanup logic based on retention policies
                        find /backup -type f -name "*.tar.gz" -mtime +30 -ls || true
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üìä Backup Pipeline Summary:"
                echo "Environment: ${params.ENVIRONMENT}"
                echo "Backup Type: ${params.BACKUP_TYPE}"
                echo "Backup Tag: ${params.CUSTOM_TAG ?: BACKUP_TIMESTAMP}"
                echo "Duration: ${currentBuild.durationString}"
                
                // Archive backup logs
                archiveArtifacts artifacts: '**/backup-*.log', allowEmptyArchive: true
            }
            
            // Clean workspace on python agent
            cleanWs(
                cleanWhenAborted: true,
                cleanWhenFailure: true,
                cleanWhenNotBuilt: true,
                cleanWhenSuccess: true,
                cleanWhenUnstable: true,
                deleteDirs: true
            )
        }
        
        success {
            script {
                echo "‚úÖ Backup Pipeline Completed Successfully!"
            }
        }
        
        failure {
            script {
                echo "‚ùå Backup Pipeline Failed!"
            }
        }
    }
}
