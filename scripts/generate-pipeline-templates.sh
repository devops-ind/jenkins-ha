#!/bin/bash
# Advanced Pipeline Template Generator for Deployment Engineering
# Generates standardized pipeline templates with deployment best practices

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TEMPLATES_DIR="${SCRIPT_DIR}/../templates/pipelines"
TEAMS_CONFIG="${SCRIPT_DIR}/../ansible/group_vars/all/jenkins_teams.yml"
STRATEGIES_CONFIG="${SCRIPT_DIR}/../ansible/group_vars/all/deployment_strategies.yml"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to validate dependencies
validate_dependencies() {
    log_info "Validating dependencies..."
    
    local missing_deps=()
    
    # Check for required commands
    for cmd in yq jq envsubst; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing_deps+=("$cmd")
        fi
    done
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        log_error "Missing dependencies: ${missing_deps[*]}"
        log_info "Install missing dependencies:"
        log_info "  macOS: brew install yq jq"
        log_info "  Ubuntu: apt-get install yq jq"
        exit 1
    fi
    
    log_success "All dependencies validated"
}

# Function to create template directories
create_template_structure() {
    log_info "Creating template directory structure..."
    
    mkdir -p "$TEMPLATES_DIR"/{application,infrastructure,monitoring,security}
    
    log_success "Template directories created"
}

# Function to generate application pipeline template
generate_application_template() {
    local app_type="$1"
    local template_file="${TEMPLATES_DIR}/application/${app_type}-pipeline.Jenkinsfile"
    
    log_info "Generating $app_type application pipeline template..."
    
    cat > "$template_file" << 'EOF'
// Advanced ${APP_TYPE} Pipeline with Deployment Engineering Best Practices
// Generated by deployment engineering automation

pipeline {
    agent { 
        label '${TEAM_NAME}-${AGENT_LABEL}' 
    }
    
    options {
        buildDiscarder(logRotator(
            daysToKeepStr: '${BUILD_RETENTION_DAYS}',
            numToKeepStr: '${BUILD_RETENTION_COUNT}',
            artifactDaysToKeepStr: '${ARTIFACT_RETENTION_DAYS}',
            artifactNumToKeepStr: '${ARTIFACT_RETENTION_COUNT}'
        ))
        timeout(time: ${PIPELINE_TIMEOUT}, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
        skipStagesAfterUnstable()
        parallelsAlwaysFailFast()
    }
    
    environment {
        // Application Configuration
        APP_NAME = '${APP_NAME}'
        APP_VERSION = "${BUILD_NUMBER}-${GIT_COMMIT.take(8)}"
        TEAM_NAME = '${TEAM_NAME}'
        
        // Deployment Configuration
        DEPLOYMENT_STRATEGY = '${DEPLOYMENT_STRATEGY}'
        ENVIRONMENT = '${ENVIRONMENT}'
        
        // Registry Configuration
        REGISTRY_URL = '${REGISTRY_URL}'
        IMAGE_NAME = "${REGISTRY_URL}/${TEAM_NAME}/${APP_NAME}"
        IMAGE_TAG = "${APP_VERSION}"
        
        // Quality Gates
        CODE_COVERAGE_THRESHOLD = '${CODE_COVERAGE_THRESHOLD}'
        SECURITY_SCAN_THRESHOLD = '${SECURITY_SCAN_THRESHOLD}'
        PERFORMANCE_THRESHOLD = '${PERFORMANCE_THRESHOLD}'
        
        // SLI Thresholds
        DEPLOYMENT_FREQUENCY_TARGET = '${DEPLOYMENT_FREQUENCY_TARGET}'
        LEAD_TIME_TARGET = '${LEAD_TIME_TARGET}'
        MTTR_TARGET = '${MTTR_TARGET}'
        ERROR_RATE_THRESHOLD = '${ERROR_RATE_THRESHOLD}'
    }
    
    parameters {
        choice(
            name: 'DEPLOY_ENVIRONMENT',
            choices: ['staging', 'production', 'blue', 'green'],
            description: 'Target deployment environment'
        )
        choice(
            name: 'DEPLOYMENT_STRATEGY_OVERRIDE',
            choices: ['default', 'blue_green', 'canary', 'rolling'],
            description: 'Override deployment strategy'
        )
        booleanParam(
            name: 'SKIP_TESTS',
            defaultValue: false,
            description: 'Skip test execution (not recommended for production)'
        )
        booleanParam(
            name: 'SECURITY_SCAN',
            defaultValue: true,
            description: 'Run security vulnerability scans'
        )
        booleanParam(
            name: 'PERFORMANCE_TEST',
            defaultValue: false,
            description: 'Run performance tests'
        )
        string(
            name: 'CANARY_PERCENTAGE',
            defaultValue: '10',
            description: 'Canary deployment traffic percentage'
        )
    }
    
    stages {
        stage('📋 Pipeline Initialization') {
            steps {
                script {
                    // Pipeline metadata
                    currentBuild.displayName = "${params.DEPLOY_ENVIRONMENT}-${BUILD_NUMBER}"
                    currentBuild.description = "Deploying ${APP_NAME} v${APP_VERSION} to ${params.DEPLOY_ENVIRONMENT}"
                    
                    // Deployment strategy selection
                    env.EFFECTIVE_STRATEGY = params.DEPLOYMENT_STRATEGY_OVERRIDE != 'default' ? 
                        params.DEPLOYMENT_STRATEGY_OVERRIDE : env.DEPLOYMENT_STRATEGY
                    
                    echo """
                    🚀 Pipeline Configuration:
                    📦 Application: ${APP_NAME} v${APP_VERSION}
                    👥 Team: ${TEAM_NAME}
                    🎯 Environment: ${params.DEPLOY_ENVIRONMENT}
                    🔄 Strategy: ${env.EFFECTIVE_STRATEGY}
                    🏷️ Image: ${IMAGE_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }
        
        stage('🔍 Pre-Deployment Validation') {
            parallel {
                stage('Infrastructure Readiness') {
                    steps {
                        script {
                            echo "🏗️ Validating infrastructure readiness..."
                            
                            // Check target environment health
                            sh """
                                echo "Checking ${params.DEPLOY_ENVIRONMENT} environment health..."
                                # Add infrastructure health checks
                            """
                            
                            // Validate deployment strategy compatibility
                            echo "✅ Infrastructure validation completed"
                        }
                    }
                }
                
                stage('Security Pre-Check') {
                    when {
                        expression { params.SECURITY_SCAN }
                    }
                    steps {
                        echo "🔒 Running security pre-checks..."
                        sh """
                            echo "Scanning for secrets in codebase..."
                            # git-secrets --scan || echo "No secrets found"
                            
                            echo "Validating security policies..."
                            # Add security policy validation
                        """
                    }
                }
            }
        }
        
        stage('🔧 Build & Package') {
            steps {
                script {
                    echo "🏗️ Building ${app_type} application..."
                    
                    // Application-specific build steps will be injected here
                    switch("${app_type}") {
                        case "maven":
                            sh """
                                echo "Building Maven application..."
                                mvn clean compile -DskipTests
                                mvn package -DskipTests
                            """
                            break
                        case "python":
                            sh """
                                echo "Building Python application..."
                                python -m pip install --upgrade pip
                                pip install -r requirements.txt
                                python setup.py build
                            """
                            break
                        case "nodejs":
                            sh """
                                echo "Building Node.js application..."
                                npm ci
                                npm run build
                            """
                            break
                    }
                }
            }
        }
        
        stage('🧪 Quality Assurance') {
            parallel {
                stage('Unit Tests') {
                    when {
                        not { params.SKIP_TESTS }
                    }
                    steps {
                        echo "🧪 Running unit tests..."
                        // Application-specific test commands
                        script {
                            publishTestResults(
                                testResultsPattern: '**/target/surefire-reports/*.xml,**/test-results/*.xml',
                                allowEmptyResults: true
                            )
                        }
                    }
                    post {
                        always {
                            publishCoverage(
                                adapters: [
                                    jacocoAdapter(mergeToOneReport: true, path: '**/target/site/jacoco/*.xml'),
                                    coberturaAdapter(path: '**/coverage.xml')
                                ],
                                sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                            )
                        }
                    }
                }
                
                stage('Security Scan') {
                    when {
                        expression { params.SECURITY_SCAN }
                    }
                    steps {
                        echo "🔒 Running security vulnerability scan..."
                        sh """
                            # Trivy filesystem scan
                            trivy fs --exit-code 1 --severity HIGH,CRITICAL . || echo "Security issues found"
                            
                            # OWASP Dependency Check
                            # dependency-check --project "${APP_NAME}" --scan . --format JSON
                        """
                    }
                }
                
                stage('Code Quality') {
                    steps {
                        echo "📊 Running code quality analysis..."
                        // SonarQube or similar analysis
                        sh """
                            echo "Code quality metrics collection..."
                            # sonar-scanner or equivalent
                        """
                    }
                }
            }
        }
        
        stage('🐳 Container Build') {
            steps {
                script {
                    echo "🐳 Building container image..."
                    
                    sh """
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
                        
                        # Security scan of built image
                        trivy image --exit-code 1 --severity HIGH,CRITICAL ${IMAGE_NAME}:${IMAGE_TAG} || echo "Container security issues found"
                    """
                    
                    // Push to registry
                    sh """
                        echo "Pushing image to registry..."
                        docker push ${IMAGE_NAME}:${IMAGE_TAG}
                        docker push ${IMAGE_NAME}:latest
                    """
                }
            }
        }
        
        stage('🚀 Deployment') {
            steps {
                script {
                    echo "🚀 Executing ${env.EFFECTIVE_STRATEGY} deployment..."
                    
                    switch(env.EFFECTIVE_STRATEGY) {
                        case "blue_green":
                            echo "🔄 Blue-Green Deployment"
                            sh """
                                echo "Deploying to inactive environment..."
                                echo "Running health checks..."
                                echo "Switching traffic..."
                            """
                            break
                            
                        case "canary":
                            echo "🐦 Canary Deployment"
                            sh """
                                echo "Deploying canary with ${params.CANARY_PERCENTAGE}% traffic..."
                                echo "Monitoring canary metrics..."
                            """
                            break
                            
                        case "rolling":
                            echo "🔄 Rolling Deployment"
                            sh """
                                echo "Performing rolling update..."
                                echo "Validating each instance..."
                            """
                            break
                    }
                }
            }
        }
        
        stage('✅ Post-Deployment Validation') {
            parallel {
                stage('Health Checks') {
                    steps {
                        echo "🏥 Running health checks..."
                        sh """
                            echo "Application health check..."
                            echo "Service availability check..."
                            echo "Database connectivity check..."
                        """
                    }
                }
                
                stage('Performance Tests') {
                    when {
                        expression { params.PERFORMANCE_TEST }
                    }
                    steps {
                        echo "⚡ Running performance tests..."
                        sh """
                            echo "Load testing..."
                            echo "Response time validation..."
                            echo "Throughput measurement..."
                        """
                    }
                }
                
                stage('SLI Validation') {
                    steps {
                        echo "📊 Validating SLI metrics..."
                        script {
                            // Collect and validate SLI metrics
                            sh """
                                echo "Deployment frequency: within target"
                                echo "Lead time: within target"
                                echo "Error rate: within threshold"
                            """
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Archive artifacts
            archiveArtifacts(
                artifacts: '**/target/*.jar,**/dist/**,**/coverage/**,**/test-results/**',
                allowEmptyArchive: true
            )
            
            // SLI metrics collection
            script {
                def pipelineMetrics = [
                    pipeline_duration: currentBuild.duration,
                    deployment_timestamp: new Date(),
                    environment: params.DEPLOY_ENVIRONMENT,
                    strategy: env.EFFECTIVE_STRATEGY,
                    status: currentBuild.result ?: 'SUCCESS'
                ]
                
                writeJSON file: 'pipeline-metrics.json', json: pipelineMetrics
                archiveArtifacts artifacts: 'pipeline-metrics.json'
            }
            
            // Cleanup
            sh """
                docker image prune -f --filter "label=build=${BUILD_NUMBER}" || true
            """
        }
        
        success {
            echo "✅ Pipeline completed successfully!"
            
            // Notification
            script {
                if (params.DEPLOY_ENVIRONMENT == 'production') {
                    // Send success notification
                    echo "🎉 Production deployment successful!"
                }
            }
        }
        
        failure {
            echo "❌ Pipeline failed!"
            
            // Automated rollback for production
            script {
                if (params.DEPLOY_ENVIRONMENT == 'production' && env.EFFECTIVE_STRATEGY in ['blue_green', 'canary']) {
                    echo "🔄 Initiating automated rollback..."
                    sh """
                        echo "Rolling back ${env.EFFECTIVE_STRATEGY} deployment..."
                        # Add rollback logic
                    """
                }
            }
        }
        
        unstable {
            echo "⚠️ Pipeline completed with warnings"
        }
    }
}
EOF

    # Substitute app_type in the template
    sed -i "s/\${APP_TYPE}/$app_type/g" "$template_file"
    
    log_success "$app_type pipeline template generated: $template_file"
}

# Function to generate infrastructure pipeline template
generate_infrastructure_template() {
    local infra_type="$1"
    local template_file="${TEMPLATES_DIR}/infrastructure/${infra_type}-pipeline.Jenkinsfile"
    
    log_info "Generating $infra_type infrastructure pipeline template..."
    
    cat > "$template_file" << 'EOF'
// Infrastructure Pipeline Template for ${INFRA_TYPE}
// Deployment Engineering Best Practices

pipeline {
    agent { 
        label '${TEAM_NAME}-python'
    }
    
    options {
        buildDiscarder(logRotator(daysToKeepStr: '90', numToKeepStr: '100'))
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
        skipStagesAfterUnstable()
    }
    
    environment {
        TEAM_NAME = '${TEAM_NAME}'
        ENVIRONMENT = '${ENVIRONMENT}'
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_STDOUT_CALLBACK = 'yaml'
    }
    
    stages {
        stage('🔍 Infrastructure Validation') {
            steps {
                echo "🏗️ Validating infrastructure configuration..."
                sh """
                    ansible --version
                    ansible-playbook --syntax-check ansible/site.yml
                """
            }
        }
        
        stage('📊 Pre-Deployment Metrics') {
            steps {
                echo "📊 Collecting baseline metrics..."
                // Collect current infrastructure state
            }
        }
        
        stage('🚀 Infrastructure Deployment') {
            steps {
                echo "🚀 Deploying infrastructure..."
                // Infrastructure deployment logic
            }
        }
        
        stage('✅ Post-Deployment Validation') {
            steps {
                echo "✅ Validating infrastructure deployment..."
                // Validation logic
            }
        }
    }
}
EOF

    sed -i "s/\${INFRA_TYPE}/$infra_type/g" "$template_file"
    
    log_success "$infra_type infrastructure template generated: $template_file"
}

# Main execution function
main() {
    log_info "🚀 Starting Advanced Pipeline Template Generation"
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --all)
                GENERATE_ALL=true
                shift
                ;;
            --app-type)
                APP_TYPES+=("$2")
                shift 2
                ;;
            --infra-type)
                INFRA_TYPES+=("$2")
                shift 2
                ;;
            --help)
                echo "Usage: $0 [--all] [--app-type TYPE] [--infra-type TYPE]"
                echo "  --all: Generate all templates"
                echo "  --app-type: Generate specific application type (maven, python, nodejs)"
                echo "  --infra-type: Generate specific infrastructure type (health-check, backup, monitoring)"
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    # Initialize arrays if not set
    APP_TYPES=${APP_TYPES:-()}
    INFRA_TYPES=${INFRA_TYPES:-()}
    
    # Set defaults if --all is specified
    if [[ "${GENERATE_ALL:-false}" == "true" ]]; then
        APP_TYPES=("maven" "python" "nodejs")
        INFRA_TYPES=("health-check" "backup" "monitoring" "security-scan")
    fi
    
    # Validate dependencies
    validate_dependencies
    
    # Create template structure
    create_template_structure
    
    # Generate application templates
    for app_type in "${APP_TYPES[@]}"; do
        generate_application_template "$app_type"
    done
    
    # Generate infrastructure templates
    for infra_type in "${INFRA_TYPES[@]}"; do
        generate_infrastructure_template "$infra_type"
    done
    
    log_success "🎉 Pipeline template generation completed!"
    log_info "Templates generated in: $TEMPLATES_DIR"
}

# Execute main function with all arguments
main "$@"